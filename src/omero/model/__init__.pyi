from __future__ import annotations
import Ice
import IcePy
import omero_model_UnitBase
from _typeshed import Incomplete
from typing import ClassVar, Optional, Union
from omero.rtypes import RLongI, RIntI, RStringI
from omero.model.enums import (
    UnitsLength,
    UnitsTime,
)

class Details(Ice.Object):
    def getOwner(self, current: Incomplete | None = ...) -> Optional[ExperimenterI]: ...
    def setOwner(
        self, theOwner: Optional[ExperimenterI], current: Incomplete | None = ...
    ): ...
    def getGroup(self, current: Incomplete | None = ...) -> ExperimenterGroupI: ...
    def setGroup(
        self, theGroup: ExperimenterGroupI, current: Incomplete | None = ...
    ): ...
    def getCreationEvent(self, current: Incomplete | None = ...): ...
    def setCreationEvent(
        self, theCreationEvent: EventI, current: Incomplete | None = ...
    ): ...
    def getUpdateEvent(self, current: Incomplete | None = ...): ...
    def setUpdateEvent(self, theUpdateEvent, current: Incomplete | None = ...): ...
    def getPermissions(self, current: Incomplete | None = ...): ...
    def setPermissions(self, thePermissions, current: Incomplete | None = ...): ...
    def getExternalInfo(self, current: Incomplete | None = ...): ...
    def setExternalInfo(self, theExternalInfo, current: Incomplete | None = ...): ...

class DetailsPrx(IcePy.ObjectPrx):
    def getOwner(self, _ctx: Incomplete | None = ...) -> Optional[ExperimenterI]: ...
    def setOwner(
        self, theOwner: Optional[ExperimenterI], _ctx: Incomplete | None = ...
    ): ...
    def getGroup(self, _ctx: Incomplete | None = ...) -> ExperimenterGroupI: ...
    def setGroup(self, theGroup: ExperimenterGroupI, _ctx: Incomplete | None = ...): ...
    def getCreationEvent(self, _ctx: Incomplete | None = ...): ...
    def setCreationEvent(
        self, theCreationEvent: EventI, _ctx: Incomplete | None = ...
    ): ...
    def getUpdateEvent(self, _ctx: Incomplete | None = ...): ...
    def setUpdateEvent(self, theUpdateEvent, _ctx: Incomplete | None = ...): ...
    def getPermissions(self, _ctx: Incomplete | None = ...): ...
    def setPermissions(self, thePermissions, _ctx: Incomplete | None = ...): ...
    def getExternalInfo(self, _ctx: Incomplete | None = ...): ...
    def setExternalInfo(self, theExternalInfo, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DetailsI(Details):
    def getClient(self): ...
    def getSession(self): ...
    def getEventContext(self): ...
    def getCallContext(self): ...
    def getOwner(self) -> Optional[ExperimenterI]: ...
    def setOwner(self, value: Optional[ExperimenterI]): ...
    def getGroup(self) -> ExperimenterGroupI: ...
    def setGroup(self, value: ExperimenterGroupI): ...
    def getCreationEvent(self): ...
    def setCreationEvent(self, value: EventI): ...
    def getUpdateEvent(self): ...
    def setUpdateEvent(self, value): ...
    def getPermissions(self): ...
    def setPermissions(self, value): ...
    def getExternalInfo(self): ...
    def setExternalInfo(self, value): ...

class IObject(Ice.Object):
    def getId(self, current: None = ...) -> None: ...
    def setId(self, id: RLongI, current: None = ...): ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def unload(self, current: None = ...): ...
    def unloadCollections(self, current: None = ...): ...
    def unloadDetails(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...

class IObjectPrx(IcePy.ObjectPrx):
    def getId(self, _ctx: None = ...) -> None: ...
    def setId(self, id: RLongI, _ctx: None = ...): ...
    def getDetails(self, _ctx: None = ...) -> DetailsI: ...
    def proxy(self, _ctx: None = ...) -> ImageI: ...
    def shallowCopy(self, _ctx: Incomplete | None = ...): ...
    def unload(self, _ctx: None = ...): ...
    def unloadCollections(self, _ctx: None = ...): ...
    def unloadDetails(self, _ctx: None = ...): ...
    def isLoaded(self, _ctx: None = ...) -> bool: ...
    def isGlobal(self, _ctx: Incomplete | None = ...): ...
    def isLink(self, _ctx: Incomplete | None = ...): ...
    def isMutable(self, _ctx: Incomplete | None = ...): ...
    def isAnnotated(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class AcquisitionMode(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class AcquisitionModePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class AcquisitionModeI(AcquisitionMode):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class AdminPrivilege(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class AdminPrivilegePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class AdminPrivilegeI(AdminPrivilege):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class AffineTransform(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getA00(self, current: Incomplete | None = ...): ...
    def setA00(self, theA00, current: Incomplete | None = ...): ...
    def getA10(self, current: Incomplete | None = ...): ...
    def setA10(self, theA10, current: Incomplete | None = ...): ...
    def getA01(self, current: Incomplete | None = ...): ...
    def setA01(self, theA01, current: Incomplete | None = ...): ...
    def getA11(self, current: Incomplete | None = ...): ...
    def setA11(self, theA11, current: Incomplete | None = ...): ...
    def getA02(self, current: Incomplete | None = ...): ...
    def setA02(self, theA02, current: Incomplete | None = ...): ...
    def getA12(self, current: Incomplete | None = ...): ...
    def setA12(self, theA12, current: Incomplete | None = ...): ...

class AffineTransformPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getA00(self, _ctx: Incomplete | None = ...): ...
    def setA00(self, theA00, _ctx: Incomplete | None = ...): ...
    def getA10(self, _ctx: Incomplete | None = ...): ...
    def setA10(self, theA10, _ctx: Incomplete | None = ...): ...
    def getA01(self, _ctx: Incomplete | None = ...): ...
    def setA01(self, theA01, _ctx: Incomplete | None = ...): ...
    def getA11(self, _ctx: Incomplete | None = ...): ...
    def setA11(self, theA11, _ctx: Incomplete | None = ...): ...
    def getA02(self, _ctx: Incomplete | None = ...): ...
    def setA02(self, theA02, _ctx: Incomplete | None = ...): ...
    def getA12(self, _ctx: Incomplete | None = ...): ...
    def setA12(self, theA12, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class AffineTransformI(AffineTransform):
    A00: ClassVar[str] = ...
    A10: ClassVar[str] = ...
    A01: ClassVar[str] = ...
    A11: ClassVar[str] = ...
    A02: ClassVar[str] = ...
    A12: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadA00(self): ...
    def getA00(self, current: Incomplete | None = ...): ...
    def setA00(self, _a00, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadA10(self): ...
    def getA10(self, current: Incomplete | None = ...): ...
    def setA10(self, _a10, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadA01(self): ...
    def getA01(self, current: Incomplete | None = ...): ...
    def setA01(self, _a01, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadA11(self): ...
    def getA11(self, current: Incomplete | None = ...): ...
    def setA11(self, _a11, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadA02(self): ...
    def getA02(self, current: Incomplete | None = ...): ...
    def setA02(self, _a02, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadA12(self): ...
    def getA12(self, current: Incomplete | None = ...): ...
    def setA12(self, _a12, current: Incomplete | None = ..., wrap: bool = ...): ...

class AnnotationAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class AnnotationAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class AnnotationAnnotationLinkI(AnnotationAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class LightSource(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, current: None = ...): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, thePower, current: Incomplete | None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightSourceAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addLightSourceAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findLightSourceAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class LightSourcePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def getModel(self, _ctx: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, _ctx: None = ...): ...
    def getPower(self, _ctx: Incomplete | None = ...): ...
    def setPower(self, thePower, _ctx: Incomplete | None = ...): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addLightSourceAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllLightSourceAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeLightSourceAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllLightSourceAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addLightSourceAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findLightSourceAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class Arc(LightSource):
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...

class ArcPrx(LightSourcePrx):
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ArcI(Arc):
    TYPE: ClassVar[str] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    POWER: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadPower(self): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, _power, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightSourceAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ArcType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class ArcTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ArcTypeI(ArcType):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Binning(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class BinningPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class BinningI(Binning):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Annotation(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, theNs: RStringI, current: None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class AnnotationPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getNs(self, _ctx: None = ...) -> RStringI: ...
    def setNs(self, theNs: RStringI, _ctx: None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addAnnotationAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findAnnotationAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class BasicAnnotation(Annotation): ...

class BasicAnnotationPrx(AnnotationPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class BooleanAnnotation(BasicAnnotation):
    def getBoolValue(self, current: Incomplete | None = ...): ...
    def setBoolValue(self, theBoolValue, current: Incomplete | None = ...): ...

class BooleanAnnotationPrx(BasicAnnotationPrx):
    def getBoolValue(self, _ctx: Incomplete | None = ...): ...
    def setBoolValue(self, theBoolValue, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class BooleanAnnotationI(BooleanAnnotation):
    BOOLVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadBoolValue(self): ...
    def getBoolValue(self, current: Incomplete | None = ...): ...
    def setBoolValue(
        self, _boolValue, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Channel(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getStatsInfo(self, current: Incomplete | None = ...): ...
    def setStatsInfo(self, theStatsInfo, current: Incomplete | None = ...): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, theRed, current: Incomplete | None = ...): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, theGreen, current: Incomplete | None = ...): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, theBlue, current: Incomplete | None = ...): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, theAlpha, current: Incomplete | None = ...): ...
    def getLookupTable(self, current: Incomplete | None = ...): ...
    def setLookupTable(self, theLookupTable, current: Incomplete | None = ...): ...
    def getLogicalChannel(self, current: Incomplete | None = ...): ...
    def setLogicalChannel(
        self, theLogicalChannel, current: Incomplete | None = ...
    ): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, thePixels: PixelsI, current: None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addChannelAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllChannelAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeChannelAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllChannelAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addChannelAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findChannelAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeChannelAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ChannelPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getStatsInfo(self, _ctx: Incomplete | None = ...): ...
    def setStatsInfo(self, theStatsInfo, _ctx: Incomplete | None = ...): ...
    def getRed(self, _ctx: Incomplete | None = ...): ...
    def setRed(self, theRed, _ctx: Incomplete | None = ...): ...
    def getGreen(self, _ctx: Incomplete | None = ...): ...
    def setGreen(self, theGreen, _ctx: Incomplete | None = ...): ...
    def getBlue(self, _ctx: Incomplete | None = ...): ...
    def setBlue(self, theBlue, _ctx: Incomplete | None = ...): ...
    def getAlpha(self, _ctx: Incomplete | None = ...): ...
    def setAlpha(self, theAlpha, _ctx: Incomplete | None = ...): ...
    def getLookupTable(self, _ctx: Incomplete | None = ...): ...
    def setLookupTable(self, theLookupTable, _ctx: Incomplete | None = ...): ...
    def getLogicalChannel(self, _ctx: Incomplete | None = ...): ...
    def setLogicalChannel(self, theLogicalChannel, _ctx: Incomplete | None = ...): ...
    def getPixels(self, _ctx: Incomplete | None = ...): ...
    def setPixels(self, thePixels: PixelsI, _ctx: None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addChannelAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllChannelAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeChannelAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllChannelAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addChannelAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findChannelAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeChannelAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ChannelI(Channel):
    STATSINFO: ClassVar[str] = ...
    RED: ClassVar[str] = ...
    GREEN: ClassVar[str] = ...
    BLUE: ClassVar[str] = ...
    ALPHA: ClassVar[str] = ...
    LOOKUPTABLE: ClassVar[str] = ...
    LOGICALCHANNEL: ClassVar[str] = ...
    PIXELS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadStatsInfo(self): ...
    def getStatsInfo(self, current: Incomplete | None = ...): ...
    def setStatsInfo(
        self, _statsInfo, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadRed(self): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, _red, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGreen(self): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, _green, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBlue(self): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, _blue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAlpha(self): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, _alpha, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLookupTable(self): ...
    def getLookupTable(self, current: Incomplete | None = ...): ...
    def setLookupTable(
        self, _lookupTable, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadLogicalChannel(self): ...
    def getLogicalChannel(self, current: Incomplete | None = ...): ...
    def setLogicalChannel(
        self, _logicalChannel, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPixels(self): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, _pixels: PixelsI, current: None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addChannelAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllChannelAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeChannelAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllChannelAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addChannelAnnotationLinkToBoth(self, link, bothSides): ...
    def findChannelAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeChannelAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ChannelAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ChannelAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ChannelAnnotationLinkI(ChannelAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ChannelBinding(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getRenderingDef(self, current: Incomplete | None = ...): ...
    def setRenderingDef(self, theRenderingDef, current: Incomplete | None = ...): ...
    def getFamily(self, current: Incomplete | None = ...): ...
    def setFamily(self, theFamily, current: Incomplete | None = ...): ...
    def getCoefficient(self, current: Incomplete | None = ...): ...
    def setCoefficient(self, theCoefficient, current: Incomplete | None = ...): ...
    def getInputStart(self, current: Incomplete | None = ...): ...
    def setInputStart(self, theInputStart, current: Incomplete | None = ...): ...
    def getInputEnd(self, current: Incomplete | None = ...): ...
    def setInputEnd(self, theInputEnd, current: Incomplete | None = ...): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(self, theActive, current: Incomplete | None = ...): ...
    def getNoiseReduction(self, current: Incomplete | None = ...): ...
    def setNoiseReduction(
        self, theNoiseReduction, current: Incomplete | None = ...
    ): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, theRed, current: Incomplete | None = ...): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, theGreen, current: Incomplete | None = ...): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, theBlue, current: Incomplete | None = ...): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, theAlpha, current: Incomplete | None = ...): ...
    def getLookupTable(self, current: Incomplete | None = ...): ...
    def setLookupTable(self, theLookupTable, current: Incomplete | None = ...): ...
    def unloadSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def sizeOfSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def copySpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def addCodomainMapContext(self, target, current: Incomplete | None = ...): ...
    def addAllCodomainMapContextSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeCodomainMapContext(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllCodomainMapContextSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def reloadSpatialDomainEnhancement(
        self, toCopy, current: Incomplete | None = ...
    ): ...
    def getCodomainMapContext(self, index, current: Incomplete | None = ...): ...
    def setCodomainMapContext(
        self, index, theElement, current: Incomplete | None = ...
    ): ...
    def getPrimaryCodomainMapContext(self, current: Incomplete | None = ...): ...
    def setPrimaryCodomainMapContext(
        self, theElement, current: Incomplete | None = ...
    ): ...

class ChannelBindingPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getRenderingDef(self, _ctx: Incomplete | None = ...): ...
    def setRenderingDef(self, theRenderingDef, _ctx: Incomplete | None = ...): ...
    def getFamily(self, _ctx: Incomplete | None = ...): ...
    def setFamily(self, theFamily, _ctx: Incomplete | None = ...): ...
    def getCoefficient(self, _ctx: Incomplete | None = ...): ...
    def setCoefficient(self, theCoefficient, _ctx: Incomplete | None = ...): ...
    def getInputStart(self, _ctx: Incomplete | None = ...): ...
    def setInputStart(self, theInputStart, _ctx: Incomplete | None = ...): ...
    def getInputEnd(self, _ctx: Incomplete | None = ...): ...
    def setInputEnd(self, theInputEnd, _ctx: Incomplete | None = ...): ...
    def getActive(self, _ctx: Incomplete | None = ...): ...
    def setActive(self, theActive, _ctx: Incomplete | None = ...): ...
    def getNoiseReduction(self, _ctx: Incomplete | None = ...): ...
    def setNoiseReduction(self, theNoiseReduction, _ctx: Incomplete | None = ...): ...
    def getRed(self, _ctx: Incomplete | None = ...): ...
    def setRed(self, theRed, _ctx: Incomplete | None = ...): ...
    def getGreen(self, _ctx: Incomplete | None = ...): ...
    def setGreen(self, theGreen, _ctx: Incomplete | None = ...): ...
    def getBlue(self, _ctx: Incomplete | None = ...): ...
    def setBlue(self, theBlue, _ctx: Incomplete | None = ...): ...
    def getAlpha(self, _ctx: Incomplete | None = ...): ...
    def setAlpha(self, theAlpha, _ctx: Incomplete | None = ...): ...
    def getLookupTable(self, _ctx: Incomplete | None = ...): ...
    def setLookupTable(self, theLookupTable, _ctx: Incomplete | None = ...): ...
    def unloadSpatialDomainEnhancement(self, _ctx: Incomplete | None = ...): ...
    def sizeOfSpatialDomainEnhancement(self, _ctx: Incomplete | None = ...): ...
    def copySpatialDomainEnhancement(self, _ctx: Incomplete | None = ...): ...
    def addCodomainMapContext(self, target, _ctx: Incomplete | None = ...): ...
    def addAllCodomainMapContextSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeCodomainMapContext(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllCodomainMapContextSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearSpatialDomainEnhancement(self, _ctx: Incomplete | None = ...): ...
    def reloadSpatialDomainEnhancement(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getCodomainMapContext(self, index, _ctx: Incomplete | None = ...): ...
    def setCodomainMapContext(
        self, index, theElement, _ctx: Incomplete | None = ...
    ): ...
    def getPrimaryCodomainMapContext(self, _ctx: Incomplete | None = ...): ...
    def setPrimaryCodomainMapContext(
        self, theElement, _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ChannelBindingI(ChannelBinding):
    RENDERINGDEF: ClassVar[str] = ...
    FAMILY: ClassVar[str] = ...
    COEFFICIENT: ClassVar[str] = ...
    INPUTSTART: ClassVar[str] = ...
    INPUTEND: ClassVar[str] = ...
    ACTIVE: ClassVar[str] = ...
    NOISEREDUCTION: ClassVar[str] = ...
    RED: ClassVar[str] = ...
    GREEN: ClassVar[str] = ...
    BLUE: ClassVar[str] = ...
    ALPHA: ClassVar[str] = ...
    LOOKUPTABLE: ClassVar[str] = ...
    SPATIALDOMAINENHANCEMENT: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadRenderingDef(self): ...
    def getRenderingDef(self, current: Incomplete | None = ...): ...
    def setRenderingDef(
        self, _renderingDef, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFamily(self): ...
    def getFamily(self, current: Incomplete | None = ...): ...
    def setFamily(
        self, _family, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadCoefficient(self): ...
    def getCoefficient(self, current: Incomplete | None = ...): ...
    def setCoefficient(
        self, _coefficient, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInputStart(self): ...
    def getInputStart(self, current: Incomplete | None = ...): ...
    def setInputStart(
        self, _inputStart, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInputEnd(self): ...
    def getInputEnd(self, current: Incomplete | None = ...): ...
    def setInputEnd(
        self, _inputEnd, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadActive(self): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(
        self, _active, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadNoiseReduction(self): ...
    def getNoiseReduction(self, current: Incomplete | None = ...): ...
    def setNoiseReduction(
        self, _noiseReduction, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadRed(self): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, _red, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGreen(self): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, _green, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBlue(self): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, _blue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAlpha(self): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, _alpha, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLookupTable(self): ...
    def getLookupTable(self, current: Incomplete | None = ...): ...
    def setLookupTable(
        self, _lookupTable, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def isSpatialDomainEnhancementLoaded(self): ...
    def sizeOfSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def copySpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def iterateSpatialDomainEnhancement(self): ...
    def addCodomainMapContext(self, target, current: Incomplete | None = ...): ...
    def addAllCodomainMapContextSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeCodomainMapContext(self, target, current: Incomplete | None = ...): ...
    def removeAllCodomainMapContextSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def reloadSpatialDomainEnhancement(
        self, toCopy, current: Incomplete | None = ...
    ): ...
    def getCodomainMapContext(self, index, current: Incomplete | None = ...): ...
    def setCodomainMapContext(
        self, index, element, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getPrimaryCodomainMapContext(self, current: Incomplete | None = ...): ...
    def setPrimaryCodomainMapContext(
        self, element, current: Incomplete | None = ...
    ): ...

class ChecksumAlgorithm(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class ChecksumAlgorithmPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ChecksumAlgorithmI(ChecksumAlgorithm):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class TextAnnotation(Annotation):
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, current: None = ...): ...

class TextAnnotationPrx(AnnotationPrx):
    def getTextValue(self, _ctx: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class CommentAnnotation(TextAnnotation): ...

class CommentAnnotationPrx(TextAnnotationPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class CommentAnnotationI(CommentAnnotation):
    TEXTVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ContrastMethod(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class ContrastMethodPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ContrastMethodI(ContrastMethod):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class CodomainMapContext(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getChannelBinding(self, current: Incomplete | None = ...): ...
    def setChannelBinding(
        self, theChannelBinding, current: Incomplete | None = ...
    ): ...

class CodomainMapContextPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getChannelBinding(self, _ctx: Incomplete | None = ...): ...
    def setChannelBinding(self, theChannelBinding, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ContrastStretchingContext(CodomainMapContext):
    def getXstart(self, current: Incomplete | None = ...): ...
    def setXstart(self, theXstart, current: Incomplete | None = ...): ...
    def getYstart(self, current: Incomplete | None = ...): ...
    def setYstart(self, theYstart, current: Incomplete | None = ...): ...
    def getXend(self, current: Incomplete | None = ...): ...
    def setXend(self, theXend, current: Incomplete | None = ...): ...
    def getYend(self, current: Incomplete | None = ...): ...
    def setYend(self, theYend, current: Incomplete | None = ...): ...

class ContrastStretchingContextPrx(CodomainMapContextPrx):
    def getXstart(self, _ctx: Incomplete | None = ...): ...
    def setXstart(self, theXstart, _ctx: Incomplete | None = ...): ...
    def getYstart(self, _ctx: Incomplete | None = ...): ...
    def setYstart(self, theYstart, _ctx: Incomplete | None = ...): ...
    def getXend(self, _ctx: Incomplete | None = ...): ...
    def setXend(self, theXend, _ctx: Incomplete | None = ...): ...
    def getYend(self, _ctx: Incomplete | None = ...): ...
    def setYend(self, theYend, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ContrastStretchingContextI(ContrastStretchingContext):
    XSTART: ClassVar[str] = ...
    YSTART: ClassVar[str] = ...
    XEND: ClassVar[str] = ...
    YEND: ClassVar[str] = ...
    CHANNELBINDING: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadXstart(self): ...
    def getXstart(self, current: Incomplete | None = ...): ...
    def setXstart(
        self, _xstart, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadYstart(self): ...
    def getYstart(self, current: Incomplete | None = ...): ...
    def setYstart(
        self, _ystart, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadXend(self): ...
    def getXend(self, current: Incomplete | None = ...): ...
    def setXend(self, _xend, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadYend(self): ...
    def getYend(self, current: Incomplete | None = ...): ...
    def setYend(self, _yend, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChannelBinding(self): ...
    def getChannelBinding(self, current: Incomplete | None = ...): ...
    def setChannelBinding(
        self, _channelBinding, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class Correction(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class CorrectionPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class CorrectionI(Correction):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class DBPatch(IObject):
    def getCurrentVersion(self, current: Incomplete | None = ...): ...
    def setCurrentVersion(
        self, theCurrentVersion, current: Incomplete | None = ...
    ): ...
    def getCurrentPatch(self, current: Incomplete | None = ...): ...
    def setCurrentPatch(self, theCurrentPatch, current: Incomplete | None = ...): ...
    def getPreviousVersion(self, current: Incomplete | None = ...): ...
    def setPreviousVersion(
        self, thePreviousVersion, current: Incomplete | None = ...
    ): ...
    def getPreviousPatch(self, current: Incomplete | None = ...): ...
    def setPreviousPatch(self, thePreviousPatch, current: Incomplete | None = ...): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, theFinished, current: Incomplete | None = ...): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, theMessage, current: Incomplete | None = ...): ...

class DBPatchPrx(IObjectPrx):
    def getCurrentVersion(self, _ctx: Incomplete | None = ...): ...
    def setCurrentVersion(self, theCurrentVersion, _ctx: Incomplete | None = ...): ...
    def getCurrentPatch(self, _ctx: Incomplete | None = ...): ...
    def setCurrentPatch(self, theCurrentPatch, _ctx: Incomplete | None = ...): ...
    def getPreviousVersion(self, _ctx: Incomplete | None = ...): ...
    def setPreviousVersion(self, thePreviousVersion, _ctx: Incomplete | None = ...): ...
    def getPreviousPatch(self, _ctx: Incomplete | None = ...): ...
    def setPreviousPatch(self, thePreviousPatch, _ctx: Incomplete | None = ...): ...
    def getFinished(self, _ctx: Incomplete | None = ...): ...
    def setFinished(self, theFinished, _ctx: Incomplete | None = ...): ...
    def getMessage(self, _ctx: Incomplete | None = ...): ...
    def setMessage(self, theMessage, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DBPatchI(DBPatch):
    CURRENTVERSION: ClassVar[str] = ...
    CURRENTPATCH: ClassVar[str] = ...
    PREVIOUSVERSION: ClassVar[str] = ...
    PREVIOUSPATCH: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadCurrentVersion(self): ...
    def getCurrentVersion(self, current: Incomplete | None = ...): ...
    def setCurrentVersion(
        self, _currentVersion, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadCurrentPatch(self): ...
    def getCurrentPatch(self, current: Incomplete | None = ...): ...
    def setCurrentPatch(
        self, _currentPatch, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPreviousVersion(self): ...
    def getPreviousVersion(self, current: Incomplete | None = ...): ...
    def setPreviousVersion(
        self, _previousVersion, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPreviousPatch(self): ...
    def getPreviousPatch(self, current: Incomplete | None = ...): ...
    def setPreviousPatch(
        self, _previousPatch, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(
        self, _finished, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class Dataset(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def unloadProjectLinks(self, current: Incomplete | None = ...): ...
    def sizeOfProjectLinks(self, current: Incomplete | None = ...): ...
    def copyProjectLinks(self, current: Incomplete | None = ...): ...
    def addProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectDatasetLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeProjectDatasetLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllProjectDatasetLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearProjectLinks(self, current: Incomplete | None = ...): ...
    def reloadProjectLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getProjectLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkProject(self, addition, current: Incomplete | None = ...): ...
    def addProjectDatasetLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findProjectDatasetLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkProject(self, removal, current: Incomplete | None = ...): ...
    def removeProjectDatasetLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedProjectList(self, current: Incomplete | None = ...): ...
    def unloadImageLinks(self, current: Incomplete | None = ...): ...
    def sizeOfImageLinks(self, current: None = ...) -> int: ...
    def copyImageLinks(self, current: Incomplete | None = ...): ...
    def addDatasetImageLink(
        self, target: DatasetImageLinkI, current: Optional[bool] = ...
    ): ...
    def addAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDatasetImageLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDatasetImageLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearImageLinks(self, current: Incomplete | None = ...): ...
    def reloadImageLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getImageLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkImage(self, addition: ImageI, current: None = ...) -> DatasetImageLinkI: ...
    def addDatasetImageLinkToBoth(
        self, link: DatasetImageLinkI, bothSides: bool, current: Incomplete | None = ...
    ): ...
    def findDatasetImageLink(
        self, removal: DatasetI, current: None = ...
    ) -> List[DatasetImageLinkI]: ...
    def unlinkImage(self, removal: ImageI, current: None = ...): ...
    def removeDatasetImageLinkFromBoth(
        self, link: DatasetImageLinkI, bothSides: bool, current: None = ...
    ): ...
    def linkedImageList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addDatasetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDatasetAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeDatasetAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllDatasetAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addDatasetAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findDatasetAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDatasetAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class DatasetPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def unloadProjectLinks(self, _ctx: Incomplete | None = ...): ...
    def sizeOfProjectLinks(self, _ctx: Incomplete | None = ...): ...
    def copyProjectLinks(self, _ctx: Incomplete | None = ...): ...
    def addProjectDatasetLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllProjectDatasetLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeProjectDatasetLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllProjectDatasetLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearProjectLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadProjectLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getProjectLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkProject(self, addition, _ctx: Incomplete | None = ...): ...
    def addProjectDatasetLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findProjectDatasetLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkProject(self, removal, _ctx: Incomplete | None = ...): ...
    def removeProjectDatasetLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedProjectList(self, _ctx: Incomplete | None = ...): ...
    def unloadImageLinks(self, _ctx: Incomplete | None = ...): ...
    def sizeOfImageLinks(self, _ctx: None = ...) -> int: ...
    def copyImageLinks(self, _ctx: Incomplete | None = ...): ...
    def addDatasetImageLink(
        self, target: DatasetImageLinkI, _ctx: Optional[bool] = ...
    ): ...
    def addAllDatasetImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeDatasetImageLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllDatasetImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearImageLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadImageLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getImageLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkImage(self, addition: ImageI, _ctx: None = ...) -> DatasetImageLinkI: ...
    def addDatasetImageLinkToBoth(
        self, link: DatasetImageLinkI, bothSides: bool, _ctx: Incomplete | None = ...
    ): ...
    def findDatasetImageLink(
        self, removal: DatasetI, _ctx: None = ...
    ) -> List[DatasetImageLinkI]: ...
    def unlinkImage(self, removal: ImageI, _ctx: None = ...): ...
    def removeDatasetImageLinkFromBoth(
        self, link: DatasetImageLinkI, bothSides: bool, _ctx: None = ...
    ): ...
    def linkedImageList(self, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addDatasetAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllDatasetAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeDatasetAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllDatasetAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addDatasetAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findDatasetAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeDatasetAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DatasetI(Dataset):
    PROJECTLINKS: ClassVar[str] = ...
    IMAGELINKS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadProjectLinks(self, current: Incomplete | None = ...): ...
    def isProjectLinksLoaded(self): ...
    def sizeOfProjectLinks(self, current: Incomplete | None = ...): ...
    def copyProjectLinks(self, current: Incomplete | None = ...): ...
    def iterateProjectLinks(self): ...
    def addProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectDatasetLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def removeAllProjectDatasetLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearProjectLinks(self, current: Incomplete | None = ...): ...
    def reloadProjectLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getProjectLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkProject(self, addition, current: Incomplete | None = ...): ...
    def addProjectDatasetLinkToBoth(self, link, bothSides): ...
    def findProjectDatasetLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkProject(self, removal, current: Incomplete | None = ...): ...
    def removeProjectDatasetLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedProjectList(self, current: Incomplete | None = ...): ...
    def unloadImageLinks(self, current: Incomplete | None = ...): ...
    def isImageLinksLoaded(self): ...
    def sizeOfImageLinks(self, current: None = ...) -> int: ...
    def copyImageLinks(self, current: Incomplete | None = ...): ...
    def iterateImageLinks(self): ...
    def addDatasetImageLink(
        self, target: DatasetImageLinkI, current: Optional[bool] = ...
    ): ...
    def addAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDatasetImageLink(self, target, current: Incomplete | None = ...): ...
    def removeAllDatasetImageLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearImageLinks(self, current: Incomplete | None = ...): ...
    def reloadImageLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getImageLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkImage(self, addition: ImageI, current: None = ...) -> DatasetImageLinkI: ...
    def addDatasetImageLinkToBoth(self, link: DatasetImageLinkI, bothSides: bool): ...
    def findDatasetImageLink(
        self, removal: DatasetI, current: None = ...
    ) -> List[DatasetImageLinkI]: ...
    def unlinkImage(self, removal: ImageI, current: None = ...): ...
    def removeDatasetImageLinkFromBoth(
        self, link: DatasetImageLinkI, bothSides: bool, current: None = ...
    ): ...
    def linkedImageList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addDatasetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDatasetAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeDatasetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllDatasetAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addDatasetAnnotationLinkToBoth(self, link, bothSides): ...
    def findDatasetAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDatasetAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class DatasetAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class DatasetAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DatasetAnnotationLinkI(DatasetAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class DatasetImageLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class DatasetImageLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DatasetImageLinkI(DatasetImageLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class Detector(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, current: None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getVoltage(self, current: Incomplete | None = ...): ...
    def setVoltage(self, theVoltage, current: Incomplete | None = ...): ...
    def getGain(self, current: None = ...) -> RDoubleI: ...
    def setGain(self, theGain: RDoubleI, current: None = ...): ...
    def getOffsetValue(self, current: Incomplete | None = ...): ...
    def setOffsetValue(self, theOffsetValue, current: Incomplete | None = ...): ...
    def getZoom(self, current: None = ...) -> RDoubleI: ...
    def setZoom(self, theZoom: RDoubleI, current: None = ...): ...
    def getAmplificationGain(self, current: Incomplete | None = ...): ...
    def setAmplificationGain(
        self, theAmplificationGain, current: Incomplete | None = ...
    ): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addDetectorAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDetectorAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeDetectorAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllDetectorAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addDetectorAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findDetectorAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDetectorAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class DetectorPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def getModel(self, _ctx: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, _ctx: None = ...): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def getVoltage(self, _ctx: Incomplete | None = ...): ...
    def setVoltage(self, theVoltage, _ctx: Incomplete | None = ...): ...
    def getGain(self, _ctx: None = ...) -> RDoubleI: ...
    def setGain(self, theGain: RDoubleI, _ctx: None = ...): ...
    def getOffsetValue(self, _ctx: Incomplete | None = ...): ...
    def setOffsetValue(self, theOffsetValue, _ctx: Incomplete | None = ...): ...
    def getZoom(self, _ctx: None = ...) -> RDoubleI: ...
    def setZoom(self, theZoom: RDoubleI, _ctx: None = ...): ...
    def getAmplificationGain(self, _ctx: Incomplete | None = ...): ...
    def setAmplificationGain(
        self, theAmplificationGain, _ctx: Incomplete | None = ...
    ): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addDetectorAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllDetectorAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeDetectorAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllDetectorAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addDetectorAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findDetectorAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeDetectorAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DetectorI(Detector):
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    VOLTAGE: ClassVar[str] = ...
    GAIN: ClassVar[str] = ...
    OFFSETVALUE: ClassVar[str] = ...
    ZOOM: ClassVar[str] = ...
    AMPLIFICATIONGAIN: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadVoltage(self): ...
    def getVoltage(self, current: Incomplete | None = ...): ...
    def setVoltage(
        self, _voltage, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGain(self): ...
    def getGain(self, current: None = ...) -> RDoubleI: ...
    def setGain(self, _gain: RDoubleI, current: None = ..., wrap: bool = ...): ...
    def unloadOffsetValue(self): ...
    def getOffsetValue(self, current: Incomplete | None = ...): ...
    def setOffsetValue(
        self, _offsetValue, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadZoom(self): ...
    def getZoom(self, current: None = ...) -> RDoubleI: ...
    def setZoom(self, _zoom: RDoubleI, current: None = ..., wrap: bool = ...): ...
    def unloadAmplificationGain(self): ...
    def getAmplificationGain(self, current: Incomplete | None = ...): ...
    def setAmplificationGain(
        self, _amplificationGain, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addDetectorAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDetectorAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeDetectorAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllDetectorAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addDetectorAnnotationLinkToBoth(self, link, bothSides): ...
    def findDetectorAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDetectorAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class DetectorAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class DetectorAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DetectorAnnotationLinkI(DetectorAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class DetectorSettings(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getVoltage(self, current: Incomplete | None = ...): ...
    def setVoltage(self, theVoltage, current: Incomplete | None = ...): ...
    def getGain(self, current: None = ...) -> RDoubleI: ...
    def setGain(self, theGain: RDoubleI, current: None = ...): ...
    def getOffsetValue(self, current: Incomplete | None = ...): ...
    def setOffsetValue(self, theOffsetValue, current: Incomplete | None = ...): ...
    def getReadOutRate(self, current: Incomplete | None = ...): ...
    def setReadOutRate(self, theReadOutRate, current: Incomplete | None = ...): ...
    def getBinning(self, current: None = ...) -> BinningI: ...
    def setBinning(self, theBinning: BinningI, current: None = ...): ...
    def getIntegration(self, current: Incomplete | None = ...): ...
    def setIntegration(self, theIntegration, current: Incomplete | None = ...): ...
    def getZoom(self, current: None = ...) -> RDoubleI: ...
    def setZoom(self, theZoom: RDoubleI, current: None = ...): ...
    def getDetector(self, current: Incomplete | None = ...): ...
    def setDetector(self, theDetector, current: Incomplete | None = ...): ...

class DetectorSettingsPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getVoltage(self, _ctx: Incomplete | None = ...): ...
    def setVoltage(self, theVoltage, _ctx: Incomplete | None = ...): ...
    def getGain(self, _ctx: None = ...) -> RDoubleI: ...
    def setGain(self, theGain: RDoubleI, _ctx: None = ...): ...
    def getOffsetValue(self, _ctx: Incomplete | None = ...): ...
    def setOffsetValue(self, theOffsetValue, _ctx: Incomplete | None = ...): ...
    def getReadOutRate(self, _ctx: Incomplete | None = ...): ...
    def setReadOutRate(self, theReadOutRate, _ctx: Incomplete | None = ...): ...
    def getBinning(self, _ctx: None = ...) -> BinningI: ...
    def setBinning(self, theBinning: BinningI, _ctx: None = ...): ...
    def getIntegration(self, _ctx: Incomplete | None = ...): ...
    def setIntegration(self, theIntegration, _ctx: Incomplete | None = ...): ...
    def getZoom(self, _ctx: None = ...) -> RDoubleI: ...
    def setZoom(self, theZoom: RDoubleI, _ctx: None = ...): ...
    def getDetector(self, _ctx: Incomplete | None = ...): ...
    def setDetector(self, theDetector, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DetectorSettingsI(DetectorSettings):
    VOLTAGE: ClassVar[str] = ...
    GAIN: ClassVar[str] = ...
    OFFSETVALUE: ClassVar[str] = ...
    READOUTRATE: ClassVar[str] = ...
    BINNING: ClassVar[str] = ...
    INTEGRATION: ClassVar[str] = ...
    ZOOM: ClassVar[str] = ...
    DETECTOR: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadVoltage(self): ...
    def getVoltage(self, current: Incomplete | None = ...): ...
    def setVoltage(
        self, _voltage, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGain(self): ...
    def getGain(self, current: None = ...) -> RDoubleI: ...
    def setGain(self, _gain: RDoubleI, current: None = ..., wrap: bool = ...): ...
    def unloadOffsetValue(self): ...
    def getOffsetValue(self, current: Incomplete | None = ...): ...
    def setOffsetValue(
        self, _offsetValue, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadReadOutRate(self): ...
    def getReadOutRate(self, current: Incomplete | None = ...): ...
    def setReadOutRate(
        self, _readOutRate, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadBinning(self): ...
    def getBinning(self, current: None = ...) -> BinningI: ...
    def setBinning(self, _binning: BinningI, current: None = ..., wrap: bool = ...): ...
    def unloadIntegration(self): ...
    def getIntegration(self, current: Incomplete | None = ...): ...
    def setIntegration(
        self, _integration, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadZoom(self): ...
    def getZoom(self, current: None = ...) -> RDoubleI: ...
    def setZoom(self, _zoom: RDoubleI, current: None = ..., wrap: bool = ...): ...
    def unloadDetector(self): ...
    def getDetector(self, current: Incomplete | None = ...): ...
    def setDetector(
        self, _detector, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class DetectorType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class DetectorTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DetectorTypeI(DetectorType):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Dichroic(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, current: None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addDichroicAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDichroicAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeDichroicAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllDichroicAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addDichroicAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findDichroicAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDichroicAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class DichroicPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def getModel(self, _ctx: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, _ctx: None = ...): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addDichroicAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllDichroicAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeDichroicAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllDichroicAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addDichroicAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findDichroicAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeDichroicAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DichroicI(Dichroic):
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addDichroicAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDichroicAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeDichroicAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllDichroicAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addDichroicAnnotationLinkToBoth(self, link, bothSides): ...
    def findDichroicAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDichroicAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class DichroicAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class DichroicAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DichroicAnnotationLinkI(DichroicAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class DimensionOrder(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class DimensionOrderPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DimensionOrderI(DimensionOrder):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class NumericAnnotation(BasicAnnotation): ...

class NumericAnnotationPrx(BasicAnnotationPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DoubleAnnotation(NumericAnnotation):
    def getDoubleValue(self, current: Incomplete | None = ...): ...
    def setDoubleValue(self, theDoubleValue, current: Incomplete | None = ...): ...

class DoubleAnnotationPrx(NumericAnnotationPrx):
    def getDoubleValue(self, _ctx: Incomplete | None = ...): ...
    def setDoubleValue(self, theDoubleValue, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class DoubleAnnotationI(DoubleAnnotation):
    DOUBLEVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadDoubleValue(self): ...
    def getDoubleValue(self, current: Incomplete | None = ...): ...
    def setDoubleValue(
        self, _doubleValue, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Shape(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, theTheZ, current: Incomplete | None = ...): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, theTheT, current: Incomplete | None = ...): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, theTheC, current: Incomplete | None = ...): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, theRoi, current: Incomplete | None = ...): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, theLocked, current: Incomplete | None = ...): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, theTransform, current: Incomplete | None = ...): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, theFillColor, current: Incomplete | None = ...): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, theFillRule, current: Incomplete | None = ...): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, theStrokeColor, current: Incomplete | None = ...): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(
        self, theStrokeDashArray, current: Incomplete | None = ...
    ): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, theStrokeWidth, current: Incomplete | None = ...): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, theFontFamily, current: Incomplete | None = ...): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, theFontSize, current: Incomplete | None = ...): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, theFontStyle, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeShapeAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ShapePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getTheZ(self, _ctx: Incomplete | None = ...): ...
    def setTheZ(self, theTheZ, _ctx: Incomplete | None = ...): ...
    def getTheT(self, _ctx: Incomplete | None = ...): ...
    def setTheT(self, theTheT, _ctx: Incomplete | None = ...): ...
    def getTheC(self, _ctx: Incomplete | None = ...): ...
    def setTheC(self, theTheC, _ctx: Incomplete | None = ...): ...
    def getRoi(self, _ctx: Incomplete | None = ...): ...
    def setRoi(self, theRoi, _ctx: Incomplete | None = ...): ...
    def getLocked(self, _ctx: Incomplete | None = ...): ...
    def setLocked(self, theLocked, _ctx: Incomplete | None = ...): ...
    def getTransform(self, _ctx: Incomplete | None = ...): ...
    def setTransform(self, theTransform, _ctx: Incomplete | None = ...): ...
    def getFillColor(self, _ctx: Incomplete | None = ...): ...
    def setFillColor(self, theFillColor, _ctx: Incomplete | None = ...): ...
    def getFillRule(self, _ctx: Incomplete | None = ...): ...
    def setFillRule(self, theFillRule, _ctx: Incomplete | None = ...): ...
    def getStrokeColor(self, _ctx: Incomplete | None = ...): ...
    def setStrokeColor(self, theStrokeColor, _ctx: Incomplete | None = ...): ...
    def getStrokeDashArray(self, _ctx: Incomplete | None = ...): ...
    def setStrokeDashArray(self, theStrokeDashArray, _ctx: Incomplete | None = ...): ...
    def getStrokeWidth(self, _ctx: Incomplete | None = ...): ...
    def setStrokeWidth(self, theStrokeWidth, _ctx: Incomplete | None = ...): ...
    def getFontFamily(self, _ctx: Incomplete | None = ...): ...
    def setFontFamily(self, theFontFamily, _ctx: Incomplete | None = ...): ...
    def getFontSize(self, _ctx: Incomplete | None = ...): ...
    def setFontSize(self, theFontSize, _ctx: Incomplete | None = ...): ...
    def getFontStyle(self, _ctx: Incomplete | None = ...): ...
    def setFontStyle(self, theFontStyle, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addShapeAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findShapeAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class Ellipse(Shape):
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, theX, current: Incomplete | None = ...): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, theY, current: Incomplete | None = ...): ...
    def getRadiusX(self, current: Incomplete | None = ...): ...
    def setRadiusX(self, theRadiusX, current: Incomplete | None = ...): ...
    def getRadiusY(self, current: Incomplete | None = ...): ...
    def setRadiusY(self, theRadiusY, current: Incomplete | None = ...): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, current: None = ...): ...

class EllipsePrx(ShapePrx):
    def getX(self, _ctx: Incomplete | None = ...): ...
    def setX(self, theX, _ctx: Incomplete | None = ...): ...
    def getY(self, _ctx: Incomplete | None = ...): ...
    def setY(self, theY, _ctx: Incomplete | None = ...): ...
    def getRadiusX(self, _ctx: Incomplete | None = ...): ...
    def setRadiusX(self, theRadiusX, _ctx: Incomplete | None = ...): ...
    def getRadiusY(self, _ctx: Incomplete | None = ...): ...
    def setRadiusY(self, theRadiusY, _ctx: Incomplete | None = ...): ...
    def getTextValue(self, _ctx: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class EllipseI(Ellipse):
    X: ClassVar[str] = ...
    Y: ClassVar[str] = ...
    RADIUSX: ClassVar[str] = ...
    RADIUSY: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadX(self): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, _x, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY(self): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, _y, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRadiusX(self): ...
    def getRadiusX(self, current: Incomplete | None = ...): ...
    def setRadiusX(
        self, _radiusX, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadRadiusY(self): ...
    def getRadiusY(self, current: Incomplete | None = ...): ...
    def setRadiusY(
        self, _radiusY, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(
        self, _locked, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(
        self, _transform, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(
        self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(
        self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(
        self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(
        self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(
        self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(
        self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(
        self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(
        self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Event(IObject):
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, theStatus, current: Incomplete | None = ...): ...
    def getTime(self, current: Incomplete | None = ...): ...
    def setTime(self, theTime: RTimeI, current: None = ...): ...
    def getExperimenter(self, current: Incomplete | None = ...): ...
    def setExperimenter(self, theExperimenter, current: Incomplete | None = ...): ...
    def getExperimenterGroup(self, current: Incomplete | None = ...): ...
    def setExperimenterGroup(
        self, theExperimenterGroup, current: Incomplete | None = ...
    ): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getContainingEvent(self, current: Incomplete | None = ...): ...
    def setContainingEvent(
        self, theContainingEvent, current: Incomplete | None = ...
    ): ...
    def unloadLogs(self, current: Incomplete | None = ...): ...
    def sizeOfLogs(self, current: Incomplete | None = ...): ...
    def copyLogs(self, current: Incomplete | None = ...): ...
    def addEventLog(self, target, current: Incomplete | None = ...): ...
    def addAllEventLogSet(self, targets, current: Incomplete | None = ...): ...
    def removeEventLog(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllEventLogSet(self, targets, current: Incomplete | None = ...): ...
    def clearLogs(self, current: Incomplete | None = ...): ...
    def reloadLogs(self, toCopy, current: Incomplete | None = ...): ...
    def getSession(self, current: Incomplete | None = ...): ...
    def setSession(self, theSession, current: Incomplete | None = ...): ...

class EventPrx(IObjectPrx):
    def getStatus(self, _ctx: Incomplete | None = ...): ...
    def setStatus(self, theStatus, _ctx: Incomplete | None = ...): ...
    def getTime(self, _ctx: Incomplete | None = ...): ...
    def setTime(self, theTime: RTimeI, _ctx: None = ...): ...
    def getExperimenter(self, _ctx: Incomplete | None = ...): ...
    def setExperimenter(self, theExperimenter, _ctx: Incomplete | None = ...): ...
    def getExperimenterGroup(self, _ctx: Incomplete | None = ...): ...
    def setExperimenterGroup(
        self, theExperimenterGroup, _ctx: Incomplete | None = ...
    ): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def getContainingEvent(self, _ctx: Incomplete | None = ...): ...
    def setContainingEvent(self, theContainingEvent, _ctx: Incomplete | None = ...): ...
    def unloadLogs(self, _ctx: Incomplete | None = ...): ...
    def sizeOfLogs(self, _ctx: Incomplete | None = ...): ...
    def copyLogs(self, _ctx: Incomplete | None = ...): ...
    def addEventLog(self, target, _ctx: Incomplete | None = ...): ...
    def addAllEventLogSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeEventLog(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllEventLogSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearLogs(self, _ctx: Incomplete | None = ...): ...
    def reloadLogs(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getSession(self, _ctx: Incomplete | None = ...): ...
    def setSession(self, theSession, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class EventI(Event):
    STATUS: ClassVar[str] = ...
    TIME: ClassVar[str] = ...
    EXPERIMENTER: ClassVar[str] = ...
    EXPERIMENTERGROUP: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    CONTAININGEVENT: ClassVar[str] = ...
    LOGS: ClassVar[str] = ...
    SESSION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTime(self): ...
    def getTime(self, current: Incomplete | None = ...): ...
    def setTime(self, _time: RTimeI, current: None = ..., wrap: bool = ...): ...
    def unloadExperimenter(self): ...
    def getExperimenter(self, current: Incomplete | None = ...): ...
    def setExperimenter(
        self, _experimenter, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadExperimenterGroup(self): ...
    def getExperimenterGroup(self, current: Incomplete | None = ...): ...
    def setExperimenterGroup(
        self, _experimenterGroup, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadContainingEvent(self): ...
    def getContainingEvent(self, current: Incomplete | None = ...): ...
    def setContainingEvent(
        self, _containingEvent, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadLogs(self, current: Incomplete | None = ...): ...
    def isLogsLoaded(self): ...
    def sizeOfLogs(self, current: Incomplete | None = ...): ...
    def copyLogs(self, current: Incomplete | None = ...): ...
    def iterateLogs(self): ...
    def addEventLog(self, target, current: Incomplete | None = ...): ...
    def addAllEventLogSet(self, targets, current: Incomplete | None = ...): ...
    def removeEventLog(self, target, current: Incomplete | None = ...): ...
    def removeAllEventLogSet(self, targets, current: Incomplete | None = ...): ...
    def clearLogs(self, current: Incomplete | None = ...): ...
    def reloadLogs(self, toCopy, current: Incomplete | None = ...): ...
    def unloadSession(self): ...
    def getSession(self, current: Incomplete | None = ...): ...
    def setSession(
        self, _session, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class EventLog(IObject):
    def getEntityId(self, current: Incomplete | None = ...): ...
    def setEntityId(self, theEntityId, current: Incomplete | None = ...): ...
    def getEntityType(self, current: Incomplete | None = ...): ...
    def setEntityType(self, theEntityType, current: Incomplete | None = ...): ...
    def getAction(self, current: Incomplete | None = ...): ...
    def setAction(self, theAction, current: Incomplete | None = ...): ...
    def getEvent(self, current: Incomplete | None = ...): ...
    def setEvent(self, theEvent, current: Incomplete | None = ...): ...

class EventLogPrx(IObjectPrx):
    def getEntityId(self, _ctx: Incomplete | None = ...): ...
    def setEntityId(self, theEntityId, _ctx: Incomplete | None = ...): ...
    def getEntityType(self, _ctx: Incomplete | None = ...): ...
    def setEntityType(self, theEntityType, _ctx: Incomplete | None = ...): ...
    def getAction(self, _ctx: Incomplete | None = ...): ...
    def setAction(self, theAction, _ctx: Incomplete | None = ...): ...
    def getEvent(self, _ctx: Incomplete | None = ...): ...
    def setEvent(self, theEvent, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class EventLogI(EventLog):
    ENTITYID: ClassVar[str] = ...
    ENTITYTYPE: ClassVar[str] = ...
    ACTION: ClassVar[str] = ...
    EVENT: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadEntityId(self): ...
    def getEntityId(self, current: Incomplete | None = ...): ...
    def setEntityId(
        self, _entityId, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadEntityType(self): ...
    def getEntityType(self, current: Incomplete | None = ...): ...
    def setEntityType(
        self, _entityType, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAction(self): ...
    def getAction(self, current: Incomplete | None = ...): ...
    def setAction(
        self, _action, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadEvent(self): ...
    def getEvent(self, current: Incomplete | None = ...): ...
    def setEvent(self, _event, current: Incomplete | None = ..., wrap: bool = ...): ...

class EventType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class EventTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class EventTypeI(EventType):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Experiment(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def unloadMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def sizeOfMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def copyMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def addMicrobeamManipulation(self, target, current: Incomplete | None = ...): ...
    def addAllMicrobeamManipulationSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeMicrobeamManipulation(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllMicrobeamManipulationSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def reloadMicrobeamManipulation(self, toCopy, current: Incomplete | None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class ExperimentPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def unloadMicrobeamManipulation(self, _ctx: Incomplete | None = ...): ...
    def sizeOfMicrobeamManipulation(self, _ctx: Incomplete | None = ...): ...
    def copyMicrobeamManipulation(self, _ctx: Incomplete | None = ...): ...
    def addMicrobeamManipulation(self, target, _ctx: Incomplete | None = ...): ...
    def addAllMicrobeamManipulationSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeMicrobeamManipulation(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllMicrobeamManipulationSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearMicrobeamManipulation(self, _ctx: Incomplete | None = ...): ...
    def reloadMicrobeamManipulation(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ExperimentI(Experiment):
    TYPE: ClassVar[str] = ...
    MICROBEAMMANIPULATION: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def isMicrobeamManipulationLoaded(self): ...
    def sizeOfMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def copyMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def iterateMicrobeamManipulation(self): ...
    def addMicrobeamManipulation(self, target, current: Incomplete | None = ...): ...
    def addAllMicrobeamManipulationSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeMicrobeamManipulation(self, target, current: Incomplete | None = ...): ...
    def removeAllMicrobeamManipulationSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def reloadMicrobeamManipulation(self, toCopy, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class ExperimentType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class ExperimentTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ExperimentTypeI(ExperimentType):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Experimenter(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def unloadGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def sizeOfGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def copyGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def addGroupExperimenterMap(
        self, target: GroupExperimenterMapI, current: Optional[bool] = ...
    ): ...
    def addAllGroupExperimenterMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeGroupExperimenterMap(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllGroupExperimenterMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def reloadGroupExperimenterMap(self, toCopy, current: Incomplete | None = ...): ...
    def getGroupExperimenterMap(self, index, current: Incomplete | None = ...): ...
    def setGroupExperimenterMap(
        self, index, theElement, current: Incomplete | None = ...
    ): ...
    def getPrimaryGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def setPrimaryGroupExperimenterMap(
        self, theElement, current: Incomplete | None = ...
    ): ...
    def linkExperimenterGroup(self, addition, current: Incomplete | None = ...): ...
    def addGroupExperimenterMapToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findGroupExperimenterMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkExperimenterGroup(self, removal, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMapFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedExperimenterGroupList(self, current: Incomplete | None = ...): ...
    def getOmeName(self, current: Incomplete | None = ...): ...
    def setOmeName(self, theOmeName: RStringI, current: None = ...): ...
    def getFirstName(self, current: None = ...) -> RStringI: ...
    def setFirstName(self, theFirstName: RStringI, current: None = ...): ...
    def getMiddleName(self, current: None = ...) -> None: ...
    def setMiddleName(self, theMiddleName, current: Incomplete | None = ...): ...
    def getLastName(self, current: None = ...) -> RStringI: ...
    def setLastName(self, theLastName: RStringI, current: None = ...): ...
    def getInstitution(self, current: Incomplete | None = ...): ...
    def setInstitution(self, theInstitution, current: Incomplete | None = ...): ...
    def getLdap(self, current: Incomplete | None = ...): ...
    def setLdap(self, theLdap: RBoolI, current: None = ...): ...
    def getEmail(self, current: Incomplete | None = ...): ...
    def setEmail(self, theEmail, current: Incomplete | None = ...): ...
    def getConfigAsMap(self, current: Incomplete | None = ...): ...
    def getConfig(self, current: Incomplete | None = ...): ...
    def setConfig(self, theConfig, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addExperimenterAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllExperimenterAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeExperimenterAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllExperimenterAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addExperimenterAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findExperimenterAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeExperimenterAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ExperimenterPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def unloadGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def sizeOfGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def copyGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def addGroupExperimenterMap(
        self, target: GroupExperimenterMapI, _ctx: Optional[bool] = ...
    ): ...
    def addAllGroupExperimenterMapSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeGroupExperimenterMap(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllGroupExperimenterMapSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def reloadGroupExperimenterMap(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getGroupExperimenterMap(self, index, _ctx: Incomplete | None = ...): ...
    def setGroupExperimenterMap(
        self, index, theElement, _ctx: Incomplete | None = ...
    ): ...
    def getPrimaryGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def setPrimaryGroupExperimenterMap(
        self, theElement, _ctx: Incomplete | None = ...
    ): ...
    def linkExperimenterGroup(self, addition, _ctx: Incomplete | None = ...): ...
    def addGroupExperimenterMapToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findGroupExperimenterMap(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkExperimenterGroup(self, removal, _ctx: Incomplete | None = ...): ...
    def removeGroupExperimenterMapFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedExperimenterGroupList(self, _ctx: Incomplete | None = ...): ...
    def getOmeName(self, _ctx: Incomplete | None = ...): ...
    def setOmeName(self, theOmeName: RStringI, _ctx: None = ...): ...
    def getFirstName(self, _ctx: None = ...) -> RStringI: ...
    def setFirstName(self, theFirstName: RStringI, _ctx: None = ...): ...
    def getMiddleName(self, _ctx: None = ...) -> None: ...
    def setMiddleName(self, theMiddleName, _ctx: Incomplete | None = ...): ...
    def getLastName(self, _ctx: None = ...) -> RStringI: ...
    def setLastName(self, theLastName: RStringI, _ctx: None = ...): ...
    def getInstitution(self, _ctx: Incomplete | None = ...): ...
    def setInstitution(self, theInstitution, _ctx: Incomplete | None = ...): ...
    def getLdap(self, _ctx: Incomplete | None = ...): ...
    def setLdap(self, theLdap: RBoolI, _ctx: None = ...): ...
    def getEmail(self, _ctx: Incomplete | None = ...): ...
    def setEmail(self, theEmail, _ctx: Incomplete | None = ...): ...
    def getConfigAsMap(self, _ctx: Incomplete | None = ...): ...
    def getConfig(self, _ctx: Incomplete | None = ...): ...
    def setConfig(self, theConfig, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addExperimenterAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllExperimenterAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeExperimenterAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllExperimenterAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addExperimenterAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findExperimenterAnnotationLink(
        self, removal, _ctx: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeExperimenterAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ExperimenterI(Experimenter):
    GROUPEXPERIMENTERMAP: ClassVar[str] = ...
    OMENAME: ClassVar[str] = ...
    FIRSTNAME: ClassVar[str] = ...
    MIDDLENAME: ClassVar[str] = ...
    LASTNAME: ClassVar[str] = ...
    INSTITUTION: ClassVar[str] = ...
    LDAP: ClassVar[str] = ...
    EMAIL: ClassVar[str] = ...
    CONFIG: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def isGroupExperimenterMapLoaded(self): ...
    def sizeOfGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def copyGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def iterateGroupExperimenterMap(self): ...
    def addGroupExperimenterMap(
        self, target: GroupExperimenterMapI, current: Optional[bool] = ...
    ): ...
    def addAllGroupExperimenterMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeGroupExperimenterMap(self, target, current: Incomplete | None = ...): ...
    def removeAllGroupExperimenterMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def reloadGroupExperimenterMap(self, toCopy, current: Incomplete | None = ...): ...
    def getGroupExperimenterMap(self, index, current: Incomplete | None = ...): ...
    def setGroupExperimenterMap(
        self, index, element, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getPrimaryGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def setPrimaryGroupExperimenterMap(
        self, element, current: Incomplete | None = ...
    ): ...
    def linkExperimenterGroup(self, addition, current: Incomplete | None = ...): ...
    def addGroupExperimenterMapToBoth(self, link, bothSides): ...
    def findGroupExperimenterMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkExperimenterGroup(self, removal, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMapFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedExperimenterGroupList(self, current: Incomplete | None = ...): ...
    def unloadOmeName(self): ...
    def getOmeName(self, current: Incomplete | None = ...): ...
    def setOmeName(self, _omeName: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadFirstName(self): ...
    def getFirstName(self, current: None = ...) -> RStringI: ...
    def setFirstName(
        self, _firstName: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadMiddleName(self): ...
    def getMiddleName(self, current: None = ...) -> None: ...
    def setMiddleName(
        self, _middleName, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadLastName(self): ...
    def getLastName(self, current: None = ...) -> RStringI: ...
    def setLastName(
        self, _lastName: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadInstitution(self): ...
    def getInstitution(self, current: Incomplete | None = ...): ...
    def setInstitution(
        self, _institution, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadLdap(self): ...
    def getLdap(self, current: Incomplete | None = ...): ...
    def setLdap(self, _ldap: RBoolI, current: None = ..., wrap: bool = ...): ...
    def unloadEmail(self): ...
    def getEmail(self, current: Incomplete | None = ...): ...
    def setEmail(self, _email, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadConfig(self): ...
    def getConfig(self, current: Incomplete | None = ...): ...
    def setConfig(
        self, _config, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getConfigAsMap(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addExperimenterAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllExperimenterAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeExperimenterAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllExperimenterAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addExperimenterAnnotationLinkToBoth(self, link, bothSides): ...
    def findExperimenterAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeExperimenterAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ExperimenterAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ExperimenterAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ExperimenterAnnotationLinkI(ExperimenterAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ExperimenterGroup(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getLdap(self, current: Incomplete | None = ...): ...
    def setLdap(self, theLdap: RBoolI, current: None = ...): ...
    def unloadGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def sizeOfGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def copyGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def addGroupExperimenterMap(
        self, target: GroupExperimenterMapI, current: Optional[bool] = ...
    ): ...
    def addAllGroupExperimenterMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeGroupExperimenterMap(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllGroupExperimenterMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def reloadGroupExperimenterMap(self, toCopy, current: Incomplete | None = ...): ...
    def linkExperimenter(self, addition, current: Incomplete | None = ...): ...
    def addGroupExperimenterMapToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findGroupExperimenterMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkExperimenter(self, removal, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMapFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedExperimenterList(self, current: Incomplete | None = ...): ...
    def getConfigAsMap(self, current: Incomplete | None = ...): ...
    def getConfig(self, current: Incomplete | None = ...): ...
    def setConfig(self, theConfig, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addExperimenterGroupAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllExperimenterGroupAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeExperimenterGroupAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllExperimenterGroupAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addExperimenterGroupAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findExperimenterGroupAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeExperimenterGroupAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class ExperimenterGroupPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getLdap(self, _ctx: Incomplete | None = ...): ...
    def setLdap(self, theLdap: RBoolI, _ctx: None = ...): ...
    def unloadGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def sizeOfGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def copyGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def addGroupExperimenterMap(
        self, target: GroupExperimenterMapI, _ctx: Optional[bool] = ...
    ): ...
    def addAllGroupExperimenterMapSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeGroupExperimenterMap(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllGroupExperimenterMapSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def reloadGroupExperimenterMap(self, toCopy, _ctx: Incomplete | None = ...): ...
    def linkExperimenter(self, addition, _ctx: Incomplete | None = ...): ...
    def addGroupExperimenterMapToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findGroupExperimenterMap(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkExperimenter(self, removal, _ctx: Incomplete | None = ...): ...
    def removeGroupExperimenterMapFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedExperimenterList(self, _ctx: Incomplete | None = ...): ...
    def getConfigAsMap(self, _ctx: Incomplete | None = ...): ...
    def getConfig(self, _ctx: Incomplete | None = ...): ...
    def setConfig(self, theConfig, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addExperimenterGroupAnnotationLink(
        self, target, _ctx: Incomplete | None = ...
    ): ...
    def addAllExperimenterGroupAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeExperimenterGroupAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllExperimenterGroupAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addExperimenterGroupAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findExperimenterGroupAnnotationLink(
        self, removal, _ctx: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeExperimenterGroupAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ExperimenterGroupI(ExperimenterGroup):
    NAME: ClassVar[str] = ...
    LDAP: ClassVar[str] = ...
    GROUPEXPERIMENTERMAP: ClassVar[str] = ...
    CONFIG: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadLdap(self): ...
    def getLdap(self, current: Incomplete | None = ...): ...
    def setLdap(self, _ldap: RBoolI, current: None = ..., wrap: bool = ...): ...
    def unloadGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def isGroupExperimenterMapLoaded(self): ...
    def sizeOfGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def copyGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def iterateGroupExperimenterMap(self): ...
    def addGroupExperimenterMap(
        self, target: GroupExperimenterMapI, current: Optional[bool] = ...
    ): ...
    def addAllGroupExperimenterMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeGroupExperimenterMap(self, target, current: Incomplete | None = ...): ...
    def removeAllGroupExperimenterMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def reloadGroupExperimenterMap(self, toCopy, current: Incomplete | None = ...): ...
    def linkExperimenter(self, addition, current: Incomplete | None = ...): ...
    def addGroupExperimenterMapToBoth(self, link, bothSides): ...
    def findGroupExperimenterMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkExperimenter(self, removal, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMapFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedExperimenterList(self, current: Incomplete | None = ...): ...
    def unloadConfig(self): ...
    def getConfig(self, current: Incomplete | None = ...): ...
    def setConfig(
        self, _config, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getConfigAsMap(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addExperimenterGroupAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllExperimenterGroupAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeExperimenterGroupAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllExperimenterGroupAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addExperimenterGroupAnnotationLinkToBoth(self, link, bothSides): ...
    def findExperimenterGroupAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeExperimenterGroupAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class ExperimenterGroupAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ExperimenterGroupAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ExperimenterGroupAnnotationLinkI(ExperimenterGroupAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ExternalInfo(IObject):
    def getEntityId(self, current: Incomplete | None = ...): ...
    def setEntityId(self, theEntityId, current: Incomplete | None = ...): ...
    def getEntityType(self, current: Incomplete | None = ...): ...
    def setEntityType(self, theEntityType, current: Incomplete | None = ...): ...
    def getLsid(self, current: Incomplete | None = ...): ...
    def setLsid(self, theLsid, current: Incomplete | None = ...): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, theUuid, current: Incomplete | None = ...): ...

class ExternalInfoPrx(IObjectPrx):
    def getEntityId(self, _ctx: Incomplete | None = ...): ...
    def setEntityId(self, theEntityId, _ctx: Incomplete | None = ...): ...
    def getEntityType(self, _ctx: Incomplete | None = ...): ...
    def setEntityType(self, theEntityType, _ctx: Incomplete | None = ...): ...
    def getLsid(self, _ctx: Incomplete | None = ...): ...
    def setLsid(self, theLsid, _ctx: Incomplete | None = ...): ...
    def getUuid(self, _ctx: Incomplete | None = ...): ...
    def setUuid(self, theUuid, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ExternalInfoI(ExternalInfo):
    ENTITYID: ClassVar[str] = ...
    ENTITYTYPE: ClassVar[str] = ...
    LSID: ClassVar[str] = ...
    UUID: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadEntityId(self): ...
    def getEntityId(self, current: Incomplete | None = ...): ...
    def setEntityId(
        self, _entityId, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadEntityType(self): ...
    def getEntityType(self, current: Incomplete | None = ...): ...
    def setEntityType(
        self, _entityType, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadLsid(self): ...
    def getLsid(self, current: Incomplete | None = ...): ...
    def setLsid(self, _lsid, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUuid(self): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, _uuid, current: Incomplete | None = ..., wrap: bool = ...): ...

class Family(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class FamilyPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FamilyI(Family):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Filament(LightSource):
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...

class FilamentPrx(LightSourcePrx):
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilamentI(Filament):
    TYPE: ClassVar[str] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    POWER: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadPower(self): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, _power, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightSourceAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class FilamentType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class FilamentTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilamentTypeI(FilamentType):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class TypeAnnotation(Annotation): ...

class TypeAnnotationPrx(AnnotationPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FileAnnotation(TypeAnnotation):
    def getFile(self, current: None = ...) -> OriginalFileI: ...
    def setFile(self, theFile: OriginalFileI, current: None = ...): ...

class FileAnnotationPrx(TypeAnnotationPrx):
    def getFile(self, _ctx: None = ...) -> OriginalFileI: ...
    def setFile(self, theFile: OriginalFileI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FileAnnotationI(FileAnnotation):
    FILE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadFile(self): ...
    def getFile(self, current: None = ...) -> OriginalFileI: ...
    def setFile(self, _file: OriginalFileI, current: None = ..., wrap: bool = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Fileset(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def unloadUsedFiles(self, current: Incomplete | None = ...): ...
    def sizeOfUsedFiles(self, current: Incomplete | None = ...): ...
    def copyUsedFiles(self, current: Incomplete | None = ...): ...
    def addFilesetEntry(self, target: FilesetEntryI, current: None = ...): ...
    def addAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetEntry(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def clearUsedFiles(self, current: Incomplete | None = ...): ...
    def reloadUsedFiles(self, toCopy, current: Incomplete | None = ...): ...
    def getFilesetEntry(self, index, current: Incomplete | None = ...): ...
    def setFilesetEntry(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryFilesetEntry(self, current: Incomplete | None = ...): ...
    def setPrimaryFilesetEntry(self, theElement, current: Incomplete | None = ...): ...
    def unloadImages(self, current: Incomplete | None = ...): ...
    def sizeOfImages(self, current: Incomplete | None = ...): ...
    def copyImages(self, current: Incomplete | None = ...): ...
    def addImage(self, target, current: Incomplete | None = ...): ...
    def addAllImageSet(self, targets, current: Incomplete | None = ...): ...
    def removeImage(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllImageSet(self, targets, current: Incomplete | None = ...): ...
    def clearImages(self, current: Incomplete | None = ...): ...
    def reloadImages(self, toCopy, current: Incomplete | None = ...): ...
    def unloadJobLinks(self, current: Incomplete | None = ...): ...
    def sizeOfJobLinks(self, current: Incomplete | None = ...): ...
    def copyJobLinks(self, current: Incomplete | None = ...): ...
    def addFilesetJobLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetJobLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetJobLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilesetJobLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearJobLinks(self, current: Incomplete | None = ...): ...
    def reloadJobLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFilesetJobLink(self, index, current: Incomplete | None = ...): ...
    def setFilesetJobLink(
        self, index, theElement, current: Incomplete | None = ...
    ): ...
    def getPrimaryFilesetJobLink(self, current: Incomplete | None = ...): ...
    def setPrimaryFilesetJobLink(
        self, theElement, current: Incomplete | None = ...
    ): ...
    def getJobLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkJob(
        self, addition: Union[MetadataImportJobI, UploadJobI], current: None = ...
    ) -> FilesetJobLinkI: ...
    def addFilesetJobLinkToBoth(
        self, link: FilesetJobLinkI, bothSides: bool, current: Incomplete | None = ...
    ): ...
    def findFilesetJobLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkJob(self, removal, current: Incomplete | None = ...): ...
    def removeFilesetJobLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedJobList(self, current: Incomplete | None = ...): ...
    def getTemplatePrefix(self, current: Incomplete | None = ...): ...
    def setTemplatePrefix(
        self, theTemplatePrefix, current: Incomplete | None = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addFilesetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilesetAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllFilesetAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addFilesetAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFilesetAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFilesetAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class FilesetPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def unloadUsedFiles(self, _ctx: Incomplete | None = ...): ...
    def sizeOfUsedFiles(self, _ctx: Incomplete | None = ...): ...
    def copyUsedFiles(self, _ctx: Incomplete | None = ...): ...
    def addFilesetEntry(self, target: FilesetEntryI, _ctx: None = ...): ...
    def addAllFilesetEntrySet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFilesetEntry(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFilesetEntrySet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearUsedFiles(self, _ctx: Incomplete | None = ...): ...
    def reloadUsedFiles(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getFilesetEntry(self, index, _ctx: Incomplete | None = ...): ...
    def setFilesetEntry(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def getPrimaryFilesetEntry(self, _ctx: Incomplete | None = ...): ...
    def setPrimaryFilesetEntry(self, theElement, _ctx: Incomplete | None = ...): ...
    def unloadImages(self, _ctx: Incomplete | None = ...): ...
    def sizeOfImages(self, _ctx: Incomplete | None = ...): ...
    def copyImages(self, _ctx: Incomplete | None = ...): ...
    def addImage(self, target, _ctx: Incomplete | None = ...): ...
    def addAllImageSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeImage(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllImageSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearImages(self, _ctx: Incomplete | None = ...): ...
    def reloadImages(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadJobLinks(self, _ctx: Incomplete | None = ...): ...
    def sizeOfJobLinks(self, _ctx: Incomplete | None = ...): ...
    def copyJobLinks(self, _ctx: Incomplete | None = ...): ...
    def addFilesetJobLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFilesetJobLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFilesetJobLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFilesetJobLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearJobLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadJobLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getFilesetJobLink(self, index, _ctx: Incomplete | None = ...): ...
    def setFilesetJobLink(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def getPrimaryFilesetJobLink(self, _ctx: Incomplete | None = ...): ...
    def setPrimaryFilesetJobLink(self, theElement, _ctx: Incomplete | None = ...): ...
    def getJobLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkJob(
        self, addition: Union[MetadataImportJobI, UploadJobI], _ctx: None = ...
    ) -> FilesetJobLinkI: ...
    def addFilesetJobLinkToBoth(
        self, link: FilesetJobLinkI, bothSides: bool, _ctx: Incomplete | None = ...
    ): ...
    def findFilesetJobLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkJob(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFilesetJobLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedJobList(self, _ctx: Incomplete | None = ...): ...
    def getTemplatePrefix(self, _ctx: Incomplete | None = ...): ...
    def setTemplatePrefix(self, theTemplatePrefix, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addFilesetAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFilesetAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeFilesetAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFilesetAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addFilesetAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFilesetAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFilesetAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilesetI(Fileset):
    USEDFILES: ClassVar[str] = ...
    IMAGES: ClassVar[str] = ...
    JOBLINKS: ClassVar[str] = ...
    TEMPLATEPREFIX: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadUsedFiles(self, current: Incomplete | None = ...): ...
    def isUsedFilesLoaded(self): ...
    def sizeOfUsedFiles(self, current: Incomplete | None = ...): ...
    def copyUsedFiles(self, current: Incomplete | None = ...): ...
    def iterateUsedFiles(self): ...
    def addFilesetEntry(self, target: FilesetEntryI, current: None = ...): ...
    def addAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetEntry(self, target, current: Incomplete | None = ...): ...
    def removeAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def clearUsedFiles(self, current: Incomplete | None = ...): ...
    def reloadUsedFiles(self, toCopy, current: Incomplete | None = ...): ...
    def getFilesetEntry(self, index, current: Incomplete | None = ...): ...
    def setFilesetEntry(
        self, index, element, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getPrimaryFilesetEntry(self, current: Incomplete | None = ...): ...
    def setPrimaryFilesetEntry(self, element, current: Incomplete | None = ...): ...
    def unloadImages(self, current: Incomplete | None = ...): ...
    def isImagesLoaded(self): ...
    def sizeOfImages(self, current: Incomplete | None = ...): ...
    def copyImages(self, current: Incomplete | None = ...): ...
    def iterateImages(self): ...
    def addImage(self, target, current: Incomplete | None = ...): ...
    def addAllImageSet(self, targets, current: Incomplete | None = ...): ...
    def removeImage(self, target, current: Incomplete | None = ...): ...
    def removeAllImageSet(self, targets, current: Incomplete | None = ...): ...
    def clearImages(self, current: Incomplete | None = ...): ...
    def reloadImages(self, toCopy, current: Incomplete | None = ...): ...
    def unloadJobLinks(self, current: Incomplete | None = ...): ...
    def isJobLinksLoaded(self): ...
    def sizeOfJobLinks(self, current: Incomplete | None = ...): ...
    def copyJobLinks(self, current: Incomplete | None = ...): ...
    def iterateJobLinks(self): ...
    def addFilesetJobLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetJobLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetJobLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFilesetJobLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearJobLinks(self, current: Incomplete | None = ...): ...
    def reloadJobLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFilesetJobLink(self, index, current: Incomplete | None = ...): ...
    def setFilesetJobLink(
        self, index, element, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getPrimaryFilesetJobLink(self, current: Incomplete | None = ...): ...
    def setPrimaryFilesetJobLink(self, element, current: Incomplete | None = ...): ...
    def getJobLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkJob(
        self, addition: Union[MetadataImportJobI, UploadJobI], current: None = ...
    ) -> FilesetJobLinkI: ...
    def addFilesetJobLinkToBoth(self, link: FilesetJobLinkI, bothSides: bool): ...
    def findFilesetJobLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkJob(self, removal, current: Incomplete | None = ...): ...
    def removeFilesetJobLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedJobList(self, current: Incomplete | None = ...): ...
    def unloadTemplatePrefix(self): ...
    def getTemplatePrefix(self, current: Incomplete | None = ...): ...
    def setTemplatePrefix(
        self, _templatePrefix, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addFilesetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilesetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFilesetAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addFilesetAnnotationLinkToBoth(self, link, bothSides): ...
    def findFilesetAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFilesetAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class FilesetAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FilesetAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilesetAnnotationLinkI(FilesetAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FilesetEntry(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getFileset(self, current: Incomplete | None = ...): ...
    def setFileset(self, theFileset: FilesetI, current: None = ...): ...
    def getOriginalFile(self, current: Incomplete | None = ...): ...
    def setOriginalFile(self, theOriginalFile: OriginalFileI, current: None = ...): ...
    def getClientPath(self, current: Incomplete | None = ...): ...
    def setClientPath(self, theClientPath: RStringI, current: None = ...): ...

class FilesetEntryPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getFileset(self, _ctx: Incomplete | None = ...): ...
    def setFileset(self, theFileset: FilesetI, _ctx: None = ...): ...
    def getOriginalFile(self, _ctx: Incomplete | None = ...): ...
    def setOriginalFile(self, theOriginalFile: OriginalFileI, _ctx: None = ...): ...
    def getClientPath(self, _ctx: Incomplete | None = ...): ...
    def setClientPath(self, theClientPath: RStringI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilesetEntryI(FilesetEntry):
    FILESET: ClassVar[str] = ...
    ORIGINALFILE: ClassVar[str] = ...
    CLIENTPATH: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadFileset(self): ...
    def getFileset(self, current: Incomplete | None = ...): ...
    def setFileset(self, _fileset: FilesetI, current: None = ..., wrap: bool = ...): ...
    def unloadOriginalFile(self): ...
    def getOriginalFile(self, current: Incomplete | None = ...): ...
    def setOriginalFile(
        self, _originalFile: OriginalFileI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadClientPath(self): ...
    def getClientPath(self, current: Incomplete | None = ...): ...
    def setClientPath(
        self, _clientPath: RStringI, current: None = ..., wrap: bool = ...
    ): ...

class FilesetJobLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FilesetJobLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilesetJobLinkI(FilesetJobLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class Filter(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, current: None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getFilterWheel(self, current: Incomplete | None = ...): ...
    def setFilterWheel(self, theFilterWheel, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getTransmittanceRange(self, current: Incomplete | None = ...): ...
    def setTransmittanceRange(
        self, theTransmittanceRange, current: Incomplete | None = ...
    ): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllFilterSetExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilterSetExcitationFilterLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllFilterSetExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(
        self, current: Incomplete | None = ...
    ): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFilterSetExcitationFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllFilterSetEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilterSetEmissionFilterLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllFilterSetEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFilterSetEmissionFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addFilterAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilterAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllFilterAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addFilterAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFilterAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFilterAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class FilterPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def getModel(self, _ctx: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, _ctx: None = ...): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def getFilterWheel(self, _ctx: Incomplete | None = ...): ...
    def setFilterWheel(self, theFilterWheel, _ctx: Incomplete | None = ...): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def getTransmittanceRange(self, _ctx: Incomplete | None = ...): ...
    def setTransmittanceRange(
        self, theTransmittanceRange, _ctx: Incomplete | None = ...
    ): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def unloadExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def sizeOfExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLink(
        self, target, _ctx: Incomplete | None = ...
    ): ...
    def addAllFilterSetExcitationFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeFilterSetExcitationFilterLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllFilterSetExcitationFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkExcitationFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFilterSetExcitationFilterLink(
        self, removal, _ctx: Incomplete | None = ...
    ): ...
    def unlinkExcitationFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedExcitationFilterList(self, _ctx: Incomplete | None = ...): ...
    def unloadEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def sizeOfEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFilterSetEmissionFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeFilterSetEmissionFilterLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllFilterSetEmissionFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFilterSetEmissionFilterLink(
        self, removal, _ctx: Incomplete | None = ...
    ): ...
    def unlinkEmissionFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedEmissionFilterList(self, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addFilterAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFilterAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFilterAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFilterAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addFilterAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFilterAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFilterAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilterI(Filter):
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    FILTERWHEEL: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    TRANSMITTANCERANGE: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    EXCITATIONFILTERLINK: ClassVar[str] = ...
    EMISSIONFILTERLINK: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFilterWheel(self): ...
    def getFilterWheel(self, current: Incomplete | None = ...): ...
    def setFilterWheel(
        self, _filterWheel, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransmittanceRange(self): ...
    def getTransmittanceRange(self, current: Incomplete | None = ...): ...
    def setTransmittanceRange(
        self, _transmittanceRange, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def isExcitationFilterLinkLoaded(self): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def iterateExcitationFilterLink(self): ...
    def addFilterSetExcitationFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllFilterSetExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilterSetExcitationFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllFilterSetExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(
        self, current: Incomplete | None = ...
    ): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLinkToBoth(self, link, bothSides): ...
    def findFilterSetExcitationFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def isEmissionFilterLinkLoaded(self): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def iterateEmissionFilterLink(self): ...
    def addFilterSetEmissionFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllFilterSetEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilterSetEmissionFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllFilterSetEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLinkToBoth(self, link, bothSides): ...
    def findFilterSetEmissionFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addFilterAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilterAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFilterAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addFilterAnnotationLinkToBoth(self, link, bothSides): ...
    def findFilterAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFilterAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class FilterAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FilterAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilterAnnotationLinkI(FilterAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FilterSet(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, current: None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllFilterSetExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilterSetExcitationFilterLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllFilterSetExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(
        self, current: Incomplete | None = ...
    ): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFilterSetExcitationFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def getDichroic(self, current: None = ...) -> DichroicI: ...
    def setDichroic(self, theDichroic: DichroicI, current: None = ...): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllFilterSetEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilterSetEmissionFilterLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllFilterSetEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFilterSetEmissionFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...

class FilterSetPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def getModel(self, _ctx: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, _ctx: None = ...): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def unloadExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def sizeOfExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLink(
        self, target, _ctx: Incomplete | None = ...
    ): ...
    def addAllFilterSetExcitationFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeFilterSetExcitationFilterLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllFilterSetExcitationFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkExcitationFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFilterSetExcitationFilterLink(
        self, removal, _ctx: Incomplete | None = ...
    ): ...
    def unlinkExcitationFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedExcitationFilterList(self, _ctx: Incomplete | None = ...): ...
    def getDichroic(self, _ctx: None = ...) -> DichroicI: ...
    def setDichroic(self, theDichroic: DichroicI, _ctx: None = ...): ...
    def unloadEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def sizeOfEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFilterSetEmissionFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeFilterSetEmissionFilterLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllFilterSetEmissionFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFilterSetEmissionFilterLink(
        self, removal, _ctx: Incomplete | None = ...
    ): ...
    def unlinkEmissionFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedEmissionFilterList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilterSetI(FilterSet):
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    EXCITATIONFILTERLINK: ClassVar[str] = ...
    DICHROIC: ClassVar[str] = ...
    EMISSIONFILTERLINK: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def isExcitationFilterLinkLoaded(self): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def iterateExcitationFilterLink(self): ...
    def addFilterSetExcitationFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllFilterSetExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilterSetExcitationFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllFilterSetExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(
        self, current: Incomplete | None = ...
    ): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLinkToBoth(self, link, bothSides): ...
    def findFilterSetExcitationFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def unloadDichroic(self): ...
    def getDichroic(self, current: None = ...) -> DichroicI: ...
    def setDichroic(
        self, _dichroic: DichroicI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def isEmissionFilterLinkLoaded(self): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def iterateEmissionFilterLink(self): ...
    def addFilterSetEmissionFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllFilterSetEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFilterSetEmissionFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllFilterSetEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLinkToBoth(self, link, bothSides): ...
    def findFilterSetEmissionFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...

class FilterSetEmissionFilterLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FilterSetEmissionFilterLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilterSetEmissionFilterLinkI(FilterSetEmissionFilterLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FilterSetExcitationFilterLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FilterSetExcitationFilterLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilterSetExcitationFilterLinkI(FilterSetExcitationFilterLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FilterType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class FilterTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FilterTypeI(FilterType):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Folder(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def unloadChildFolders(self, current: Incomplete | None = ...): ...
    def sizeOfChildFolders(self, current: Incomplete | None = ...): ...
    def copyChildFolders(self, current: Incomplete | None = ...): ...
    def addChildFolders(self, target, current: Incomplete | None = ...): ...
    def addAllChildFoldersSet(self, targets, current: Incomplete | None = ...): ...
    def removeChildFolders(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllChildFoldersSet(self, targets, current: Incomplete | None = ...): ...
    def clearChildFolders(self, current: Incomplete | None = ...): ...
    def reloadChildFolders(self, toCopy, current: Incomplete | None = ...): ...
    def getParentFolder(self, current: Incomplete | None = ...): ...
    def setParentFolder(self, theParentFolder, current: Incomplete | None = ...): ...
    def unloadImageLinks(self, current: Incomplete | None = ...): ...
    def sizeOfImageLinks(self, current: None = ...) -> int: ...
    def copyImageLinks(self, current: Incomplete | None = ...): ...
    def addFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderImageLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFolderImageLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearImageLinks(self, current: Incomplete | None = ...): ...
    def reloadImageLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getImageLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkImage(self, addition: ImageI, current: None = ...) -> DatasetImageLinkI: ...
    def addFolderImageLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFolderImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkImage(self, removal: ImageI, current: None = ...): ...
    def removeFolderImageLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedImageList(self, current: Incomplete | None = ...): ...
    def unloadRoiLinks(self, current: Incomplete | None = ...): ...
    def sizeOfRoiLinks(self, current: Incomplete | None = ...): ...
    def copyRoiLinks(self, current: Incomplete | None = ...): ...
    def addFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderRoiLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearRoiLinks(self, current: Incomplete | None = ...): ...
    def reloadRoiLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getRoiLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkRoi(self, addition, current: Incomplete | None = ...): ...
    def addFolderRoiLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFolderRoiLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkRoi(self, removal, current: Incomplete | None = ...): ...
    def removeFolderRoiLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedRoiList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addFolderAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFolderAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllFolderAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addFolderAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFolderAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFolderAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class FolderPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def unloadChildFolders(self, _ctx: Incomplete | None = ...): ...
    def sizeOfChildFolders(self, _ctx: Incomplete | None = ...): ...
    def copyChildFolders(self, _ctx: Incomplete | None = ...): ...
    def addChildFolders(self, target, _ctx: Incomplete | None = ...): ...
    def addAllChildFoldersSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeChildFolders(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllChildFoldersSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearChildFolders(self, _ctx: Incomplete | None = ...): ...
    def reloadChildFolders(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getParentFolder(self, _ctx: Incomplete | None = ...): ...
    def setParentFolder(self, theParentFolder, _ctx: Incomplete | None = ...): ...
    def unloadImageLinks(self, _ctx: Incomplete | None = ...): ...
    def sizeOfImageLinks(self, _ctx: None = ...) -> int: ...
    def copyImageLinks(self, _ctx: Incomplete | None = ...): ...
    def addFolderImageLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFolderImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFolderImageLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFolderImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearImageLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadImageLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getImageLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkImage(self, addition: ImageI, _ctx: None = ...) -> DatasetImageLinkI: ...
    def addFolderImageLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFolderImageLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkImage(self, removal: ImageI, _ctx: None = ...): ...
    def removeFolderImageLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedImageList(self, _ctx: Incomplete | None = ...): ...
    def unloadRoiLinks(self, _ctx: Incomplete | None = ...): ...
    def sizeOfRoiLinks(self, _ctx: Incomplete | None = ...): ...
    def copyRoiLinks(self, _ctx: Incomplete | None = ...): ...
    def addFolderRoiLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFolderRoiLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFolderRoiLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFolderRoiLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearRoiLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadRoiLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getRoiLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkRoi(self, addition, _ctx: Incomplete | None = ...): ...
    def addFolderRoiLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFolderRoiLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkRoi(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFolderRoiLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedRoiList(self, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addFolderAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFolderAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFolderAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFolderAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addFolderAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFolderAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFolderAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FolderI(Folder):
    CHILDFOLDERS: ClassVar[str] = ...
    PARENTFOLDER: ClassVar[str] = ...
    IMAGELINKS: ClassVar[str] = ...
    ROILINKS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadChildFolders(self, current: Incomplete | None = ...): ...
    def isChildFoldersLoaded(self): ...
    def sizeOfChildFolders(self, current: Incomplete | None = ...): ...
    def copyChildFolders(self, current: Incomplete | None = ...): ...
    def iterateChildFolders(self): ...
    def addChildFolders(self, target, current: Incomplete | None = ...): ...
    def addAllChildFoldersSet(self, targets, current: Incomplete | None = ...): ...
    def removeChildFolders(self, target, current: Incomplete | None = ...): ...
    def removeAllChildFoldersSet(self, targets, current: Incomplete | None = ...): ...
    def clearChildFolders(self, current: Incomplete | None = ...): ...
    def reloadChildFolders(self, toCopy, current: Incomplete | None = ...): ...
    def unloadParentFolder(self): ...
    def getParentFolder(self, current: Incomplete | None = ...): ...
    def setParentFolder(
        self, _parentFolder, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadImageLinks(self, current: Incomplete | None = ...): ...
    def isImageLinksLoaded(self): ...
    def sizeOfImageLinks(self, current: None = ...) -> int: ...
    def copyImageLinks(self, current: Incomplete | None = ...): ...
    def iterateImageLinks(self): ...
    def addFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFolderImageLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearImageLinks(self, current: Incomplete | None = ...): ...
    def reloadImageLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getImageLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkImage(self, addition: ImageI, current: None = ...) -> DatasetImageLinkI: ...
    def addFolderImageLinkToBoth(self, link, bothSides): ...
    def findFolderImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkImage(self, removal: ImageI, current: None = ...): ...
    def removeFolderImageLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedImageList(self, current: Incomplete | None = ...): ...
    def unloadRoiLinks(self, current: Incomplete | None = ...): ...
    def isRoiLinksLoaded(self): ...
    def sizeOfRoiLinks(self, current: Incomplete | None = ...): ...
    def copyRoiLinks(self, current: Incomplete | None = ...): ...
    def iterateRoiLinks(self): ...
    def addFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearRoiLinks(self, current: Incomplete | None = ...): ...
    def reloadRoiLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getRoiLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkRoi(self, addition, current: Incomplete | None = ...): ...
    def addFolderRoiLinkToBoth(self, link, bothSides): ...
    def findFolderRoiLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkRoi(self, removal, current: Incomplete | None = ...): ...
    def removeFolderRoiLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedRoiList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addFolderAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeFolderAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFolderAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addFolderAnnotationLinkToBoth(self, link, bothSides): ...
    def findFolderAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFolderAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class FolderAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FolderAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FolderAnnotationLinkI(FolderAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FolderImageLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FolderImageLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FolderImageLinkI(FolderImageLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FolderRoiLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class FolderRoiLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FolderRoiLinkI(FolderRoiLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class Format(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class FormatPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FormatI(Format):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class GenericExcitationSource(LightSource):
    def getMapAsMap(self, current: Incomplete | None = ...): ...
    def getMap(self, current: Incomplete | None = ...): ...
    def setMap(self, theMap, current: Incomplete | None = ...): ...

class GenericExcitationSourcePrx(LightSourcePrx):
    def getMapAsMap(self, _ctx: Incomplete | None = ...): ...
    def getMap(self, _ctx: Incomplete | None = ...): ...
    def setMap(self, theMap, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class GenericExcitationSourceI(GenericExcitationSource):
    MAP: ClassVar[str] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    POWER: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadMap(self): ...
    def getMap(self, current: Incomplete | None = ...): ...
    def setMap(self, _map, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getMapAsMap(self, current: Incomplete | None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadPower(self): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, _power, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightSourceAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class GroupExperimenterMap(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def getOwner(self, current: Incomplete | None = ...) -> Optional[ExperimenterI]: ...
    def setOwner(
        self, theOwner: Optional[ExperimenterI], current: Incomplete | None = ...
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class GroupExperimenterMapPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def getOwner(self, _ctx: Incomplete | None = ...) -> Optional[ExperimenterI]: ...
    def setOwner(
        self, theOwner: Optional[ExperimenterI], _ctx: Incomplete | None = ...
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class GroupExperimenterMapI(GroupExperimenterMap):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    OWNER: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadOwner(self): ...
    def getOwner(self, current: Incomplete | None = ...) -> Optional[ExperimenterI]: ...
    def setOwner(
        self,
        _owner: Optional[ExperimenterI],
        current: Incomplete | None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class Illumination(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class IlluminationPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class IlluminationI(Illumination):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Image(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getSeries(self, current: Incomplete | None = ...): ...
    def setSeries(self, theSeries, current: Incomplete | None = ...): ...
    def getAcquisitionDate(self, current: None = ...) -> RTimeI: ...
    def setAcquisitionDate(
        self, theAcquisitionDate: Union[RTimeI, str], current: None = ...
    ): ...
    def getArchived(self, current: Incomplete | None = ...): ...
    def setArchived(self, theArchived, current: Incomplete | None = ...): ...
    def getPartial(self, current: Incomplete | None = ...): ...
    def setPartial(self, thePartial, current: Incomplete | None = ...): ...
    def getFormat(self, current: Incomplete | None = ...): ...
    def setFormat(self, theFormat, current: Incomplete | None = ...): ...
    def getImagingEnvironment(self, current: Incomplete | None = ...): ...
    def setImagingEnvironment(
        self, theImagingEnvironment, current: Incomplete | None = ...
    ): ...
    def getObjectiveSettings(self, current: Incomplete | None = ...): ...
    def setObjectiveSettings(
        self, theObjectiveSettings, current: Incomplete | None = ...
    ): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def getStageLabel(self, current: Incomplete | None = ...): ...
    def setStageLabel(self, theStageLabel, current: Incomplete | None = ...): ...
    def getExperiment(self, current: Incomplete | None = ...): ...
    def setExperiment(self, theExperiment, current: Incomplete | None = ...): ...
    def unloadPixels(self, current: None = ...): ...
    def sizeOfPixels(self, current: None = ...) -> int: ...
    def copyPixels(self, current: Incomplete | None = ...): ...
    def addPixels(self, target: PixelsI, current: None = ...): ...
    def addAllPixelsSet(self, targets, current: Incomplete | None = ...): ...
    def removePixels(self, theTarget: PixelsI, current: None = ...): ...
    def removeAllPixelsSet(self, targets, current: Incomplete | None = ...): ...
    def clearPixels(self, current: None = ...): ...
    def reloadPixels(self, toCopy, current: Incomplete | None = ...): ...
    def getPixels(self, index, current: Incomplete | None = ...): ...
    def setPixels(self, index: PixelsI, theElement: None, current: bool = ...): ...
    def getPrimaryPixels(self, current: None = ...) -> PixelsI: ...
    def setPrimaryPixels(self, theElement, current: Incomplete | None = ...): ...
    def unloadWellSamples(self, current: None = ...): ...
    def sizeOfWellSamples(self, current: Incomplete | None = ...): ...
    def copyWellSamples(self, current: Incomplete | None = ...): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSamples(self, current: Incomplete | None = ...): ...
    def reloadWellSamples(self, toCopy, current: Incomplete | None = ...): ...
    def unloadRois(self, current: None = ...): ...
    def sizeOfRois(self, current: Incomplete | None = ...): ...
    def copyRois(self, current: Incomplete | None = ...): ...
    def addRoi(self, target, current: Incomplete | None = ...): ...
    def addAllRoiSet(self, targets, current: Incomplete | None = ...): ...
    def removeRoi(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllRoiSet(self, targets, current: Incomplete | None = ...): ...
    def clearRois(self, current: Incomplete | None = ...): ...
    def reloadRois(self, toCopy, current: Incomplete | None = ...): ...
    def unloadDatasetLinks(self, current: None = ...): ...
    def sizeOfDatasetLinks(self, current: None = ...) -> int: ...
    def copyDatasetLinks(self, current: Incomplete | None = ...): ...
    def addDatasetImageLink(
        self, target: DatasetImageLinkI, current: Optional[bool] = ...
    ): ...
    def addAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDatasetImageLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDatasetImageLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearDatasetLinks(self, current: Incomplete | None = ...): ...
    def reloadDatasetLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getDatasetLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkDataset(
        self, addition: DatasetI, current: None = ...
    ) -> DatasetImageLinkI: ...
    def addDatasetImageLinkToBoth(
        self, link: DatasetImageLinkI, bothSides: bool, current: Incomplete | None = ...
    ): ...
    def findDatasetImageLink(
        self, removal: DatasetI, current: None = ...
    ) -> List[DatasetImageLinkI]: ...
    def unlinkDataset(self, removal: DatasetI, current: None = ...): ...
    def removeDatasetImageLinkFromBoth(
        self, link: DatasetImageLinkI, bothSides: bool, current: None = ...
    ): ...
    def linkedDatasetList(self, current: Incomplete | None = ...): ...
    def unloadFolderLinks(self, current: None = ...): ...
    def sizeOfFolderLinks(self, current: Incomplete | None = ...): ...
    def copyFolderLinks(self, current: Incomplete | None = ...): ...
    def addFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderImageLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFolderImageLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearFolderLinks(self, current: Incomplete | None = ...): ...
    def reloadFolderLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFolderLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkFolder(self, addition, current: Incomplete | None = ...): ...
    def addFolderImageLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFolderImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkFolder(self, removal, current: Incomplete | None = ...): ...
    def removeFolderImageLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedFolderList(self, current: Incomplete | None = ...): ...
    def getFileset(self, current: Incomplete | None = ...): ...
    def setFileset(self, theFileset: FilesetI, current: None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addImageAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllImageAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeImageAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllImageAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addImageAnnotationLinkToBoth(
        self,
        link: ImageAnnotationLinkI,
        bothSides: bool,
        current: Incomplete | None = ...,
    ): ...
    def findImageAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeImageAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class ImagePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getSeries(self, _ctx: Incomplete | None = ...): ...
    def setSeries(self, theSeries, _ctx: Incomplete | None = ...): ...
    def getAcquisitionDate(self, _ctx: None = ...) -> RTimeI: ...
    def setAcquisitionDate(
        self, theAcquisitionDate: Union[RTimeI, str], _ctx: None = ...
    ): ...
    def getArchived(self, _ctx: Incomplete | None = ...): ...
    def setArchived(self, theArchived, _ctx: Incomplete | None = ...): ...
    def getPartial(self, _ctx: Incomplete | None = ...): ...
    def setPartial(self, thePartial, _ctx: Incomplete | None = ...): ...
    def getFormat(self, _ctx: Incomplete | None = ...): ...
    def setFormat(self, theFormat, _ctx: Incomplete | None = ...): ...
    def getImagingEnvironment(self, _ctx: Incomplete | None = ...): ...
    def setImagingEnvironment(
        self, theImagingEnvironment, _ctx: Incomplete | None = ...
    ): ...
    def getObjectiveSettings(self, _ctx: Incomplete | None = ...): ...
    def setObjectiveSettings(
        self, theObjectiveSettings, _ctx: Incomplete | None = ...
    ): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def getStageLabel(self, _ctx: Incomplete | None = ...): ...
    def setStageLabel(self, theStageLabel, _ctx: Incomplete | None = ...): ...
    def getExperiment(self, _ctx: Incomplete | None = ...): ...
    def setExperiment(self, theExperiment, _ctx: Incomplete | None = ...): ...
    def unloadPixels(self, _ctx: None = ...): ...
    def sizeOfPixels(self, _ctx: None = ...) -> int: ...
    def copyPixels(self, _ctx: Incomplete | None = ...): ...
    def addPixels(self, target: PixelsI, _ctx: None = ...): ...
    def addAllPixelsSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removePixels(self, theTarget: PixelsI, _ctx: None = ...): ...
    def removeAllPixelsSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearPixels(self, _ctx: None = ...): ...
    def reloadPixels(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getPixels(self, index, _ctx: Incomplete | None = ...): ...
    def setPixels(self, index: PixelsI, theElement: None, _ctx: bool = ...): ...
    def getPrimaryPixels(self, _ctx: None = ...) -> PixelsI: ...
    def setPrimaryPixels(self, theElement, _ctx: Incomplete | None = ...): ...
    def unloadWellSamples(self, _ctx: None = ...): ...
    def sizeOfWellSamples(self, _ctx: Incomplete | None = ...): ...
    def copyWellSamples(self, _ctx: Incomplete | None = ...): ...
    def addWellSample(self, target, _ctx: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeWellSample(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearWellSamples(self, _ctx: Incomplete | None = ...): ...
    def reloadWellSamples(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadRois(self, _ctx: None = ...): ...
    def sizeOfRois(self, _ctx: Incomplete | None = ...): ...
    def copyRois(self, _ctx: Incomplete | None = ...): ...
    def addRoi(self, target, _ctx: Incomplete | None = ...): ...
    def addAllRoiSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeRoi(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllRoiSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearRois(self, _ctx: Incomplete | None = ...): ...
    def reloadRois(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadDatasetLinks(self, _ctx: None = ...): ...
    def sizeOfDatasetLinks(self, _ctx: None = ...) -> int: ...
    def copyDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def addDatasetImageLink(
        self, target: DatasetImageLinkI, _ctx: Optional[bool] = ...
    ): ...
    def addAllDatasetImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeDatasetImageLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllDatasetImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadDatasetLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getDatasetLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkDataset(
        self, addition: DatasetI, _ctx: None = ...
    ) -> DatasetImageLinkI: ...
    def addDatasetImageLinkToBoth(
        self, link: DatasetImageLinkI, bothSides: bool, _ctx: Incomplete | None = ...
    ): ...
    def findDatasetImageLink(
        self, removal: DatasetI, _ctx: None = ...
    ) -> List[DatasetImageLinkI]: ...
    def unlinkDataset(self, removal: DatasetI, _ctx: None = ...): ...
    def removeDatasetImageLinkFromBoth(
        self, link: DatasetImageLinkI, bothSides: bool, _ctx: None = ...
    ): ...
    def linkedDatasetList(self, _ctx: Incomplete | None = ...): ...
    def unloadFolderLinks(self, _ctx: None = ...): ...
    def sizeOfFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def copyFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def addFolderImageLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFolderImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFolderImageLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFolderImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadFolderLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getFolderLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkFolder(self, addition, _ctx: Incomplete | None = ...): ...
    def addFolderImageLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFolderImageLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkFolder(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFolderImageLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedFolderList(self, _ctx: Incomplete | None = ...): ...
    def getFileset(self, _ctx: Incomplete | None = ...): ...
    def setFileset(self, theFileset: FilesetI, _ctx: None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addImageAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllImageAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeImageAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllImageAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addImageAnnotationLinkToBoth(
        self, link: ImageAnnotationLinkI, bothSides: bool, _ctx: Incomplete | None = ...
    ): ...
    def findImageAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeImageAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ImageI(Image):
    SERIES: ClassVar[str] = ...
    ACQUISITIONDATE: ClassVar[str] = ...
    ARCHIVED: ClassVar[str] = ...
    PARTIAL: ClassVar[str] = ...
    FORMAT: ClassVar[str] = ...
    IMAGINGENVIRONMENT: ClassVar[str] = ...
    OBJECTIVESETTINGS: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    STAGELABEL: ClassVar[str] = ...
    EXPERIMENT: ClassVar[str] = ...
    PIXELS: ClassVar[str] = ...
    WELLSAMPLES: ClassVar[str] = ...
    ROIS: ClassVar[str] = ...
    DATASETLINKS: ClassVar[str] = ...
    FOLDERLINKS: ClassVar[str] = ...
    FILESET: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadSeries(self): ...
    def getSeries(self, current: Incomplete | None = ...): ...
    def setSeries(
        self, _series, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAcquisitionDate(self): ...
    def getAcquisitionDate(self, current: None = ...) -> RTimeI: ...
    def setAcquisitionDate(
        self,
        _acquisitionDate: Union[RTimeI, str],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadArchived(self): ...
    def getArchived(self, current: Incomplete | None = ...): ...
    def setArchived(
        self, _archived, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPartial(self): ...
    def getPartial(self, current: Incomplete | None = ...): ...
    def setPartial(
        self, _partial, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFormat(self): ...
    def getFormat(self, current: Incomplete | None = ...): ...
    def setFormat(
        self, _format, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadImagingEnvironment(self): ...
    def getImagingEnvironment(self, current: Incomplete | None = ...): ...
    def setImagingEnvironment(
        self, _imagingEnvironment, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadObjectiveSettings(self): ...
    def getObjectiveSettings(self, current: Incomplete | None = ...): ...
    def setObjectiveSettings(
        self, _objectiveSettings, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStageLabel(self): ...
    def getStageLabel(self, current: Incomplete | None = ...): ...
    def setStageLabel(
        self, _stageLabel, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadExperiment(self): ...
    def getExperiment(self, current: Incomplete | None = ...): ...
    def setExperiment(
        self, _experiment, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPixels(self, current: None = ...): ...
    def isPixelsLoaded(self) -> bool: ...
    def sizeOfPixels(self, current: None = ...) -> int: ...
    def copyPixels(self, current: Incomplete | None = ...): ...
    def iteratePixels(self): ...
    def addPixels(self, target: PixelsI, current: None = ...): ...
    def addAllPixelsSet(self, targets, current: Incomplete | None = ...): ...
    def removePixels(self, target: PixelsI, current: None = ...): ...
    def removeAllPixelsSet(self, targets, current: Incomplete | None = ...): ...
    def clearPixels(self, current: None = ...): ...
    def reloadPixels(self, toCopy, current: Incomplete | None = ...): ...
    def getPixels(self, index, current: Incomplete | None = ...): ...
    def setPixels(
        self, index: PixelsI, element: None, current: bool = ..., wrap: bool = ...
    ): ...
    def getPrimaryPixels(self, current: None = ...) -> PixelsI: ...
    def setPrimaryPixels(self, element, current: Incomplete | None = ...): ...
    def unloadWellSamples(self, current: None = ...): ...
    def isWellSamplesLoaded(self): ...
    def sizeOfWellSamples(self, current: Incomplete | None = ...): ...
    def copyWellSamples(self, current: Incomplete | None = ...): ...
    def iterateWellSamples(self): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, target, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSamples(self, current: Incomplete | None = ...): ...
    def reloadWellSamples(self, toCopy, current: Incomplete | None = ...): ...
    def unloadRois(self, current: None = ...): ...
    def isRoisLoaded(self): ...
    def sizeOfRois(self, current: Incomplete | None = ...): ...
    def copyRois(self, current: Incomplete | None = ...): ...
    def iterateRois(self): ...
    def addRoi(self, target, current: Incomplete | None = ...): ...
    def addAllRoiSet(self, targets, current: Incomplete | None = ...): ...
    def removeRoi(self, target, current: Incomplete | None = ...): ...
    def removeAllRoiSet(self, targets, current: Incomplete | None = ...): ...
    def clearRois(self, current: Incomplete | None = ...): ...
    def reloadRois(self, toCopy, current: Incomplete | None = ...): ...
    def unloadDatasetLinks(self, current: None = ...): ...
    def isDatasetLinksLoaded(self): ...
    def sizeOfDatasetLinks(self, current: None = ...) -> int: ...
    def copyDatasetLinks(self, current: Incomplete | None = ...): ...
    def iterateDatasetLinks(self): ...
    def addDatasetImageLink(
        self, target: DatasetImageLinkI, current: Optional[bool] = ...
    ): ...
    def addAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDatasetImageLink(self, target, current: Incomplete | None = ...): ...
    def removeAllDatasetImageLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearDatasetLinks(self, current: Incomplete | None = ...): ...
    def reloadDatasetLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getDatasetLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkDataset(
        self, addition: DatasetI, current: None = ...
    ) -> DatasetImageLinkI: ...
    def addDatasetImageLinkToBoth(self, link: DatasetImageLinkI, bothSides: bool): ...
    def findDatasetImageLink(
        self, removal: DatasetI, current: None = ...
    ) -> List[DatasetImageLinkI]: ...
    def unlinkDataset(self, removal: DatasetI, current: None = ...): ...
    def removeDatasetImageLinkFromBoth(
        self, link: DatasetImageLinkI, bothSides: bool, current: None = ...
    ): ...
    def linkedDatasetList(self, current: Incomplete | None = ...): ...
    def unloadFolderLinks(self, current: None = ...): ...
    def isFolderLinksLoaded(self): ...
    def sizeOfFolderLinks(self, current: Incomplete | None = ...): ...
    def copyFolderLinks(self, current: Incomplete | None = ...): ...
    def iterateFolderLinks(self): ...
    def addFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFolderImageLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearFolderLinks(self, current: Incomplete | None = ...): ...
    def reloadFolderLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFolderLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkFolder(self, addition, current: Incomplete | None = ...): ...
    def addFolderImageLinkToBoth(self, link, bothSides): ...
    def findFolderImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkFolder(self, removal, current: Incomplete | None = ...): ...
    def removeFolderImageLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedFolderList(self, current: Incomplete | None = ...): ...
    def unloadFileset(self): ...
    def getFileset(self, current: Incomplete | None = ...): ...
    def setFileset(self, _fileset: FilesetI, current: None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addImageAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllImageAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeImageAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllImageAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addImageAnnotationLinkToBoth(
        self, link: ImageAnnotationLinkI, bothSides: bool
    ): ...
    def findImageAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeImageAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class ImageAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ImageAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ImageAnnotationLinkI(ImageAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ImagingEnvironment(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getTemperature(self, current: Incomplete | None = ...): ...
    def setTemperature(self, theTemperature, current: Incomplete | None = ...): ...
    def getAirPressure(self, current: Incomplete | None = ...): ...
    def setAirPressure(self, theAirPressure, current: Incomplete | None = ...): ...
    def getHumidity(self, current: Incomplete | None = ...): ...
    def setHumidity(self, theHumidity, current: Incomplete | None = ...): ...
    def getCo2percent(self, current: Incomplete | None = ...): ...
    def setCo2percent(self, theCo2percent, current: Incomplete | None = ...): ...
    def getMapAsMap(self, current: Incomplete | None = ...): ...
    def getMap(self, current: Incomplete | None = ...): ...
    def setMap(self, theMap, current: Incomplete | None = ...): ...

class ImagingEnvironmentPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getTemperature(self, _ctx: Incomplete | None = ...): ...
    def setTemperature(self, theTemperature, _ctx: Incomplete | None = ...): ...
    def getAirPressure(self, _ctx: Incomplete | None = ...): ...
    def setAirPressure(self, theAirPressure, _ctx: Incomplete | None = ...): ...
    def getHumidity(self, _ctx: Incomplete | None = ...): ...
    def setHumidity(self, theHumidity, _ctx: Incomplete | None = ...): ...
    def getCo2percent(self, _ctx: Incomplete | None = ...): ...
    def setCo2percent(self, theCo2percent, _ctx: Incomplete | None = ...): ...
    def getMapAsMap(self, _ctx: Incomplete | None = ...): ...
    def getMap(self, _ctx: Incomplete | None = ...): ...
    def setMap(self, theMap, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ImagingEnvironmentI(ImagingEnvironment):
    TEMPERATURE: ClassVar[str] = ...
    AIRPRESSURE: ClassVar[str] = ...
    HUMIDITY: ClassVar[str] = ...
    CO2PERCENT: ClassVar[str] = ...
    MAP: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadTemperature(self): ...
    def getTemperature(self, current: Incomplete | None = ...): ...
    def setTemperature(
        self, _temperature, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAirPressure(self): ...
    def getAirPressure(self, current: Incomplete | None = ...): ...
    def setAirPressure(
        self, _airPressure, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadHumidity(self): ...
    def getHumidity(self, current: Incomplete | None = ...): ...
    def setHumidity(
        self, _humidity, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadCo2percent(self): ...
    def getCo2percent(self, current: Incomplete | None = ...): ...
    def setCo2percent(
        self, _co2percent, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMap(self): ...
    def getMap(self, current: Incomplete | None = ...): ...
    def setMap(self, _map, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getMapAsMap(self, current: Incomplete | None = ...): ...

class Immersion(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class ImmersionPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ImmersionI(Immersion):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Job(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, theUsername, current: Incomplete | None = ...): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, theGroupname, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, theMessage, current: Incomplete | None = ...): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, theStatus, current: Incomplete | None = ...): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, theSubmitted, current: Incomplete | None = ...): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, theScheduledFor: RTimeI, current: None = ...): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, theStarted, current: Incomplete | None = ...): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, theFinished, current: Incomplete | None = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def sizeOfOriginalFileLinks(self, current: None = ...) -> int: ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeJobOriginalFileLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class JobPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getUsername(self, _ctx: Incomplete | None = ...): ...
    def setUsername(self, theUsername, _ctx: Incomplete | None = ...): ...
    def getGroupname(self, _ctx: Incomplete | None = ...): ...
    def setGroupname(self, theGroupname, _ctx: Incomplete | None = ...): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def getMessage(self, _ctx: Incomplete | None = ...): ...
    def setMessage(self, theMessage, _ctx: Incomplete | None = ...): ...
    def getStatus(self, _ctx: Incomplete | None = ...): ...
    def setStatus(self, theStatus, _ctx: Incomplete | None = ...): ...
    def getSubmitted(self, _ctx: Incomplete | None = ...): ...
    def setSubmitted(self, theSubmitted, _ctx: Incomplete | None = ...): ...
    def getScheduledFor(self, _ctx: Incomplete | None = ...): ...
    def setScheduledFor(self, theScheduledFor: RTimeI, _ctx: None = ...): ...
    def getStarted(self, _ctx: Incomplete | None = ...): ...
    def setStarted(self, theStarted, _ctx: Incomplete | None = ...): ...
    def getFinished(self, _ctx: Incomplete | None = ...): ...
    def setFinished(self, theFinished, _ctx: Incomplete | None = ...): ...
    def unloadOriginalFileLinks(self, _ctx: Incomplete | None = ...): ...
    def sizeOfOriginalFileLinks(self, _ctx: None = ...) -> int: ...
    def copyOriginalFileLinks(self, _ctx: Incomplete | None = ...): ...
    def addJobOriginalFileLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, _ctx: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findJobOriginalFileLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, _ctx: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ImportJob(Job):
    def getImageName(self, current: Incomplete | None = ...): ...
    def setImageName(self, theImageName, current: Incomplete | None = ...): ...
    def getImageDescription(self, current: Incomplete | None = ...): ...
    def setImageDescription(
        self, theImageDescription, current: Incomplete | None = ...
    ): ...

class ImportJobPrx(JobPrx):
    def getImageName(self, _ctx: Incomplete | None = ...): ...
    def setImageName(self, theImageName, _ctx: Incomplete | None = ...): ...
    def getImageDescription(self, _ctx: Incomplete | None = ...): ...
    def setImageDescription(
        self, theImageDescription, _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ImportJobI(ImportJob):
    deprecations_warned: ClassVar[set] = ...
    IMAGENAME: ClassVar[str] = ...
    IMAGEDESCRIPTION: ClassVar[str] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    @staticmethod
    def warn_of_deprecation(item): ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadImageName(self): ...
    def getImageName(self, current: Incomplete | None = ...): ...
    def setImageName(
        self, _imageName, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadImageDescription(self): ...
    def getImageDescription(self, current: Incomplete | None = ...): ...
    def setImageDescription(
        self, _imageDescription, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(
        self, _username, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(
        self, _groupname, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(
        self, _submitted, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(
        self, _scheduledFor: RTimeI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(
        self, _finished, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: None = ...) -> int: ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class IndexingJob(Job): ...

class IndexingJobPrx(JobPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class IndexingJobI(IndexingJob):
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(
        self, _username, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(
        self, _groupname, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(
        self, _submitted, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(
        self, _scheduledFor: RTimeI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(
        self, _finished, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: None = ...) -> int: ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class Instrument(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getMicroscope(self, current: Incomplete | None = ...): ...
    def setMicroscope(self, theMicroscope, current: Incomplete | None = ...): ...
    def unloadDetector(self, current: Incomplete | None = ...): ...
    def sizeOfDetector(self, current: Incomplete | None = ...): ...
    def copyDetector(self, current: Incomplete | None = ...): ...
    def addDetector(self, target, current: Incomplete | None = ...): ...
    def addAllDetectorSet(self, targets, current: Incomplete | None = ...): ...
    def removeDetector(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDetectorSet(self, targets, current: Incomplete | None = ...): ...
    def clearDetector(self, current: Incomplete | None = ...): ...
    def reloadDetector(self, toCopy, current: Incomplete | None = ...): ...
    def unloadObjective(self, current: Incomplete | None = ...): ...
    def sizeOfObjective(self, current: Incomplete | None = ...): ...
    def copyObjective(self, current: Incomplete | None = ...): ...
    def addObjective(self, target, current: Incomplete | None = ...): ...
    def addAllObjectiveSet(self, targets, current: Incomplete | None = ...): ...
    def removeObjective(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllObjectiveSet(self, targets, current: Incomplete | None = ...): ...
    def clearObjective(self, current: Incomplete | None = ...): ...
    def reloadObjective(self, toCopy, current: Incomplete | None = ...): ...
    def unloadLightSource(self, current: Incomplete | None = ...): ...
    def sizeOfLightSource(self, current: Incomplete | None = ...): ...
    def copyLightSource(self, current: Incomplete | None = ...): ...
    def addLightSource(self, target, current: Incomplete | None = ...): ...
    def addAllLightSourceSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSource(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllLightSourceSet(self, targets, current: Incomplete | None = ...): ...
    def clearLightSource(self, current: Incomplete | None = ...): ...
    def reloadLightSource(self, toCopy, current: Incomplete | None = ...): ...
    def unloadFilter(self, current: Incomplete | None = ...): ...
    def sizeOfFilter(self, current: Incomplete | None = ...): ...
    def copyFilter(self, current: Incomplete | None = ...): ...
    def addFilter(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilter(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilterSet(self, targets, current: Incomplete | None = ...): ...
    def clearFilter(self, current: Incomplete | None = ...): ...
    def reloadFilter(self, toCopy, current: Incomplete | None = ...): ...
    def unloadDichroic(self, current: Incomplete | None = ...): ...
    def sizeOfDichroic(self, current: Incomplete | None = ...): ...
    def copyDichroic(self, current: Incomplete | None = ...): ...
    def addDichroic(self, target, current: Incomplete | None = ...): ...
    def addAllDichroicSet(self, targets, current: Incomplete | None = ...): ...
    def removeDichroic(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDichroicSet(self, targets, current: Incomplete | None = ...): ...
    def clearDichroic(self, current: Incomplete | None = ...): ...
    def reloadDichroic(self, toCopy, current: Incomplete | None = ...): ...
    def unloadFilterSet(self, current: Incomplete | None = ...): ...
    def sizeOfFilterSet(self, current: Incomplete | None = ...): ...
    def copyFilterSet(self, current: Incomplete | None = ...): ...
    def addFilterSet(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSet(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilterSetSet(self, targets, current: Incomplete | None = ...): ...
    def clearFilterSet(self, current: Incomplete | None = ...): ...
    def reloadFilterSet(self, toCopy, current: Incomplete | None = ...): ...
    def unloadOtf(self, current: Incomplete | None = ...): ...
    def sizeOfOtf(self, current: Incomplete | None = ...): ...
    def copyOtf(self, current: Incomplete | None = ...): ...
    def addOTF(self, target, current: Incomplete | None = ...): ...
    def addAllOTFSet(self, targets, current: Incomplete | None = ...): ...
    def removeOTF(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllOTFSet(self, targets, current: Incomplete | None = ...): ...
    def clearOtf(self, current: Incomplete | None = ...): ...
    def reloadOtf(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addInstrumentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllInstrumentAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeInstrumentAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllInstrumentAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addInstrumentAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findInstrumentAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeInstrumentAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class InstrumentPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getMicroscope(self, _ctx: Incomplete | None = ...): ...
    def setMicroscope(self, theMicroscope, _ctx: Incomplete | None = ...): ...
    def unloadDetector(self, _ctx: Incomplete | None = ...): ...
    def sizeOfDetector(self, _ctx: Incomplete | None = ...): ...
    def copyDetector(self, _ctx: Incomplete | None = ...): ...
    def addDetector(self, target, _ctx: Incomplete | None = ...): ...
    def addAllDetectorSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeDetector(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllDetectorSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearDetector(self, _ctx: Incomplete | None = ...): ...
    def reloadDetector(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadObjective(self, _ctx: Incomplete | None = ...): ...
    def sizeOfObjective(self, _ctx: Incomplete | None = ...): ...
    def copyObjective(self, _ctx: Incomplete | None = ...): ...
    def addObjective(self, target, _ctx: Incomplete | None = ...): ...
    def addAllObjectiveSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeObjective(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllObjectiveSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearObjective(self, _ctx: Incomplete | None = ...): ...
    def reloadObjective(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadLightSource(self, _ctx: Incomplete | None = ...): ...
    def sizeOfLightSource(self, _ctx: Incomplete | None = ...): ...
    def copyLightSource(self, _ctx: Incomplete | None = ...): ...
    def addLightSource(self, target, _ctx: Incomplete | None = ...): ...
    def addAllLightSourceSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeLightSource(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllLightSourceSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearLightSource(self, _ctx: Incomplete | None = ...): ...
    def reloadLightSource(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadFilter(self, _ctx: Incomplete | None = ...): ...
    def sizeOfFilter(self, _ctx: Incomplete | None = ...): ...
    def copyFilter(self, _ctx: Incomplete | None = ...): ...
    def addFilter(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFilterSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFilter(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFilterSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearFilter(self, _ctx: Incomplete | None = ...): ...
    def reloadFilter(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadDichroic(self, _ctx: Incomplete | None = ...): ...
    def sizeOfDichroic(self, _ctx: Incomplete | None = ...): ...
    def copyDichroic(self, _ctx: Incomplete | None = ...): ...
    def addDichroic(self, target, _ctx: Incomplete | None = ...): ...
    def addAllDichroicSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeDichroic(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllDichroicSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearDichroic(self, _ctx: Incomplete | None = ...): ...
    def reloadDichroic(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadFilterSet(self, _ctx: Incomplete | None = ...): ...
    def sizeOfFilterSet(self, _ctx: Incomplete | None = ...): ...
    def copyFilterSet(self, _ctx: Incomplete | None = ...): ...
    def addFilterSet(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFilterSetSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFilterSet(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFilterSetSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearFilterSet(self, _ctx: Incomplete | None = ...): ...
    def reloadFilterSet(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadOtf(self, _ctx: Incomplete | None = ...): ...
    def sizeOfOtf(self, _ctx: Incomplete | None = ...): ...
    def copyOtf(self, _ctx: Incomplete | None = ...): ...
    def addOTF(self, target, _ctx: Incomplete | None = ...): ...
    def addAllOTFSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeOTF(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllOTFSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearOtf(self, _ctx: Incomplete | None = ...): ...
    def reloadOtf(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addInstrumentAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllInstrumentAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeInstrumentAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllInstrumentAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addInstrumentAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findInstrumentAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeInstrumentAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class InstrumentI(Instrument):
    MICROSCOPE: ClassVar[str] = ...
    DETECTOR: ClassVar[str] = ...
    OBJECTIVE: ClassVar[str] = ...
    LIGHTSOURCE: ClassVar[str] = ...
    FILTER: ClassVar[str] = ...
    DICHROIC: ClassVar[str] = ...
    FILTERSET: ClassVar[str] = ...
    OTF: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadMicroscope(self): ...
    def getMicroscope(self, current: Incomplete | None = ...): ...
    def setMicroscope(
        self, _microscope, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadDetector(self, current: Incomplete | None = ...): ...
    def isDetectorLoaded(self): ...
    def sizeOfDetector(self, current: Incomplete | None = ...): ...
    def copyDetector(self, current: Incomplete | None = ...): ...
    def iterateDetector(self): ...
    def addDetector(self, target, current: Incomplete | None = ...): ...
    def addAllDetectorSet(self, targets, current: Incomplete | None = ...): ...
    def removeDetector(self, target, current: Incomplete | None = ...): ...
    def removeAllDetectorSet(self, targets, current: Incomplete | None = ...): ...
    def clearDetector(self, current: Incomplete | None = ...): ...
    def reloadDetector(self, toCopy, current: Incomplete | None = ...): ...
    def unloadObjective(self, current: Incomplete | None = ...): ...
    def isObjectiveLoaded(self): ...
    def sizeOfObjective(self, current: Incomplete | None = ...): ...
    def copyObjective(self, current: Incomplete | None = ...): ...
    def iterateObjective(self): ...
    def addObjective(self, target, current: Incomplete | None = ...): ...
    def addAllObjectiveSet(self, targets, current: Incomplete | None = ...): ...
    def removeObjective(self, target, current: Incomplete | None = ...): ...
    def removeAllObjectiveSet(self, targets, current: Incomplete | None = ...): ...
    def clearObjective(self, current: Incomplete | None = ...): ...
    def reloadObjective(self, toCopy, current: Incomplete | None = ...): ...
    def unloadLightSource(self, current: Incomplete | None = ...): ...
    def isLightSourceLoaded(self): ...
    def sizeOfLightSource(self, current: Incomplete | None = ...): ...
    def copyLightSource(self, current: Incomplete | None = ...): ...
    def iterateLightSource(self): ...
    def addLightSource(self, target, current: Incomplete | None = ...): ...
    def addAllLightSourceSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSource(self, target, current: Incomplete | None = ...): ...
    def removeAllLightSourceSet(self, targets, current: Incomplete | None = ...): ...
    def clearLightSource(self, current: Incomplete | None = ...): ...
    def reloadLightSource(self, toCopy, current: Incomplete | None = ...): ...
    def unloadFilter(self, current: Incomplete | None = ...): ...
    def isFilterLoaded(self): ...
    def sizeOfFilter(self, current: Incomplete | None = ...): ...
    def copyFilter(self, current: Incomplete | None = ...): ...
    def iterateFilter(self): ...
    def addFilter(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilter(self, target, current: Incomplete | None = ...): ...
    def removeAllFilterSet(self, targets, current: Incomplete | None = ...): ...
    def clearFilter(self, current: Incomplete | None = ...): ...
    def reloadFilter(self, toCopy, current: Incomplete | None = ...): ...
    def unloadDichroic(self, current: Incomplete | None = ...): ...
    def isDichroicLoaded(self): ...
    def sizeOfDichroic(self, current: Incomplete | None = ...): ...
    def copyDichroic(self, current: Incomplete | None = ...): ...
    def iterateDichroic(self): ...
    def addDichroic(self, target, current: Incomplete | None = ...): ...
    def addAllDichroicSet(self, targets, current: Incomplete | None = ...): ...
    def removeDichroic(self, target, current: Incomplete | None = ...): ...
    def removeAllDichroicSet(self, targets, current: Incomplete | None = ...): ...
    def clearDichroic(self, current: Incomplete | None = ...): ...
    def reloadDichroic(self, toCopy, current: Incomplete | None = ...): ...
    def unloadFilterSet(self, current: Incomplete | None = ...): ...
    def isFilterSetLoaded(self): ...
    def sizeOfFilterSet(self, current: Incomplete | None = ...): ...
    def copyFilterSet(self, current: Incomplete | None = ...): ...
    def iterateFilterSet(self): ...
    def addFilterSet(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSet(self, target, current: Incomplete | None = ...): ...
    def removeAllFilterSetSet(self, targets, current: Incomplete | None = ...): ...
    def clearFilterSet(self, current: Incomplete | None = ...): ...
    def reloadFilterSet(self, toCopy, current: Incomplete | None = ...): ...
    def unloadOtf(self, current: Incomplete | None = ...): ...
    def isOtfLoaded(self): ...
    def sizeOfOtf(self, current: Incomplete | None = ...): ...
    def copyOtf(self, current: Incomplete | None = ...): ...
    def iterateOtf(self): ...
    def addOTF(self, target, current: Incomplete | None = ...): ...
    def addAllOTFSet(self, targets, current: Incomplete | None = ...): ...
    def removeOTF(self, target, current: Incomplete | None = ...): ...
    def removeAllOTFSet(self, targets, current: Incomplete | None = ...): ...
    def clearOtf(self, current: Incomplete | None = ...): ...
    def reloadOtf(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addInstrumentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllInstrumentAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeInstrumentAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllInstrumentAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addInstrumentAnnotationLinkToBoth(self, link, bothSides): ...
    def findInstrumentAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeInstrumentAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class InstrumentAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class InstrumentAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class InstrumentAnnotationLinkI(InstrumentAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class IntegrityCheckJob(Job): ...

class IntegrityCheckJobPrx(JobPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class IntegrityCheckJobI(IntegrityCheckJob):
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(
        self, _username, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(
        self, _groupname, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(
        self, _submitted, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(
        self, _scheduledFor: RTimeI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(
        self, _finished, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: None = ...) -> int: ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class JobOriginalFileLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class JobOriginalFileLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class JobOriginalFileLinkI(JobOriginalFileLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class JobStatus(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class JobStatusPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class JobStatusI(JobStatus):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Label(Shape):
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, theX, current: Incomplete | None = ...): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, theY, current: Incomplete | None = ...): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, current: None = ...): ...

class LabelPrx(ShapePrx):
    def getX(self, _ctx: Incomplete | None = ...): ...
    def setX(self, theX, _ctx: Incomplete | None = ...): ...
    def getY(self, _ctx: Incomplete | None = ...): ...
    def setY(self, theY, _ctx: Incomplete | None = ...): ...
    def getTextValue(self, _ctx: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LabelI(Label):
    X: ClassVar[str] = ...
    Y: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadX(self): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, _x, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY(self): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, _y, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(
        self, _locked, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(
        self, _transform, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(
        self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(
        self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(
        self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(
        self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(
        self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(
        self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(
        self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(
        self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Laser(LightSource):
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getLaserMedium(self, current: Incomplete | None = ...): ...
    def setLaserMedium(self, theLaserMedium, current: Incomplete | None = ...): ...
    def getFrequencyMultiplication(self, current: Incomplete | None = ...): ...
    def setFrequencyMultiplication(
        self, theFrequencyMultiplication, current: Incomplete | None = ...
    ): ...
    def getTuneable(self, current: Incomplete | None = ...): ...
    def setTuneable(self, theTuneable, current: Incomplete | None = ...): ...
    def getPulse(self, current: Incomplete | None = ...): ...
    def setPulse(self, thePulse, current: Incomplete | None = ...): ...
    def getWavelength(self, current: Incomplete | None = ...): ...
    def setWavelength(self, theWavelength, current: Incomplete | None = ...): ...
    def getPockelCell(self, current: Incomplete | None = ...): ...
    def setPockelCell(self, thePockelCell, current: Incomplete | None = ...): ...
    def getPump(self, current: Incomplete | None = ...): ...
    def setPump(self, thePump, current: Incomplete | None = ...): ...
    def getRepetitionRate(self, current: Incomplete | None = ...): ...
    def setRepetitionRate(
        self, theRepetitionRate, current: Incomplete | None = ...
    ): ...

class LaserPrx(LightSourcePrx):
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def getLaserMedium(self, _ctx: Incomplete | None = ...): ...
    def setLaserMedium(self, theLaserMedium, _ctx: Incomplete | None = ...): ...
    def getFrequencyMultiplication(self, _ctx: Incomplete | None = ...): ...
    def setFrequencyMultiplication(
        self, theFrequencyMultiplication, _ctx: Incomplete | None = ...
    ): ...
    def getTuneable(self, _ctx: Incomplete | None = ...): ...
    def setTuneable(self, theTuneable, _ctx: Incomplete | None = ...): ...
    def getPulse(self, _ctx: Incomplete | None = ...): ...
    def setPulse(self, thePulse, _ctx: Incomplete | None = ...): ...
    def getWavelength(self, _ctx: Incomplete | None = ...): ...
    def setWavelength(self, theWavelength, _ctx: Incomplete | None = ...): ...
    def getPockelCell(self, _ctx: Incomplete | None = ...): ...
    def setPockelCell(self, thePockelCell, _ctx: Incomplete | None = ...): ...
    def getPump(self, _ctx: Incomplete | None = ...): ...
    def setPump(self, thePump, _ctx: Incomplete | None = ...): ...
    def getRepetitionRate(self, _ctx: Incomplete | None = ...): ...
    def setRepetitionRate(self, theRepetitionRate, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LaserI(Laser):
    TYPE: ClassVar[str] = ...
    LASERMEDIUM: ClassVar[str] = ...
    FREQUENCYMULTIPLICATION: ClassVar[str] = ...
    TUNEABLE: ClassVar[str] = ...
    PULSE: ClassVar[str] = ...
    WAVELENGTH: ClassVar[str] = ...
    POCKELCELL: ClassVar[str] = ...
    PUMP: ClassVar[str] = ...
    REPETITIONRATE: ClassVar[str] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    POWER: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLaserMedium(self): ...
    def getLaserMedium(self, current: Incomplete | None = ...): ...
    def setLaserMedium(
        self, _laserMedium, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFrequencyMultiplication(self): ...
    def getFrequencyMultiplication(self, current: Incomplete | None = ...): ...
    def setFrequencyMultiplication(
        self,
        _frequencyMultiplication,
        current: Incomplete | None = ...,
        wrap: bool = ...,
    ): ...
    def unloadTuneable(self): ...
    def getTuneable(self, current: Incomplete | None = ...): ...
    def setTuneable(
        self, _tuneable, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPulse(self): ...
    def getPulse(self, current: Incomplete | None = ...): ...
    def setPulse(self, _pulse, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWavelength(self): ...
    def getWavelength(self, current: Incomplete | None = ...): ...
    def setWavelength(
        self, _wavelength, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPockelCell(self): ...
    def getPockelCell(self, current: Incomplete | None = ...): ...
    def setPockelCell(
        self, _pockelCell, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPump(self): ...
    def getPump(self, current: Incomplete | None = ...): ...
    def setPump(self, _pump, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRepetitionRate(self): ...
    def getRepetitionRate(self, current: Incomplete | None = ...): ...
    def setRepetitionRate(
        self, _repetitionRate, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadPower(self): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, _power, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightSourceAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class LaserMedium(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class LaserMediumPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LaserMediumI(LaserMedium):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class LaserType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class LaserTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LaserTypeI(LaserType):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class LightEmittingDiode(LightSource): ...

class LightEmittingDiodePrx(LightSourcePrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LightEmittingDiodeI(LightEmittingDiode):
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    POWER: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadPower(self): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, _power, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightSourceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllLightSourceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightSourceAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class LightPath(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def addLightPathExcitationFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllLightPathExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightPathExcitationFilterLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllLightPathExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getLightPathExcitationFilterLink(
        self, index, current: Incomplete | None = ...
    ): ...
    def setLightPathExcitationFilterLink(
        self, index, theElement, current: Incomplete | None = ...
    ): ...
    def getPrimaryLightPathExcitationFilterLink(
        self, current: Incomplete | None = ...
    ): ...
    def setPrimaryLightPathExcitationFilterLink(
        self, theElement, current: Incomplete | None = ...
    ): ...
    def getExcitationFilterLinkCountPerOwner(
        self, current: Incomplete | None = ...
    ): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addLightPathExcitationFilterLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findLightPathExcitationFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathExcitationFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def getDichroic(self, current: None = ...) -> DichroicI: ...
    def setDichroic(self, theDichroic: DichroicI, current: None = ...): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def addLightPathEmissionFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllLightPathEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightPathEmissionFilterLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllLightPathEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addLightPathEmissionFilterLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findLightPathEmissionFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathEmissionFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addLightPathAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightPathAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightPathAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllLightPathAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addLightPathAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findLightPathAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class LightPathPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def unloadExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def sizeOfExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def addLightPathExcitationFilterLink(
        self, target, _ctx: Incomplete | None = ...
    ): ...
    def addAllLightPathExcitationFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeLightPathExcitationFilterLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllLightPathExcitationFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getLightPathExcitationFilterLink(
        self, index, _ctx: Incomplete | None = ...
    ): ...
    def setLightPathExcitationFilterLink(
        self, index, theElement, _ctx: Incomplete | None = ...
    ): ...
    def getPrimaryLightPathExcitationFilterLink(
        self, _ctx: Incomplete | None = ...
    ): ...
    def setPrimaryLightPathExcitationFilterLink(
        self, theElement, _ctx: Incomplete | None = ...
    ): ...
    def getExcitationFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkExcitationFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def addLightPathExcitationFilterLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findLightPathExcitationFilterLink(
        self, removal, _ctx: Incomplete | None = ...
    ): ...
    def unlinkExcitationFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def removeLightPathExcitationFilterLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedExcitationFilterList(self, _ctx: Incomplete | None = ...): ...
    def getDichroic(self, _ctx: None = ...) -> DichroicI: ...
    def setDichroic(self, theDichroic: DichroicI, _ctx: None = ...): ...
    def unloadEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def sizeOfEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def addLightPathEmissionFilterLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllLightPathEmissionFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeLightPathEmissionFilterLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllLightPathEmissionFilterLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def addLightPathEmissionFilterLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findLightPathEmissionFilterLink(
        self, removal, _ctx: Incomplete | None = ...
    ): ...
    def unlinkEmissionFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def removeLightPathEmissionFilterLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedEmissionFilterList(self, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addLightPathAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllLightPathAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeLightPathAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllLightPathAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addLightPathAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findLightPathAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeLightPathAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LightPathI(LightPath):
    EXCITATIONFILTERLINK: ClassVar[str] = ...
    DICHROIC: ClassVar[str] = ...
    EMISSIONFILTERLINK: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def isExcitationFilterLinkLoaded(self): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def iterateExcitationFilterLink(self): ...
    def addLightPathExcitationFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllLightPathExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightPathExcitationFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllLightPathExcitationFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getLightPathExcitationFilterLink(
        self, index, current: Incomplete | None = ...
    ): ...
    def setLightPathExcitationFilterLink(
        self, index, element, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getPrimaryLightPathExcitationFilterLink(
        self, current: Incomplete | None = ...
    ): ...
    def setPrimaryLightPathExcitationFilterLink(
        self, element, current: Incomplete | None = ...
    ): ...
    def getExcitationFilterLinkCountPerOwner(
        self, current: Incomplete | None = ...
    ): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addLightPathExcitationFilterLinkToBoth(self, link, bothSides): ...
    def findLightPathExcitationFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathExcitationFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def unloadDichroic(self): ...
    def getDichroic(self, current: None = ...) -> DichroicI: ...
    def setDichroic(
        self, _dichroic: DichroicI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def isEmissionFilterLinkLoaded(self): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def iterateEmissionFilterLink(self): ...
    def addLightPathEmissionFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllLightPathEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightPathEmissionFilterLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllLightPathEmissionFilterLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addLightPathEmissionFilterLinkToBoth(self, link, bothSides): ...
    def findLightPathEmissionFilterLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathEmissionFilterLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addLightPathAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightPathAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeLightPathAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllLightPathAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addLightPathAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightPathAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class LightPathAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class LightPathAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LightPathAnnotationLinkI(LightPathAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class LightPathEmissionFilterLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class LightPathEmissionFilterLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LightPathEmissionFilterLinkI(LightPathEmissionFilterLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class LightPathExcitationFilterLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class LightPathExcitationFilterLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LightPathExcitationFilterLinkI(LightPathExcitationFilterLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class LightSettings(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getAttenuation(self, current: Incomplete | None = ...): ...
    def setAttenuation(self, theAttenuation, current: Incomplete | None = ...): ...
    def getWavelength(self, current: Incomplete | None = ...): ...
    def setWavelength(self, theWavelength, current: Incomplete | None = ...): ...
    def getLightSource(self, current: Incomplete | None = ...): ...
    def setLightSource(self, theLightSource, current: Incomplete | None = ...): ...
    def getMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def setMicrobeamManipulation(
        self, theMicrobeamManipulation, current: Incomplete | None = ...
    ): ...

class LightSettingsPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getAttenuation(self, _ctx: Incomplete | None = ...): ...
    def setAttenuation(self, theAttenuation, _ctx: Incomplete | None = ...): ...
    def getWavelength(self, _ctx: Incomplete | None = ...): ...
    def setWavelength(self, theWavelength, _ctx: Incomplete | None = ...): ...
    def getLightSource(self, _ctx: Incomplete | None = ...): ...
    def setLightSource(self, theLightSource, _ctx: Incomplete | None = ...): ...
    def getMicrobeamManipulation(self, _ctx: Incomplete | None = ...): ...
    def setMicrobeamManipulation(
        self, theMicrobeamManipulation, _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LightSettingsI(LightSettings):
    ATTENUATION: ClassVar[str] = ...
    WAVELENGTH: ClassVar[str] = ...
    LIGHTSOURCE: ClassVar[str] = ...
    MICROBEAMMANIPULATION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadAttenuation(self): ...
    def getAttenuation(self, current: Incomplete | None = ...): ...
    def setAttenuation(
        self, _attenuation, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadWavelength(self): ...
    def getWavelength(self, current: Incomplete | None = ...): ...
    def setWavelength(
        self, _wavelength, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadLightSource(self): ...
    def getLightSource(self, current: Incomplete | None = ...): ...
    def setLightSource(
        self, _lightSource, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMicrobeamManipulation(self): ...
    def getMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def setMicrobeamManipulation(
        self, _microbeamManipulation, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class LightSourceAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class LightSourceAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LightSourceAnnotationLinkI(LightSourceAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class Line(Shape):
    def getX1(self, current: Incomplete | None = ...): ...
    def setX1(self, theX1, current: Incomplete | None = ...): ...
    def getY1(self, current: Incomplete | None = ...): ...
    def setY1(self, theY1, current: Incomplete | None = ...): ...
    def getX2(self, current: Incomplete | None = ...): ...
    def setX2(self, theX2, current: Incomplete | None = ...): ...
    def getY2(self, current: Incomplete | None = ...): ...
    def setY2(self, theY2, current: Incomplete | None = ...): ...
    def getMarkerStart(self, current: Incomplete | None = ...): ...
    def setMarkerStart(self, theMarkerStart, current: Incomplete | None = ...): ...
    def getMarkerEnd(self, current: Incomplete | None = ...): ...
    def setMarkerEnd(self, theMarkerEnd, current: Incomplete | None = ...): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, current: None = ...): ...

class LinePrx(ShapePrx):
    def getX1(self, _ctx: Incomplete | None = ...): ...
    def setX1(self, theX1, _ctx: Incomplete | None = ...): ...
    def getY1(self, _ctx: Incomplete | None = ...): ...
    def setY1(self, theY1, _ctx: Incomplete | None = ...): ...
    def getX2(self, _ctx: Incomplete | None = ...): ...
    def setX2(self, theX2, _ctx: Incomplete | None = ...): ...
    def getY2(self, _ctx: Incomplete | None = ...): ...
    def setY2(self, theY2, _ctx: Incomplete | None = ...): ...
    def getMarkerStart(self, _ctx: Incomplete | None = ...): ...
    def setMarkerStart(self, theMarkerStart, _ctx: Incomplete | None = ...): ...
    def getMarkerEnd(self, _ctx: Incomplete | None = ...): ...
    def setMarkerEnd(self, theMarkerEnd, _ctx: Incomplete | None = ...): ...
    def getTextValue(self, _ctx: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LineI(Line):
    X1: ClassVar[str] = ...
    Y1: ClassVar[str] = ...
    X2: ClassVar[str] = ...
    Y2: ClassVar[str] = ...
    MARKERSTART: ClassVar[str] = ...
    MARKEREND: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadX1(self): ...
    def getX1(self, current: Incomplete | None = ...): ...
    def setX1(self, _x1, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY1(self): ...
    def getY1(self, current: Incomplete | None = ...): ...
    def setY1(self, _y1, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadX2(self): ...
    def getX2(self, current: Incomplete | None = ...): ...
    def setX2(self, _x2, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY2(self): ...
    def getY2(self, current: Incomplete | None = ...): ...
    def setY2(self, _y2, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMarkerStart(self): ...
    def getMarkerStart(self, current: Incomplete | None = ...): ...
    def setMarkerStart(
        self, _markerStart, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMarkerEnd(self): ...
    def getMarkerEnd(self, current: Incomplete | None = ...): ...
    def setMarkerEnd(
        self, _markerEnd, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(
        self, _locked, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(
        self, _transform, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(
        self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(
        self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(
        self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(
        self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(
        self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(
        self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(
        self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(
        self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Link(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...

class LinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LinkI(Link):
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...

class ListAnnotation(Annotation): ...

class ListAnnotationPrx(AnnotationPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ListAnnotationI(ListAnnotation):
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class LogicalChannel(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getPinHoleSize(self, current: None = ...) -> LengthI: ...
    def setPinHoleSize(self, thePinHoleSize: LengthI, current: None = ...): ...
    def getIllumination(self, current: None = ...) -> IlluminationI: ...
    def setIllumination(self, theIllumination: IlluminationI, current: None = ...): ...
    def getContrastMethod(self, current: Incomplete | None = ...): ...
    def setContrastMethod(
        self, theContrastMethod, current: Incomplete | None = ...
    ): ...
    def getExcitationWave(self, current: None = ...) -> LengthI: ...
    def setExcitationWave(self, theExcitationWave: LengthI, current: None = ...): ...
    def getEmissionWave(self, current: Incomplete | None = ...): ...
    def setEmissionWave(self, theEmissionWave, current: Incomplete | None = ...): ...
    def getFluor(self, current: None = ...) -> RStringI: ...
    def setFluor(self, theFluor: RStringI, current: None = ...): ...
    def getNdFilter(self, current: Incomplete | None = ...): ...
    def setNdFilter(self, theNdFilter, current: Incomplete | None = ...): ...
    def getOtf(self, current: Incomplete | None = ...): ...
    def setOtf(self, theOtf, current: Incomplete | None = ...): ...
    def getDetectorSettings(self, current: None = ...) -> DetectorSettingsI: ...
    def setDetectorSettings(
        self, theDetectorSettings: DetectorSettingsI, current: None = ...
    ): ...
    def getLightSourceSettings(self, current: Incomplete | None = ...): ...
    def setLightSourceSettings(
        self, theLightSourceSettings, current: Incomplete | None = ...
    ): ...
    def getFilterSet(self, current: Incomplete | None = ...): ...
    def setFilterSet(self, theFilterSet, current: Incomplete | None = ...): ...
    def getSamplesPerPixel(self, current: Incomplete | None = ...): ...
    def setSamplesPerPixel(
        self, theSamplesPerPixel, current: Incomplete | None = ...
    ): ...
    def getPhotometricInterpretation(self, current: Incomplete | None = ...): ...
    def setPhotometricInterpretation(
        self, thePhotometricInterpretation, current: Incomplete | None = ...
    ): ...
    def getMode(self, current: Incomplete | None = ...): ...
    def setMode(self, theMode, current: Incomplete | None = ...): ...
    def getPockelCellSetting(self, current: Incomplete | None = ...): ...
    def setPockelCellSetting(
        self, thePockelCellSetting, current: Incomplete | None = ...
    ): ...
    def unloadChannels(self, current: Incomplete | None = ...): ...
    def sizeOfChannels(self, current: None = ...) -> int: ...
    def copyChannels(self, current: Incomplete | None = ...): ...
    def addChannel(self, target: ChannelI, current: None = ...): ...
    def addAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannel(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def clearChannels(self, current: Incomplete | None = ...): ...
    def reloadChannels(self, toCopy, current: Incomplete | None = ...): ...
    def getLightPath(self, current: None = ...) -> LightPathI: ...
    def setLightPath(self, theLightPath: LightPathI, current: None = ...): ...

class LogicalChannelPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getPinHoleSize(self, _ctx: None = ...) -> LengthI: ...
    def setPinHoleSize(self, thePinHoleSize: LengthI, _ctx: None = ...): ...
    def getIllumination(self, _ctx: None = ...) -> IlluminationI: ...
    def setIllumination(self, theIllumination: IlluminationI, _ctx: None = ...): ...
    def getContrastMethod(self, _ctx: Incomplete | None = ...): ...
    def setContrastMethod(self, theContrastMethod, _ctx: Incomplete | None = ...): ...
    def getExcitationWave(self, _ctx: None = ...) -> LengthI: ...
    def setExcitationWave(self, theExcitationWave: LengthI, _ctx: None = ...): ...
    def getEmissionWave(self, _ctx: Incomplete | None = ...): ...
    def setEmissionWave(self, theEmissionWave, _ctx: Incomplete | None = ...): ...
    def getFluor(self, _ctx: None = ...) -> RStringI: ...
    def setFluor(self, theFluor: RStringI, _ctx: None = ...): ...
    def getNdFilter(self, _ctx: Incomplete | None = ...): ...
    def setNdFilter(self, theNdFilter, _ctx: Incomplete | None = ...): ...
    def getOtf(self, _ctx: Incomplete | None = ...): ...
    def setOtf(self, theOtf, _ctx: Incomplete | None = ...): ...
    def getDetectorSettings(self, _ctx: None = ...) -> DetectorSettingsI: ...
    def setDetectorSettings(
        self, theDetectorSettings: DetectorSettingsI, _ctx: None = ...
    ): ...
    def getLightSourceSettings(self, _ctx: Incomplete | None = ...): ...
    def setLightSourceSettings(
        self, theLightSourceSettings, _ctx: Incomplete | None = ...
    ): ...
    def getFilterSet(self, _ctx: Incomplete | None = ...): ...
    def setFilterSet(self, theFilterSet, _ctx: Incomplete | None = ...): ...
    def getSamplesPerPixel(self, _ctx: Incomplete | None = ...): ...
    def setSamplesPerPixel(self, theSamplesPerPixel, _ctx: Incomplete | None = ...): ...
    def getPhotometricInterpretation(self, _ctx: Incomplete | None = ...): ...
    def setPhotometricInterpretation(
        self, thePhotometricInterpretation, _ctx: Incomplete | None = ...
    ): ...
    def getMode(self, _ctx: Incomplete | None = ...): ...
    def setMode(self, theMode, _ctx: Incomplete | None = ...): ...
    def getPockelCellSetting(self, _ctx: Incomplete | None = ...): ...
    def setPockelCellSetting(
        self, thePockelCellSetting, _ctx: Incomplete | None = ...
    ): ...
    def unloadChannels(self, _ctx: Incomplete | None = ...): ...
    def sizeOfChannels(self, _ctx: None = ...) -> int: ...
    def copyChannels(self, _ctx: Incomplete | None = ...): ...
    def addChannel(self, target: ChannelI, _ctx: None = ...): ...
    def addAllChannelSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeChannel(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllChannelSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearChannels(self, _ctx: Incomplete | None = ...): ...
    def reloadChannels(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getLightPath(self, _ctx: None = ...) -> LightPathI: ...
    def setLightPath(self, theLightPath: LightPathI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LogicalChannelI(LogicalChannel):
    NAME: ClassVar[str] = ...
    PINHOLESIZE: ClassVar[str] = ...
    ILLUMINATION: ClassVar[str] = ...
    CONTRASTMETHOD: ClassVar[str] = ...
    EXCITATIONWAVE: ClassVar[str] = ...
    EMISSIONWAVE: ClassVar[str] = ...
    FLUOR: ClassVar[str] = ...
    NDFILTER: ClassVar[str] = ...
    OTF: ClassVar[str] = ...
    DETECTORSETTINGS: ClassVar[str] = ...
    LIGHTSOURCESETTINGS: ClassVar[str] = ...
    FILTERSET: ClassVar[str] = ...
    SAMPLESPERPIXEL: ClassVar[str] = ...
    PHOTOMETRICINTERPRETATION: ClassVar[str] = ...
    MODE: ClassVar[str] = ...
    POCKELCELLSETTING: ClassVar[str] = ...
    CHANNELS: ClassVar[str] = ...
    LIGHTPATH: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadPinHoleSize(self): ...
    def getPinHoleSize(self, current: None = ...) -> LengthI: ...
    def setPinHoleSize(
        self, _pinHoleSize: LengthI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadIllumination(self): ...
    def getIllumination(self, current: None = ...) -> IlluminationI: ...
    def setIllumination(
        self, _illumination: IlluminationI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadContrastMethod(self): ...
    def getContrastMethod(self, current: Incomplete | None = ...): ...
    def setContrastMethod(
        self, _contrastMethod, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadExcitationWave(self): ...
    def getExcitationWave(self, current: None = ...) -> LengthI: ...
    def setExcitationWave(
        self, _excitationWave: LengthI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadEmissionWave(self): ...
    def getEmissionWave(self, current: Incomplete | None = ...): ...
    def setEmissionWave(
        self, _emissionWave, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFluor(self): ...
    def getFluor(self, current: None = ...) -> RStringI: ...
    def setFluor(self, _fluor: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadNdFilter(self): ...
    def getNdFilter(self, current: Incomplete | None = ...): ...
    def setNdFilter(
        self, _ndFilter, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadOtf(self): ...
    def getOtf(self, current: Incomplete | None = ...): ...
    def setOtf(self, _otf, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDetectorSettings(self): ...
    def getDetectorSettings(self, current: None = ...) -> DetectorSettingsI: ...
    def setDetectorSettings(
        self,
        _detectorSettings: DetectorSettingsI,
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadLightSourceSettings(self): ...
    def getLightSourceSettings(self, current: Incomplete | None = ...): ...
    def setLightSourceSettings(
        self, _lightSourceSettings, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFilterSet(self): ...
    def getFilterSet(self, current: Incomplete | None = ...): ...
    def setFilterSet(
        self, _filterSet, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSamplesPerPixel(self): ...
    def getSamplesPerPixel(self, current: Incomplete | None = ...): ...
    def setSamplesPerPixel(
        self, _samplesPerPixel, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPhotometricInterpretation(self): ...
    def getPhotometricInterpretation(self, current: Incomplete | None = ...): ...
    def setPhotometricInterpretation(
        self,
        _photometricInterpretation,
        current: Incomplete | None = ...,
        wrap: bool = ...,
    ): ...
    def unloadMode(self): ...
    def getMode(self, current: Incomplete | None = ...): ...
    def setMode(self, _mode, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPockelCellSetting(self): ...
    def getPockelCellSetting(self, current: Incomplete | None = ...): ...
    def setPockelCellSetting(
        self, _pockelCellSetting, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadChannels(self, current: Incomplete | None = ...): ...
    def isChannelsLoaded(self): ...
    def sizeOfChannels(self, current: None = ...) -> int: ...
    def copyChannels(self, current: Incomplete | None = ...): ...
    def iterateChannels(self): ...
    def addChannel(self, target: ChannelI, current: None = ...): ...
    def addAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannel(self, target, current: Incomplete | None = ...): ...
    def removeAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def clearChannels(self, current: Incomplete | None = ...): ...
    def reloadChannels(self, toCopy, current: Incomplete | None = ...): ...
    def unloadLightPath(self): ...
    def getLightPath(self, current: None = ...) -> LightPathI: ...
    def setLightPath(
        self, _lightPath: LightPathI, current: None = ..., wrap: bool = ...
    ): ...

class LongAnnotation(NumericAnnotation):
    def getLongValue(self, current: Incomplete | None = ...): ...
    def setLongValue(self, theLongValue, current: Incomplete | None = ...): ...

class LongAnnotationPrx(NumericAnnotationPrx):
    def getLongValue(self, _ctx: Incomplete | None = ...): ...
    def setLongValue(self, theLongValue, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LongAnnotationI(LongAnnotation):
    LONGVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadLongValue(self): ...
    def getLongValue(self, current: Incomplete | None = ...): ...
    def setLongValue(
        self, _longValue, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class MapAnnotation(Annotation):
    def getMapValueAsMap(self, current: Incomplete | None = ...): ...
    def getMapValue(self, current: None = ...) -> Optional[List[NamedValue]]: ...
    def setMapValue(self, theMapValue: List[NamedValue], current: None = ...): ...

class MapAnnotationPrx(AnnotationPrx):
    def getMapValueAsMap(self, _ctx: Incomplete | None = ...): ...
    def getMapValue(self, _ctx: None = ...) -> Optional[List[NamedValue]]: ...
    def setMapValue(self, theMapValue: List[NamedValue], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class MapAnnotationI(MapAnnotation):
    MAPVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadMapValue(self): ...
    def getMapValue(self, current: None = ...) -> Optional[List[NamedValue]]: ...
    def setMapValue(
        self, _mapValue: List[NamedValue], current: None = ..., wrap: bool = ...
    ): ...
    def getMapValueAsMap(self, current: Incomplete | None = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Mask(Shape):
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, theX, current: Incomplete | None = ...): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, theY, current: Incomplete | None = ...): ...
    def getWidth(self, current: Incomplete | None = ...): ...
    def setWidth(self, theWidth, current: Incomplete | None = ...): ...
    def getHeight(self, current: Incomplete | None = ...): ...
    def setHeight(self, theHeight, current: Incomplete | None = ...): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, thePixels: PixelsI, current: None = ...): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, current: None = ...): ...
    def getBytes(self, current: Incomplete | None = ...): ...
    def setBytes(self, theBytes, current: Incomplete | None = ...): ...

class MaskPrx(ShapePrx):
    def getX(self, _ctx: Incomplete | None = ...): ...
    def setX(self, theX, _ctx: Incomplete | None = ...): ...
    def getY(self, _ctx: Incomplete | None = ...): ...
    def setY(self, theY, _ctx: Incomplete | None = ...): ...
    def getWidth(self, _ctx: Incomplete | None = ...): ...
    def setWidth(self, theWidth, _ctx: Incomplete | None = ...): ...
    def getHeight(self, _ctx: Incomplete | None = ...): ...
    def setHeight(self, theHeight, _ctx: Incomplete | None = ...): ...
    def getPixels(self, _ctx: Incomplete | None = ...): ...
    def setPixels(self, thePixels: PixelsI, _ctx: None = ...): ...
    def getTextValue(self, _ctx: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, _ctx: None = ...): ...
    def getBytes(self, _ctx: Incomplete | None = ...): ...
    def setBytes(self, theBytes, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class MaskI(Mask):
    X: ClassVar[str] = ...
    Y: ClassVar[str] = ...
    WIDTH: ClassVar[str] = ...
    HEIGHT: ClassVar[str] = ...
    PIXELS: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    BYTES: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadX(self): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, _x, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY(self): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, _y, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWidth(self): ...
    def getWidth(self, current: Incomplete | None = ...): ...
    def setWidth(self, _width, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadHeight(self): ...
    def getHeight(self, current: Incomplete | None = ...): ...
    def setHeight(
        self, _height, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPixels(self): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, _pixels: PixelsI, current: None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadBytes(self): ...
    def getBytes(self, current: Incomplete | None = ...): ...
    def setBytes(self, _bytes, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(
        self, _locked, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(
        self, _transform, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(
        self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(
        self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(
        self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(
        self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(
        self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(
        self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(
        self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(
        self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Medium(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class MediumPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class MediumI(Medium):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class MetadataImportJob(Job):
    def getVersionInfoAsMap(self, current: Incomplete | None = ...): ...
    def getVersionInfo(self, current: Incomplete | None = ...): ...
    def setVersionInfo(self, theVersionInfo, current: Incomplete | None = ...): ...

class MetadataImportJobPrx(JobPrx):
    def getVersionInfoAsMap(self, _ctx: Incomplete | None = ...): ...
    def getVersionInfo(self, _ctx: Incomplete | None = ...): ...
    def setVersionInfo(self, theVersionInfo, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class MetadataImportJobI(MetadataImportJob):
    VERSIONINFO: ClassVar[str] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadVersionInfo(self): ...
    def getVersionInfo(self, current: Incomplete | None = ...): ...
    def setVersionInfo(
        self, _versionInfo, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getVersionInfoAsMap(self, current: Incomplete | None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(
        self, _username, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(
        self, _groupname, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(
        self, _submitted, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(
        self, _scheduledFor: RTimeI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(
        self, _finished, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: None = ...) -> int: ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class MicrobeamManipulation(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def unloadLightSourceSettings(self, current: Incomplete | None = ...): ...
    def sizeOfLightSourceSettings(self, current: Incomplete | None = ...): ...
    def copyLightSourceSettings(self, current: Incomplete | None = ...): ...
    def addLightSettings(self, target, current: Incomplete | None = ...): ...
    def addAllLightSettingsSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSettings(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllLightSettingsSet(self, targets, current: Incomplete | None = ...): ...
    def clearLightSourceSettings(self, current: Incomplete | None = ...): ...
    def reloadLightSourceSettings(self, toCopy, current: Incomplete | None = ...): ...
    def getExperiment(self, current: Incomplete | None = ...): ...
    def setExperiment(self, theExperiment, current: Incomplete | None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class MicrobeamManipulationPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def unloadLightSourceSettings(self, _ctx: Incomplete | None = ...): ...
    def sizeOfLightSourceSettings(self, _ctx: Incomplete | None = ...): ...
    def copyLightSourceSettings(self, _ctx: Incomplete | None = ...): ...
    def addLightSettings(self, target, _ctx: Incomplete | None = ...): ...
    def addAllLightSettingsSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeLightSettings(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllLightSettingsSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearLightSourceSettings(self, _ctx: Incomplete | None = ...): ...
    def reloadLightSourceSettings(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getExperiment(self, _ctx: Incomplete | None = ...): ...
    def setExperiment(self, theExperiment, _ctx: Incomplete | None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class MicrobeamManipulationI(MicrobeamManipulation):
    TYPE: ClassVar[str] = ...
    LIGHTSOURCESETTINGS: ClassVar[str] = ...
    EXPERIMENT: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLightSourceSettings(self, current: Incomplete | None = ...): ...
    def isLightSourceSettingsLoaded(self): ...
    def sizeOfLightSourceSettings(self, current: Incomplete | None = ...): ...
    def copyLightSourceSettings(self, current: Incomplete | None = ...): ...
    def iterateLightSourceSettings(self): ...
    def addLightSettings(self, target, current: Incomplete | None = ...): ...
    def addAllLightSettingsSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSettings(self, target, current: Incomplete | None = ...): ...
    def removeAllLightSettingsSet(self, targets, current: Incomplete | None = ...): ...
    def clearLightSourceSettings(self, current: Incomplete | None = ...): ...
    def reloadLightSourceSettings(self, toCopy, current: Incomplete | None = ...): ...
    def unloadExperiment(self): ...
    def getExperiment(self, current: Incomplete | None = ...): ...
    def setExperiment(
        self, _experiment, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class MicrobeamManipulationType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class MicrobeamManipulationTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class MicrobeamManipulationTypeI(MicrobeamManipulationType):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Microscope(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, current: None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...

class MicroscopePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def getModel(self, _ctx: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, _ctx: None = ...): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class MicroscopeI(Microscope):
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...

class MicroscopeType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class MicroscopeTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class MicroscopeTypeI(MicroscopeType):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Namespace(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getKeywords(self, current: Incomplete | None = ...): ...
    def setKeywords(self, theKeywords, current: Incomplete | None = ...): ...
    def getMultivalued(self, current: Incomplete | None = ...): ...
    def setMultivalued(self, theMultivalued, current: Incomplete | None = ...): ...
    def getDisplay(self, current: Incomplete | None = ...): ...
    def setDisplay(self, theDisplay, current: Incomplete | None = ...): ...
    def getDisplayName(self, current: Incomplete | None = ...): ...
    def setDisplayName(self, theDisplayName, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addNamespaceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllNamespaceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeNamespaceAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllNamespaceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addNamespaceAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findNamespaceAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeNamespaceAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class NamespacePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getKeywords(self, _ctx: Incomplete | None = ...): ...
    def setKeywords(self, theKeywords, _ctx: Incomplete | None = ...): ...
    def getMultivalued(self, _ctx: Incomplete | None = ...): ...
    def setMultivalued(self, theMultivalued, _ctx: Incomplete | None = ...): ...
    def getDisplay(self, _ctx: Incomplete | None = ...): ...
    def setDisplay(self, theDisplay, _ctx: Incomplete | None = ...): ...
    def getDisplayName(self, _ctx: Incomplete | None = ...): ...
    def setDisplayName(self, theDisplayName, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addNamespaceAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllNamespaceAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeNamespaceAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllNamespaceAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addNamespaceAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findNamespaceAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeNamespaceAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class NamespaceI(Namespace):
    KEYWORDS: ClassVar[str] = ...
    MULTIVALUED: ClassVar[str] = ...
    DISPLAY: ClassVar[str] = ...
    DISPLAYNAME: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadKeywords(self): ...
    def getKeywords(self, current: Incomplete | None = ...): ...
    def setKeywords(
        self, _keywords, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMultivalued(self): ...
    def getMultivalued(self, current: Incomplete | None = ...): ...
    def setMultivalued(
        self, _multivalued, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadDisplay(self): ...
    def getDisplay(self, current: Incomplete | None = ...): ...
    def setDisplay(
        self, _display, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadDisplayName(self): ...
    def getDisplayName(self, current: Incomplete | None = ...): ...
    def setDisplayName(
        self, _displayName, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addNamespaceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllNamespaceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeNamespaceAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllNamespaceAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addNamespaceAnnotationLinkToBoth(self, link, bothSides): ...
    def findNamespaceAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeNamespaceAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class NamespaceAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class NamespaceAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class NamespaceAnnotationLinkI(NamespaceAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class Node(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def unloadSessions(self, current: Incomplete | None = ...): ...
    def sizeOfSessions(self, current: Incomplete | None = ...): ...
    def copySessions(self, current: Incomplete | None = ...): ...
    def addSession(self, target, current: Incomplete | None = ...): ...
    def addAllSessionSet(self, targets, current: Incomplete | None = ...): ...
    def removeSession(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllSessionSet(self, targets, current: Incomplete | None = ...): ...
    def clearSessions(self, current: Incomplete | None = ...): ...
    def reloadSessions(self, toCopy, current: Incomplete | None = ...): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, theUuid, current: Incomplete | None = ...): ...
    def getConn(self, current: Incomplete | None = ...): ...
    def setConn(self, theConn, current: Incomplete | None = ...): ...
    def getUp(self, current: Incomplete | None = ...): ...
    def setUp(self, theUp, current: Incomplete | None = ...): ...
    def getDown(self, current: Incomplete | None = ...): ...
    def setDown(self, theDown, current: Incomplete | None = ...): ...
    def getScale(self, current: Incomplete | None = ...): ...
    def setScale(self, theScale, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addNodeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllNodeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeNodeAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllNodeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addNodeAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findNodeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeNodeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class NodePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def unloadSessions(self, _ctx: Incomplete | None = ...): ...
    def sizeOfSessions(self, _ctx: Incomplete | None = ...): ...
    def copySessions(self, _ctx: Incomplete | None = ...): ...
    def addSession(self, target, _ctx: Incomplete | None = ...): ...
    def addAllSessionSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeSession(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllSessionSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearSessions(self, _ctx: Incomplete | None = ...): ...
    def reloadSessions(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getUuid(self, _ctx: Incomplete | None = ...): ...
    def setUuid(self, theUuid, _ctx: Incomplete | None = ...): ...
    def getConn(self, _ctx: Incomplete | None = ...): ...
    def setConn(self, theConn, _ctx: Incomplete | None = ...): ...
    def getUp(self, _ctx: Incomplete | None = ...): ...
    def setUp(self, theUp, _ctx: Incomplete | None = ...): ...
    def getDown(self, _ctx: Incomplete | None = ...): ...
    def setDown(self, theDown, _ctx: Incomplete | None = ...): ...
    def getScale(self, _ctx: Incomplete | None = ...): ...
    def setScale(self, theScale, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addNodeAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllNodeAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeNodeAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllNodeAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addNodeAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findNodeAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeNodeAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class NodeI(Node):
    SESSIONS: ClassVar[str] = ...
    UUID: ClassVar[str] = ...
    CONN: ClassVar[str] = ...
    UP: ClassVar[str] = ...
    DOWN: ClassVar[str] = ...
    SCALE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadSessions(self, current: Incomplete | None = ...): ...
    def isSessionsLoaded(self): ...
    def sizeOfSessions(self, current: Incomplete | None = ...): ...
    def copySessions(self, current: Incomplete | None = ...): ...
    def iterateSessions(self): ...
    def addSession(self, target, current: Incomplete | None = ...): ...
    def addAllSessionSet(self, targets, current: Incomplete | None = ...): ...
    def removeSession(self, target, current: Incomplete | None = ...): ...
    def removeAllSessionSet(self, targets, current: Incomplete | None = ...): ...
    def clearSessions(self, current: Incomplete | None = ...): ...
    def reloadSessions(self, toCopy, current: Incomplete | None = ...): ...
    def unloadUuid(self): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, _uuid, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadConn(self): ...
    def getConn(self, current: Incomplete | None = ...): ...
    def setConn(self, _conn, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUp(self): ...
    def getUp(self, current: Incomplete | None = ...): ...
    def setUp(self, _up, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDown(self): ...
    def getDown(self, current: Incomplete | None = ...): ...
    def setDown(self, _down, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScale(self): ...
    def getScale(self, current: Incomplete | None = ...): ...
    def setScale(self, _scale, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addNodeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllNodeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeNodeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllNodeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addNodeAnnotationLinkToBoth(self, link, bothSides): ...
    def findNodeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeNodeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class NodeAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class NodeAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class NodeAnnotationLinkI(NodeAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class OTF(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getSizeX(self, current: None = ...) -> RIntI: ...
    def setSizeX(self, theSizeX: RIntI, current: None = ...): ...
    def getSizeY(self, current: None = ...) -> RIntI: ...
    def setSizeY(self, theSizeY: RIntI, current: None = ...): ...
    def getOpticalAxisAveraged(self, current: Incomplete | None = ...): ...
    def setOpticalAxisAveraged(
        self, theOpticalAxisAveraged, current: Incomplete | None = ...
    ): ...
    def getPixelsType(self, current: Incomplete | None = ...): ...
    def setPixelsType(self, thePixelsType, current: Incomplete | None = ...): ...
    def getPath(self, current: Incomplete | None = ...): ...
    def setPath(self, thePath: RStringI, current: None = ...): ...
    def getFilterSet(self, current: Incomplete | None = ...): ...
    def setFilterSet(self, theFilterSet, current: Incomplete | None = ...): ...
    def getObjective(self, current: Incomplete | None = ...): ...
    def setObjective(self, theObjective, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...

class OTFPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getSizeX(self, _ctx: None = ...) -> RIntI: ...
    def setSizeX(self, theSizeX: RIntI, _ctx: None = ...): ...
    def getSizeY(self, _ctx: None = ...) -> RIntI: ...
    def setSizeY(self, theSizeY: RIntI, _ctx: None = ...): ...
    def getOpticalAxisAveraged(self, _ctx: Incomplete | None = ...): ...
    def setOpticalAxisAveraged(
        self, theOpticalAxisAveraged, _ctx: Incomplete | None = ...
    ): ...
    def getPixelsType(self, _ctx: Incomplete | None = ...): ...
    def setPixelsType(self, thePixelsType, _ctx: Incomplete | None = ...): ...
    def getPath(self, _ctx: Incomplete | None = ...): ...
    def setPath(self, thePath: RStringI, _ctx: None = ...): ...
    def getFilterSet(self, _ctx: Incomplete | None = ...): ...
    def setFilterSet(self, theFilterSet, _ctx: Incomplete | None = ...): ...
    def getObjective(self, _ctx: Incomplete | None = ...): ...
    def setObjective(self, theObjective, _ctx: Incomplete | None = ...): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class OTFI(OTF):
    SIZEX: ClassVar[str] = ...
    SIZEY: ClassVar[str] = ...
    OPTICALAXISAVERAGED: ClassVar[str] = ...
    PIXELSTYPE: ClassVar[str] = ...
    PATH: ClassVar[str] = ...
    FILTERSET: ClassVar[str] = ...
    OBJECTIVE: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadSizeX(self): ...
    def getSizeX(self, current: None = ...) -> RIntI: ...
    def setSizeX(self, _sizeX: RIntI, current: None = ..., wrap: bool = ...): ...
    def unloadSizeY(self): ...
    def getSizeY(self, current: None = ...) -> RIntI: ...
    def setSizeY(self, _sizeY: RIntI, current: None = ..., wrap: bool = ...): ...
    def unloadOpticalAxisAveraged(self): ...
    def getOpticalAxisAveraged(self, current: Incomplete | None = ...): ...
    def setOpticalAxisAveraged(
        self, _opticalAxisAveraged, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPixelsType(self): ...
    def getPixelsType(self, current: Incomplete | None = ...): ...
    def setPixelsType(
        self, _pixelsType, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPath(self): ...
    def getPath(self, current: Incomplete | None = ...): ...
    def setPath(self, _path: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadFilterSet(self): ...
    def getFilterSet(self, current: Incomplete | None = ...): ...
    def setFilterSet(
        self, _filterSet, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadObjective(self): ...
    def getObjective(self, current: Incomplete | None = ...): ...
    def setObjective(
        self, _objective, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class Objective(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, current: None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getNominalMagnification(self, current: Incomplete | None = ...): ...
    def setNominalMagnification(
        self, theNominalMagnification, current: Incomplete | None = ...
    ): ...
    def getCalibratedMagnification(self, current: Incomplete | None = ...): ...
    def setCalibratedMagnification(
        self, theCalibratedMagnification, current: Incomplete | None = ...
    ): ...
    def getLensNA(self, current: Incomplete | None = ...): ...
    def setLensNA(self, theLensNA, current: Incomplete | None = ...): ...
    def getImmersion(self, current: Incomplete | None = ...): ...
    def setImmersion(self, theImmersion, current: Incomplete | None = ...): ...
    def getCorrection(self, current: Incomplete | None = ...): ...
    def setCorrection(self, theCorrection, current: Incomplete | None = ...): ...
    def getWorkingDistance(self, current: Incomplete | None = ...): ...
    def setWorkingDistance(
        self, theWorkingDistance, current: Incomplete | None = ...
    ): ...
    def getIris(self, current: Incomplete | None = ...): ...
    def setIris(self, theIris, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addObjectiveAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllObjectiveAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeObjectiveAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllObjectiveAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addObjectiveAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findObjectiveAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeObjectiveAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ObjectivePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def getModel(self, _ctx: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, _ctx: None = ...): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def getNominalMagnification(self, _ctx: Incomplete | None = ...): ...
    def setNominalMagnification(
        self, theNominalMagnification, _ctx: Incomplete | None = ...
    ): ...
    def getCalibratedMagnification(self, _ctx: Incomplete | None = ...): ...
    def setCalibratedMagnification(
        self, theCalibratedMagnification, _ctx: Incomplete | None = ...
    ): ...
    def getLensNA(self, _ctx: Incomplete | None = ...): ...
    def setLensNA(self, theLensNA, _ctx: Incomplete | None = ...): ...
    def getImmersion(self, _ctx: Incomplete | None = ...): ...
    def setImmersion(self, theImmersion, _ctx: Incomplete | None = ...): ...
    def getCorrection(self, _ctx: Incomplete | None = ...): ...
    def setCorrection(self, theCorrection, _ctx: Incomplete | None = ...): ...
    def getWorkingDistance(self, _ctx: Incomplete | None = ...): ...
    def setWorkingDistance(self, theWorkingDistance, _ctx: Incomplete | None = ...): ...
    def getIris(self, _ctx: Incomplete | None = ...): ...
    def setIris(self, theIris, _ctx: Incomplete | None = ...): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addObjectiveAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllObjectiveAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeObjectiveAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllObjectiveAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addObjectiveAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findObjectiveAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeObjectiveAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ObjectiveI(Objective):
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    NOMINALMAGNIFICATION: ClassVar[str] = ...
    CALIBRATEDMAGNIFICATION: ClassVar[str] = ...
    LENSNA: ClassVar[str] = ...
    IMMERSION: ClassVar[str] = ...
    CORRECTION: ClassVar[str] = ...
    WORKINGDISTANCE: ClassVar[str] = ...
    IRIS: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(
        self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(
        self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(
        self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadNominalMagnification(self): ...
    def getNominalMagnification(self, current: Incomplete | None = ...): ...
    def setNominalMagnification(
        self, _nominalMagnification, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadCalibratedMagnification(self): ...
    def getCalibratedMagnification(self, current: Incomplete | None = ...): ...
    def setCalibratedMagnification(
        self,
        _calibratedMagnification,
        current: Incomplete | None = ...,
        wrap: bool = ...,
    ): ...
    def unloadLensNA(self): ...
    def getLensNA(self, current: Incomplete | None = ...): ...
    def setLensNA(
        self, _lensNA, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadImmersion(self): ...
    def getImmersion(self, current: Incomplete | None = ...): ...
    def setImmersion(
        self, _immersion, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadCorrection(self): ...
    def getCorrection(self, current: Incomplete | None = ...): ...
    def setCorrection(
        self, _correction, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadWorkingDistance(self): ...
    def getWorkingDistance(self, current: Incomplete | None = ...): ...
    def setWorkingDistance(
        self, _workingDistance, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadIris(self): ...
    def getIris(self, current: Incomplete | None = ...): ...
    def setIris(self, _iris, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(
        self, _instrument, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addObjectiveAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllObjectiveAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeObjectiveAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllObjectiveAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addObjectiveAnnotationLinkToBoth(self, link, bothSides): ...
    def findObjectiveAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeObjectiveAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ObjectiveAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ObjectiveAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ObjectiveAnnotationLinkI(ObjectiveAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ObjectiveSettings(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getCorrectionCollar(self, current: Incomplete | None = ...): ...
    def setCorrectionCollar(
        self, theCorrectionCollar, current: Incomplete | None = ...
    ): ...
    def getMedium(self, current: Incomplete | None = ...): ...
    def setMedium(self, theMedium, current: Incomplete | None = ...): ...
    def getRefractiveIndex(self, current: Incomplete | None = ...): ...
    def setRefractiveIndex(
        self, theRefractiveIndex, current: Incomplete | None = ...
    ): ...
    def getObjective(self, current: Incomplete | None = ...): ...
    def setObjective(self, theObjective, current: Incomplete | None = ...): ...

class ObjectiveSettingsPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getCorrectionCollar(self, _ctx: Incomplete | None = ...): ...
    def setCorrectionCollar(
        self, theCorrectionCollar, _ctx: Incomplete | None = ...
    ): ...
    def getMedium(self, _ctx: Incomplete | None = ...): ...
    def setMedium(self, theMedium, _ctx: Incomplete | None = ...): ...
    def getRefractiveIndex(self, _ctx: Incomplete | None = ...): ...
    def setRefractiveIndex(self, theRefractiveIndex, _ctx: Incomplete | None = ...): ...
    def getObjective(self, _ctx: Incomplete | None = ...): ...
    def setObjective(self, theObjective, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ObjectiveSettingsI(ObjectiveSettings):
    CORRECTIONCOLLAR: ClassVar[str] = ...
    MEDIUM: ClassVar[str] = ...
    REFRACTIVEINDEX: ClassVar[str] = ...
    OBJECTIVE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadCorrectionCollar(self): ...
    def getCorrectionCollar(self, current: Incomplete | None = ...): ...
    def setCorrectionCollar(
        self, _correctionCollar, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMedium(self): ...
    def getMedium(self, current: Incomplete | None = ...): ...
    def setMedium(
        self, _medium, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadRefractiveIndex(self): ...
    def getRefractiveIndex(self, current: Incomplete | None = ...): ...
    def setRefractiveIndex(
        self, _refractiveIndex, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadObjective(self): ...
    def getObjective(self, current: Incomplete | None = ...): ...
    def setObjective(
        self, _objective, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class OriginalFile(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def unloadPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def sizeOfPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def copyPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def addAllPixelsOriginalFileMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removePixelsOriginalFileMap(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllPixelsOriginalFileMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def reloadPixelsFileMaps(self, toCopy, current: Incomplete | None = ...): ...
    def getPixelsFileMapsCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkPixels(self, addition, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMapToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findPixelsOriginalFileMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkPixels(self, removal, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMapFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedPixelsList(self, current: Incomplete | None = ...): ...
    def getPath(self, current: Incomplete | None = ...): ...
    def setPath(self, thePath: RStringI, current: None = ...): ...
    def getRepo(self, current: Incomplete | None = ...): ...
    def setRepo(self, theRepo, current: Incomplete | None = ...): ...
    def getSize(self, current: Incomplete | None = ...): ...
    def setSize(self, theSize, current: Incomplete | None = ...): ...
    def getAtime(self, current: Incomplete | None = ...): ...
    def setAtime(self, theAtime, current: Incomplete | None = ...): ...
    def getMtime(self, current: Incomplete | None = ...): ...
    def setMtime(self, theMtime, current: Incomplete | None = ...): ...
    def getCtime(self, current: Incomplete | None = ...): ...
    def setCtime(self, theCtime, current: Incomplete | None = ...): ...
    def getHasher(self, current: Incomplete | None = ...): ...
    def setHasher(self, theHasher, current: Incomplete | None = ...): ...
    def getHash(self, current: Incomplete | None = ...): ...
    def setHash(self, theHash, current: Incomplete | None = ...): ...
    def getMimetype(self, current: Incomplete | None = ...): ...
    def setMimetype(self, theMimetype, current: Incomplete | None = ...): ...
    def unloadFilesetEntries(self, current: Incomplete | None = ...): ...
    def sizeOfFilesetEntries(self, current: Incomplete | None = ...): ...
    def copyFilesetEntries(self, current: Incomplete | None = ...): ...
    def addFilesetEntry(self, target: FilesetEntryI, current: None = ...): ...
    def addAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetEntry(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def clearFilesetEntries(self, current: Incomplete | None = ...): ...
    def reloadFilesetEntries(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addOriginalFileAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllOriginalFileAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeOriginalFileAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllOriginalFileAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addOriginalFileAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findOriginalFileAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeOriginalFileAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...

class OriginalFilePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def unloadPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def sizeOfPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def copyPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def addPixelsOriginalFileMap(self, target, _ctx: Incomplete | None = ...): ...
    def addAllPixelsOriginalFileMapSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removePixelsOriginalFileMap(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllPixelsOriginalFileMapSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def reloadPixelsFileMaps(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getPixelsFileMapsCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkPixels(self, addition, _ctx: Incomplete | None = ...): ...
    def addPixelsOriginalFileMapToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findPixelsOriginalFileMap(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkPixels(self, removal, _ctx: Incomplete | None = ...): ...
    def removePixelsOriginalFileMapFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedPixelsList(self, _ctx: Incomplete | None = ...): ...
    def getPath(self, _ctx: Incomplete | None = ...): ...
    def setPath(self, thePath: RStringI, _ctx: None = ...): ...
    def getRepo(self, _ctx: Incomplete | None = ...): ...
    def setRepo(self, theRepo, _ctx: Incomplete | None = ...): ...
    def getSize(self, _ctx: Incomplete | None = ...): ...
    def setSize(self, theSize, _ctx: Incomplete | None = ...): ...
    def getAtime(self, _ctx: Incomplete | None = ...): ...
    def setAtime(self, theAtime, _ctx: Incomplete | None = ...): ...
    def getMtime(self, _ctx: Incomplete | None = ...): ...
    def setMtime(self, theMtime, _ctx: Incomplete | None = ...): ...
    def getCtime(self, _ctx: Incomplete | None = ...): ...
    def setCtime(self, theCtime, _ctx: Incomplete | None = ...): ...
    def getHasher(self, _ctx: Incomplete | None = ...): ...
    def setHasher(self, theHasher, _ctx: Incomplete | None = ...): ...
    def getHash(self, _ctx: Incomplete | None = ...): ...
    def setHash(self, theHash, _ctx: Incomplete | None = ...): ...
    def getMimetype(self, _ctx: Incomplete | None = ...): ...
    def setMimetype(self, theMimetype, _ctx: Incomplete | None = ...): ...
    def unloadFilesetEntries(self, _ctx: Incomplete | None = ...): ...
    def sizeOfFilesetEntries(self, _ctx: Incomplete | None = ...): ...
    def copyFilesetEntries(self, _ctx: Incomplete | None = ...): ...
    def addFilesetEntry(self, target: FilesetEntryI, _ctx: None = ...): ...
    def addAllFilesetEntrySet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFilesetEntry(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFilesetEntrySet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearFilesetEntries(self, _ctx: Incomplete | None = ...): ...
    def reloadFilesetEntries(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addOriginalFileAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllOriginalFileAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeOriginalFileAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllOriginalFileAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addOriginalFileAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findOriginalFileAnnotationLink(
        self, removal, _ctx: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeOriginalFileAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class OriginalFileI(OriginalFile):
    PIXELSFILEMAPS: ClassVar[str] = ...
    PATH: ClassVar[str] = ...
    REPO: ClassVar[str] = ...
    SIZE: ClassVar[str] = ...
    ATIME: ClassVar[str] = ...
    MTIME: ClassVar[str] = ...
    CTIME: ClassVar[str] = ...
    HASHER: ClassVar[str] = ...
    HASH: ClassVar[str] = ...
    MIMETYPE: ClassVar[str] = ...
    FILESETENTRIES: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def isPixelsFileMapsLoaded(self): ...
    def sizeOfPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def copyPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def iteratePixelsFileMaps(self): ...
    def addPixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def addAllPixelsOriginalFileMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removePixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def removeAllPixelsOriginalFileMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def reloadPixelsFileMaps(self, toCopy, current: Incomplete | None = ...): ...
    def getPixelsFileMapsCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkPixels(self, addition, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMapToBoth(self, link, bothSides): ...
    def findPixelsOriginalFileMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkPixels(self, removal, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMapFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedPixelsList(self, current: Incomplete | None = ...): ...
    def unloadPath(self): ...
    def getPath(self, current: Incomplete | None = ...): ...
    def setPath(self, _path: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadRepo(self): ...
    def getRepo(self, current: Incomplete | None = ...): ...
    def setRepo(self, _repo, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSize(self): ...
    def getSize(self, current: Incomplete | None = ...): ...
    def setSize(self, _size, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAtime(self): ...
    def getAtime(self, current: Incomplete | None = ...): ...
    def setAtime(self, _atime, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMtime(self): ...
    def getMtime(self, current: Incomplete | None = ...): ...
    def setMtime(self, _mtime, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCtime(self): ...
    def getCtime(self, current: Incomplete | None = ...): ...
    def setCtime(self, _ctime, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadHasher(self): ...
    def getHasher(self, current: Incomplete | None = ...): ...
    def setHasher(
        self, _hasher, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadHash(self): ...
    def getHash(self, current: Incomplete | None = ...): ...
    def setHash(self, _hash, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMimetype(self): ...
    def getMimetype(self, current: Incomplete | None = ...): ...
    def setMimetype(
        self, _mimetype, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFilesetEntries(self, current: Incomplete | None = ...): ...
    def isFilesetEntriesLoaded(self): ...
    def sizeOfFilesetEntries(self, current: Incomplete | None = ...): ...
    def copyFilesetEntries(self, current: Incomplete | None = ...): ...
    def iterateFilesetEntries(self): ...
    def addFilesetEntry(self, target: FilesetEntryI, current: None = ...): ...
    def addAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetEntry(self, target, current: Incomplete | None = ...): ...
    def removeAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def clearFilesetEntries(self, current: Incomplete | None = ...): ...
    def reloadFilesetEntries(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addOriginalFileAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllOriginalFileAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeOriginalFileAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllOriginalFileAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addOriginalFileAnnotationLinkToBoth(self, link, bothSides): ...
    def findOriginalFileAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeOriginalFileAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class OriginalFileAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class OriginalFileAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class OriginalFileAnnotationLinkI(OriginalFileAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ParseJob(Job):
    def getParams(self, current: Incomplete | None = ...): ...
    def setParams(self, theParams, current: Incomplete | None = ...): ...

class ParseJobPrx(JobPrx):
    def getParams(self, _ctx: Incomplete | None = ...): ...
    def setParams(self, theParams, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ParseJobI(ParseJob):
    PARAMS: ClassVar[str] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParams(self): ...
    def getParams(self, current: Incomplete | None = ...): ...
    def setParams(
        self, _params, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(
        self, _username, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(
        self, _groupname, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(
        self, _submitted, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(
        self, _scheduledFor: RTimeI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(
        self, _finished, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: None = ...) -> int: ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class Path(Shape):
    def getD(self, current: Incomplete | None = ...): ...
    def setD(self, theD, current: Incomplete | None = ...): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, current: None = ...): ...

class PathPrx(ShapePrx):
    def getD(self, _ctx: Incomplete | None = ...): ...
    def setD(self, theD, _ctx: Incomplete | None = ...): ...
    def getTextValue(self, _ctx: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PathI(Path):
    deprecations_warned: ClassVar[set] = ...
    D: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    @staticmethod
    def warn_of_deprecation(item): ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadD(self): ...
    def getD(self, current: Incomplete | None = ...): ...
    def setD(self, _d, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(
        self, _locked, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(
        self, _transform, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(
        self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(
        self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(
        self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(
        self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(
        self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(
        self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(
        self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(
        self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class PhotometricInterpretation(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class PhotometricInterpretationPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PhotometricInterpretationI(PhotometricInterpretation):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class PixelDataJob(Job): ...

class PixelDataJobPrx(JobPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PixelDataJobI(PixelDataJob):
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(
        self, _username, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(
        self, _groupname, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(
        self, _submitted, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(
        self, _scheduledFor: RTimeI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(
        self, _finished, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: None = ...) -> int: ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class Pixels(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(self, theImage: Optional[ImageI], current: None = ...): ...
    def getRelatedTo(self, current: Incomplete | None = ...): ...
    def setRelatedTo(self, theRelatedTo, current: Incomplete | None = ...): ...
    def getPixelsType(self, current: Incomplete | None = ...): ...
    def setPixelsType(self, thePixelsType, current: Incomplete | None = ...): ...
    def getSignificantBits(self, current: Incomplete | None = ...): ...
    def setSignificantBits(
        self, theSignificantBits, current: Incomplete | None = ...
    ): ...
    def getSizeX(self, current: None = ...) -> RIntI: ...
    def setSizeX(self, theSizeX: RIntI, current: None = ...): ...
    def getSizeY(self, current: None = ...) -> RIntI: ...
    def setSizeY(self, theSizeY: RIntI, current: None = ...): ...
    def getSizeZ(self, current: Incomplete | None = ...): ...
    def setSizeZ(self, theSizeZ, current: Incomplete | None = ...): ...
    def getSizeC(self, current: Incomplete | None = ...): ...
    def setSizeC(self, theSizeC, current: Incomplete | None = ...): ...
    def getSizeT(self, current: Incomplete | None = ...): ...
    def setSizeT(self, theSizeT, current: Incomplete | None = ...): ...
    def getSha1(self, current: Incomplete | None = ...): ...
    def setSha1(self, theSha1, current: Incomplete | None = ...): ...
    def getDimensionOrder(self, current: Incomplete | None = ...): ...
    def setDimensionOrder(
        self, theDimensionOrder, current: Incomplete | None = ...
    ): ...
    def getPhysicalSizeX(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeX(self, thePhysicalSizeX, current: Incomplete | None = ...): ...
    def getPhysicalSizeY(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeY(self, thePhysicalSizeY, current: Incomplete | None = ...): ...
    def getPhysicalSizeZ(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeZ(self, thePhysicalSizeZ, current: Incomplete | None = ...): ...
    def getWaveStart(self, current: Incomplete | None = ...): ...
    def setWaveStart(self, theWaveStart, current: Incomplete | None = ...): ...
    def getWaveIncrement(self, current: Incomplete | None = ...): ...
    def setWaveIncrement(self, theWaveIncrement, current: Incomplete | None = ...): ...
    def getTimeIncrement(self, current: Incomplete | None = ...): ...
    def setTimeIncrement(self, theTimeIncrement, current: Incomplete | None = ...): ...
    def getMethodology(self, current: Incomplete | None = ...): ...
    def setMethodology(self, theMethodology, current: Incomplete | None = ...): ...
    def unloadPlaneInfo(self, current: Incomplete | None = ...): ...
    def sizeOfPlaneInfo(self, current: Incomplete | None = ...): ...
    def copyPlaneInfo(self, current: Incomplete | None = ...): ...
    def addPlaneInfo(self, target, current: Incomplete | None = ...): ...
    def addAllPlaneInfoSet(self, targets, current: Incomplete | None = ...): ...
    def removePlaneInfo(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllPlaneInfoSet(self, targets, current: Incomplete | None = ...): ...
    def clearPlaneInfo(self, current: Incomplete | None = ...): ...
    def reloadPlaneInfo(self, toCopy, current: Incomplete | None = ...): ...
    def unloadPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def sizeOfPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def copyPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def addAllPixelsOriginalFileMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removePixelsOriginalFileMap(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllPixelsOriginalFileMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def reloadPixelsFileMaps(self, toCopy, current: Incomplete | None = ...): ...
    def getPixelsFileMapsCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMapToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findPixelsOriginalFileMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMapFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def unloadChannels(self, current: Incomplete | None = ...): ...
    def sizeOfChannels(self, current: None = ...) -> int: ...
    def copyChannels(self, current: Incomplete | None = ...): ...
    def addChannel(self, target: ChannelI, current: None = ...): ...
    def addAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannel(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def clearChannels(self, current: Incomplete | None = ...): ...
    def reloadChannels(self, toCopy, current: Incomplete | None = ...): ...
    def getChannel(self, index, current: Incomplete | None = ...): ...
    def setChannel(
        self, index: int, theElement: ChannelI, current: None = ...
    ) -> ChannelI: ...
    def getPrimaryChannel(self, current: Incomplete | None = ...): ...
    def setPrimaryChannel(self, theElement, current: Incomplete | None = ...): ...
    def unloadSettings(self, current: Incomplete | None = ...): ...
    def sizeOfSettings(self, current: None = ...) -> int: ...
    def copySettings(self, current: Incomplete | None = ...): ...
    def addRenderingDef(self, target, current: Incomplete | None = ...): ...
    def addAllRenderingDefSet(self, targets, current: Incomplete | None = ...): ...
    def removeRenderingDef(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllRenderingDefSet(self, targets, current: Incomplete | None = ...): ...
    def clearSettings(self, current: Incomplete | None = ...): ...
    def reloadSettings(self, toCopy, current: Incomplete | None = ...): ...
    def unloadThumbnails(self, current: Incomplete | None = ...): ...
    def sizeOfThumbnails(self, current: Incomplete | None = ...): ...
    def copyThumbnails(self, current: Incomplete | None = ...): ...
    def addThumbnail(self, target, current: Incomplete | None = ...): ...
    def addAllThumbnailSet(self, targets, current: Incomplete | None = ...): ...
    def removeThumbnail(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllThumbnailSet(self, targets, current: Incomplete | None = ...): ...
    def clearThumbnails(self, current: Incomplete | None = ...): ...
    def reloadThumbnails(self, toCopy, current: Incomplete | None = ...): ...

class PixelsPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getImage(self, _ctx: Incomplete | None = ...): ...
    def setImage(self, theImage: Optional[ImageI], _ctx: None = ...): ...
    def getRelatedTo(self, _ctx: Incomplete | None = ...): ...
    def setRelatedTo(self, theRelatedTo, _ctx: Incomplete | None = ...): ...
    def getPixelsType(self, _ctx: Incomplete | None = ...): ...
    def setPixelsType(self, thePixelsType, _ctx: Incomplete | None = ...): ...
    def getSignificantBits(self, _ctx: Incomplete | None = ...): ...
    def setSignificantBits(self, theSignificantBits, _ctx: Incomplete | None = ...): ...
    def getSizeX(self, _ctx: None = ...) -> RIntI: ...
    def setSizeX(self, theSizeX: RIntI, _ctx: None = ...): ...
    def getSizeY(self, _ctx: None = ...) -> RIntI: ...
    def setSizeY(self, theSizeY: RIntI, _ctx: None = ...): ...
    def getSizeZ(self, _ctx: Incomplete | None = ...): ...
    def setSizeZ(self, theSizeZ, _ctx: Incomplete | None = ...): ...
    def getSizeC(self, _ctx: Incomplete | None = ...): ...
    def setSizeC(self, theSizeC, _ctx: Incomplete | None = ...): ...
    def getSizeT(self, _ctx: Incomplete | None = ...): ...
    def setSizeT(self, theSizeT, _ctx: Incomplete | None = ...): ...
    def getSha1(self, _ctx: Incomplete | None = ...): ...
    def setSha1(self, theSha1, _ctx: Incomplete | None = ...): ...
    def getDimensionOrder(self, _ctx: Incomplete | None = ...): ...
    def setDimensionOrder(self, theDimensionOrder, _ctx: Incomplete | None = ...): ...
    def getPhysicalSizeX(self, _ctx: Incomplete | None = ...): ...
    def setPhysicalSizeX(self, thePhysicalSizeX, _ctx: Incomplete | None = ...): ...
    def getPhysicalSizeY(self, _ctx: Incomplete | None = ...): ...
    def setPhysicalSizeY(self, thePhysicalSizeY, _ctx: Incomplete | None = ...): ...
    def getPhysicalSizeZ(self, _ctx: Incomplete | None = ...): ...
    def setPhysicalSizeZ(self, thePhysicalSizeZ, _ctx: Incomplete | None = ...): ...
    def getWaveStart(self, _ctx: Incomplete | None = ...): ...
    def setWaveStart(self, theWaveStart, _ctx: Incomplete | None = ...): ...
    def getWaveIncrement(self, _ctx: Incomplete | None = ...): ...
    def setWaveIncrement(self, theWaveIncrement, _ctx: Incomplete | None = ...): ...
    def getTimeIncrement(self, _ctx: Incomplete | None = ...): ...
    def setTimeIncrement(self, theTimeIncrement, _ctx: Incomplete | None = ...): ...
    def getMethodology(self, _ctx: Incomplete | None = ...): ...
    def setMethodology(self, theMethodology, _ctx: Incomplete | None = ...): ...
    def unloadPlaneInfo(self, _ctx: Incomplete | None = ...): ...
    def sizeOfPlaneInfo(self, _ctx: Incomplete | None = ...): ...
    def copyPlaneInfo(self, _ctx: Incomplete | None = ...): ...
    def addPlaneInfo(self, target, _ctx: Incomplete | None = ...): ...
    def addAllPlaneInfoSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removePlaneInfo(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllPlaneInfoSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearPlaneInfo(self, _ctx: Incomplete | None = ...): ...
    def reloadPlaneInfo(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def sizeOfPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def copyPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def addPixelsOriginalFileMap(self, target, _ctx: Incomplete | None = ...): ...
    def addAllPixelsOriginalFileMapSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removePixelsOriginalFileMap(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllPixelsOriginalFileMapSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def reloadPixelsFileMaps(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getPixelsFileMapsCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, _ctx: Incomplete | None = ...): ...
    def addPixelsOriginalFileMapToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findPixelsOriginalFileMap(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, _ctx: Incomplete | None = ...): ...
    def removePixelsOriginalFileMapFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, _ctx: Incomplete | None = ...): ...
    def unloadChannels(self, _ctx: Incomplete | None = ...): ...
    def sizeOfChannels(self, _ctx: None = ...) -> int: ...
    def copyChannels(self, _ctx: Incomplete | None = ...): ...
    def addChannel(self, target: ChannelI, _ctx: None = ...): ...
    def addAllChannelSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeChannel(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllChannelSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearChannels(self, _ctx: Incomplete | None = ...): ...
    def reloadChannels(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getChannel(self, index, _ctx: Incomplete | None = ...): ...
    def setChannel(
        self, index: int, theElement: ChannelI, _ctx: None = ...
    ) -> ChannelI: ...
    def getPrimaryChannel(self, _ctx: Incomplete | None = ...): ...
    def setPrimaryChannel(self, theElement, _ctx: Incomplete | None = ...): ...
    def unloadSettings(self, _ctx: Incomplete | None = ...): ...
    def sizeOfSettings(self, _ctx: None = ...) -> int: ...
    def copySettings(self, _ctx: Incomplete | None = ...): ...
    def addRenderingDef(self, target, _ctx: Incomplete | None = ...): ...
    def addAllRenderingDefSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeRenderingDef(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllRenderingDefSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearSettings(self, _ctx: Incomplete | None = ...): ...
    def reloadSettings(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadThumbnails(self, _ctx: Incomplete | None = ...): ...
    def sizeOfThumbnails(self, _ctx: Incomplete | None = ...): ...
    def copyThumbnails(self, _ctx: Incomplete | None = ...): ...
    def addThumbnail(self, target, _ctx: Incomplete | None = ...): ...
    def addAllThumbnailSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeThumbnail(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllThumbnailSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearThumbnails(self, _ctx: Incomplete | None = ...): ...
    def reloadThumbnails(self, toCopy, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PixelsI(Pixels):
    deprecations_warned: ClassVar[set] = ...
    IMAGE: ClassVar[str] = ...
    RELATEDTO: ClassVar[str] = ...
    PIXELSTYPE: ClassVar[str] = ...
    SIGNIFICANTBITS: ClassVar[str] = ...
    SIZEX: ClassVar[str] = ...
    SIZEY: ClassVar[str] = ...
    SIZEZ: ClassVar[str] = ...
    SIZEC: ClassVar[str] = ...
    SIZET: ClassVar[str] = ...
    SHA1: ClassVar[str] = ...
    DIMENSIONORDER: ClassVar[str] = ...
    PHYSICALSIZEX: ClassVar[str] = ...
    PHYSICALSIZEY: ClassVar[str] = ...
    PHYSICALSIZEZ: ClassVar[str] = ...
    WAVESTART: ClassVar[str] = ...
    WAVEINCREMENT: ClassVar[str] = ...
    TIMEINCREMENT: ClassVar[str] = ...
    METHODOLOGY: ClassVar[str] = ...
    PLANEINFO: ClassVar[str] = ...
    PIXELSFILEMAPS: ClassVar[str] = ...
    CHANNELS: ClassVar[str] = ...
    SETTINGS: ClassVar[str] = ...
    THUMBNAILS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    @staticmethod
    def warn_of_deprecation(item): ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadImage(self): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(
        self, _image: Optional[ImageI], current: None = ..., wrap: bool = ...
    ): ...
    def unloadRelatedTo(self): ...
    def getRelatedTo(self, current: Incomplete | None = ...): ...
    def setRelatedTo(
        self, _relatedTo, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPixelsType(self): ...
    def getPixelsType(self, current: Incomplete | None = ...): ...
    def setPixelsType(
        self, _pixelsType, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSignificantBits(self): ...
    def getSignificantBits(self, current: Incomplete | None = ...): ...
    def setSignificantBits(
        self, _significantBits, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSizeX(self): ...
    def getSizeX(self, current: None = ...) -> RIntI: ...
    def setSizeX(self, _sizeX: RIntI, current: None = ..., wrap: bool = ...): ...
    def unloadSizeY(self): ...
    def getSizeY(self, current: None = ...) -> RIntI: ...
    def setSizeY(self, _sizeY: RIntI, current: None = ..., wrap: bool = ...): ...
    def unloadSizeZ(self): ...
    def getSizeZ(self, current: Incomplete | None = ...): ...
    def setSizeZ(self, _sizeZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSizeC(self): ...
    def getSizeC(self, current: Incomplete | None = ...): ...
    def setSizeC(self, _sizeC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSizeT(self): ...
    def getSizeT(self, current: Incomplete | None = ...): ...
    def setSizeT(self, _sizeT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSha1(self): ...
    def getSha1(self, current: Incomplete | None = ...): ...
    def setSha1(self, _sha1, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDimensionOrder(self): ...
    def getDimensionOrder(self, current: Incomplete | None = ...): ...
    def setDimensionOrder(
        self, _dimensionOrder, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPhysicalSizeX(self): ...
    def getPhysicalSizeX(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeX(
        self, _physicalSizeX, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPhysicalSizeY(self): ...
    def getPhysicalSizeY(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeY(
        self, _physicalSizeY, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPhysicalSizeZ(self): ...
    def getPhysicalSizeZ(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeZ(
        self, _physicalSizeZ, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadWaveStart(self): ...
    def getWaveStart(self, current: Incomplete | None = ...): ...
    def setWaveStart(
        self, _waveStart, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadWaveIncrement(self): ...
    def getWaveIncrement(self, current: Incomplete | None = ...): ...
    def setWaveIncrement(
        self, _waveIncrement, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTimeIncrement(self): ...
    def getTimeIncrement(self, current: Incomplete | None = ...): ...
    def setTimeIncrement(
        self, _timeIncrement, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMethodology(self): ...
    def getMethodology(self, current: Incomplete | None = ...): ...
    def setMethodology(
        self, _methodology, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPlaneInfo(self, current: Incomplete | None = ...): ...
    def isPlaneInfoLoaded(self): ...
    def sizeOfPlaneInfo(self, current: Incomplete | None = ...): ...
    def copyPlaneInfo(self, current: Incomplete | None = ...): ...
    def iteratePlaneInfo(self): ...
    def addPlaneInfo(self, target, current: Incomplete | None = ...): ...
    def addAllPlaneInfoSet(self, targets, current: Incomplete | None = ...): ...
    def removePlaneInfo(self, target, current: Incomplete | None = ...): ...
    def removeAllPlaneInfoSet(self, targets, current: Incomplete | None = ...): ...
    def clearPlaneInfo(self, current: Incomplete | None = ...): ...
    def reloadPlaneInfo(self, toCopy, current: Incomplete | None = ...): ...
    def unloadPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def isPixelsFileMapsLoaded(self): ...
    def sizeOfPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def copyPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def iteratePixelsFileMaps(self): ...
    def addPixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def addAllPixelsOriginalFileMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removePixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def removeAllPixelsOriginalFileMapSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def reloadPixelsFileMaps(self, toCopy, current: Incomplete | None = ...): ...
    def getPixelsFileMapsCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMapToBoth(self, link, bothSides): ...
    def findPixelsOriginalFileMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMapFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def unloadChannels(self, current: Incomplete | None = ...): ...
    def isChannelsLoaded(self): ...
    def sizeOfChannels(self, current: None = ...) -> int: ...
    def copyChannels(self, current: Incomplete | None = ...): ...
    def iterateChannels(self): ...
    def addChannel(self, target: ChannelI, current: None = ...): ...
    def addAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannel(self, target, current: Incomplete | None = ...): ...
    def removeAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def clearChannels(self, current: Incomplete | None = ...): ...
    def reloadChannels(self, toCopy, current: Incomplete | None = ...): ...
    def getChannel(self, index, current: Incomplete | None = ...): ...
    def setChannel(
        self, index: int, element: ChannelI, current: None = ..., wrap: bool = ...
    ) -> ChannelI: ...
    def getPrimaryChannel(self, current: Incomplete | None = ...): ...
    def setPrimaryChannel(self, element, current: Incomplete | None = ...): ...
    def unloadSettings(self, current: Incomplete | None = ...): ...
    def isSettingsLoaded(self): ...
    def sizeOfSettings(self, current: None = ...) -> int: ...
    def copySettings(self, current: Incomplete | None = ...): ...
    def iterateSettings(self): ...
    def addRenderingDef(self, target, current: Incomplete | None = ...): ...
    def addAllRenderingDefSet(self, targets, current: Incomplete | None = ...): ...
    def removeRenderingDef(self, target, current: Incomplete | None = ...): ...
    def removeAllRenderingDefSet(self, targets, current: Incomplete | None = ...): ...
    def clearSettings(self, current: Incomplete | None = ...): ...
    def reloadSettings(self, toCopy, current: Incomplete | None = ...): ...
    def unloadThumbnails(self, current: Incomplete | None = ...): ...
    def isThumbnailsLoaded(self): ...
    def sizeOfThumbnails(self, current: Incomplete | None = ...): ...
    def copyThumbnails(self, current: Incomplete | None = ...): ...
    def iterateThumbnails(self): ...
    def addThumbnail(self, target, current: Incomplete | None = ...): ...
    def addAllThumbnailSet(self, targets, current: Incomplete | None = ...): ...
    def removeThumbnail(self, target, current: Incomplete | None = ...): ...
    def removeAllThumbnailSet(self, targets, current: Incomplete | None = ...): ...
    def clearThumbnails(self, current: Incomplete | None = ...): ...
    def reloadThumbnails(self, toCopy, current: Incomplete | None = ...): ...

class PixelsOriginalFileMap(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class PixelsOriginalFileMapPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PixelsOriginalFileMapI(PixelsOriginalFileMap):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class PixelsType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...
    def getBitSize(self, current: Incomplete | None = ...): ...
    def setBitSize(self, theBitSize, current: Incomplete | None = ...): ...

class PixelsTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    def getBitSize(self, _ctx: Incomplete | None = ...): ...
    def setBitSize(self, theBitSize, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PixelsTypeI(PixelsType):
    VALUE: ClassVar[str] = ...
    BITSIZE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...
    def unloadBitSize(self): ...
    def getBitSize(self, current: Incomplete | None = ...): ...
    def setBitSize(
        self, _bitSize, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class PlaneInfo(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, thePixels: PixelsI, current: None = ...): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, theTheZ, current: Incomplete | None = ...): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, theTheC, current: Incomplete | None = ...): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, theTheT, current: Incomplete | None = ...): ...
    def getDeltaT(self, current: Incomplete | None = ...): ...
    def setDeltaT(self, theDeltaT, current: Incomplete | None = ...): ...
    def getPositionX(self, current: Incomplete | None = ...): ...
    def setPositionX(self, thePositionX, current: Incomplete | None = ...): ...
    def getPositionY(self, current: Incomplete | None = ...): ...
    def setPositionY(self, thePositionY, current: Incomplete | None = ...): ...
    def getPositionZ(self, current: Incomplete | None = ...): ...
    def setPositionZ(self, thePositionZ, current: Incomplete | None = ...): ...
    def getExposureTime(self, current: Incomplete | None = ...): ...
    def setExposureTime(self, theExposureTime, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addPlaneInfoAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllPlaneInfoAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removePlaneInfoAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllPlaneInfoAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addPlaneInfoAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findPlaneInfoAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlaneInfoAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class PlaneInfoPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getPixels(self, _ctx: Incomplete | None = ...): ...
    def setPixels(self, thePixels: PixelsI, _ctx: None = ...): ...
    def getTheZ(self, _ctx: Incomplete | None = ...): ...
    def setTheZ(self, theTheZ, _ctx: Incomplete | None = ...): ...
    def getTheC(self, _ctx: Incomplete | None = ...): ...
    def setTheC(self, theTheC, _ctx: Incomplete | None = ...): ...
    def getTheT(self, _ctx: Incomplete | None = ...): ...
    def setTheT(self, theTheT, _ctx: Incomplete | None = ...): ...
    def getDeltaT(self, _ctx: Incomplete | None = ...): ...
    def setDeltaT(self, theDeltaT, _ctx: Incomplete | None = ...): ...
    def getPositionX(self, _ctx: Incomplete | None = ...): ...
    def setPositionX(self, thePositionX, _ctx: Incomplete | None = ...): ...
    def getPositionY(self, _ctx: Incomplete | None = ...): ...
    def setPositionY(self, thePositionY, _ctx: Incomplete | None = ...): ...
    def getPositionZ(self, _ctx: Incomplete | None = ...): ...
    def setPositionZ(self, thePositionZ, _ctx: Incomplete | None = ...): ...
    def getExposureTime(self, _ctx: Incomplete | None = ...): ...
    def setExposureTime(self, theExposureTime, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addPlaneInfoAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllPlaneInfoAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removePlaneInfoAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllPlaneInfoAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addPlaneInfoAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findPlaneInfoAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removePlaneInfoAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PlaneInfoI(PlaneInfo):
    PIXELS: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    DELTAT: ClassVar[str] = ...
    POSITIONX: ClassVar[str] = ...
    POSITIONY: ClassVar[str] = ...
    POSITIONZ: ClassVar[str] = ...
    EXPOSURETIME: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadPixels(self): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, _pixels: PixelsI, current: None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDeltaT(self): ...
    def getDeltaT(self, current: Incomplete | None = ...): ...
    def setDeltaT(
        self, _deltaT, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPositionX(self): ...
    def getPositionX(self, current: Incomplete | None = ...): ...
    def setPositionX(
        self, _positionX, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPositionY(self): ...
    def getPositionY(self, current: Incomplete | None = ...): ...
    def setPositionY(
        self, _positionY, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPositionZ(self): ...
    def getPositionZ(self, current: Incomplete | None = ...): ...
    def setPositionZ(
        self, _positionZ, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadExposureTime(self): ...
    def getExposureTime(self, current: Incomplete | None = ...): ...
    def setExposureTime(
        self, _exposureTime, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addPlaneInfoAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllPlaneInfoAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removePlaneInfoAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllPlaneInfoAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addPlaneInfoAnnotationLinkToBoth(self, link, bothSides): ...
    def findPlaneInfoAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlaneInfoAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class PlaneInfoAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class PlaneInfoAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PlaneInfoAnnotationLinkI(PlaneInfoAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class PlaneSlicingContext(CodomainMapContext):
    def getUpperLimit(self, current: Incomplete | None = ...): ...
    def setUpperLimit(self, theUpperLimit, current: Incomplete | None = ...): ...
    def getLowerLimit(self, current: Incomplete | None = ...): ...
    def setLowerLimit(self, theLowerLimit, current: Incomplete | None = ...): ...
    def getPlaneSelected(self, current: Incomplete | None = ...): ...
    def setPlaneSelected(self, thePlaneSelected, current: Incomplete | None = ...): ...
    def getPlanePrevious(self, current: Incomplete | None = ...): ...
    def setPlanePrevious(self, thePlanePrevious, current: Incomplete | None = ...): ...
    def getConstant(self, current: Incomplete | None = ...): ...
    def setConstant(self, theConstant, current: Incomplete | None = ...): ...

class PlaneSlicingContextPrx(CodomainMapContextPrx):
    def getUpperLimit(self, _ctx: Incomplete | None = ...): ...
    def setUpperLimit(self, theUpperLimit, _ctx: Incomplete | None = ...): ...
    def getLowerLimit(self, _ctx: Incomplete | None = ...): ...
    def setLowerLimit(self, theLowerLimit, _ctx: Incomplete | None = ...): ...
    def getPlaneSelected(self, _ctx: Incomplete | None = ...): ...
    def setPlaneSelected(self, thePlaneSelected, _ctx: Incomplete | None = ...): ...
    def getPlanePrevious(self, _ctx: Incomplete | None = ...): ...
    def setPlanePrevious(self, thePlanePrevious, _ctx: Incomplete | None = ...): ...
    def getConstant(self, _ctx: Incomplete | None = ...): ...
    def setConstant(self, theConstant, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PlaneSlicingContextI(PlaneSlicingContext):
    UPPERLIMIT: ClassVar[str] = ...
    LOWERLIMIT: ClassVar[str] = ...
    PLANESELECTED: ClassVar[str] = ...
    PLANEPREVIOUS: ClassVar[str] = ...
    CONSTANT: ClassVar[str] = ...
    CHANNELBINDING: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadUpperLimit(self): ...
    def getUpperLimit(self, current: Incomplete | None = ...): ...
    def setUpperLimit(
        self, _upperLimit, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadLowerLimit(self): ...
    def getLowerLimit(self, current: Incomplete | None = ...): ...
    def setLowerLimit(
        self, _lowerLimit, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPlaneSelected(self): ...
    def getPlaneSelected(self, current: Incomplete | None = ...): ...
    def setPlaneSelected(
        self, _planeSelected, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPlanePrevious(self): ...
    def getPlanePrevious(self, current: Incomplete | None = ...): ...
    def setPlanePrevious(
        self, _planePrevious, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadConstant(self): ...
    def getConstant(self, current: Incomplete | None = ...): ...
    def setConstant(
        self, _constant, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadChannelBinding(self): ...
    def getChannelBinding(self, current: Incomplete | None = ...): ...
    def setChannelBinding(
        self, _channelBinding, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class Plate(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getDefaultSample(self, current: Incomplete | None = ...): ...
    def setDefaultSample(self, theDefaultSample, current: Incomplete | None = ...): ...
    def getColumnNamingConvention(self, current: None = ...) -> None: ...
    def setColumnNamingConvention(
        self, theColumnNamingConvention, current: Incomplete | None = ...
    ): ...
    def getRowNamingConvention(self, current: None = ...) -> None: ...
    def setRowNamingConvention(
        self, theRowNamingConvention, current: Incomplete | None = ...
    ): ...
    def getWellOriginX(self, current: Incomplete | None = ...): ...
    def setWellOriginX(self, theWellOriginX, current: Incomplete | None = ...): ...
    def getWellOriginY(self, current: Incomplete | None = ...): ...
    def setWellOriginY(self, theWellOriginY, current: Incomplete | None = ...): ...
    def getRows(self, current: Incomplete | None = ...): ...
    def setRows(self, theRows, current: Incomplete | None = ...): ...
    def getColumns(self, current: Incomplete | None = ...): ...
    def setColumns(self, theColumns, current: Incomplete | None = ...): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, theStatus, current: Incomplete | None = ...): ...
    def getExternalIdentifier(self, current: Incomplete | None = ...): ...
    def setExternalIdentifier(
        self, theExternalIdentifier, current: Incomplete | None = ...
    ): ...
    def unloadScreenLinks(self, current: Incomplete | None = ...): ...
    def sizeOfScreenLinks(self, current: Incomplete | None = ...): ...
    def copyScreenLinks(self, current: Incomplete | None = ...): ...
    def addScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeScreenPlateLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllScreenPlateLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearScreenLinks(self, current: Incomplete | None = ...): ...
    def reloadScreenLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getScreenLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkScreen(self, addition, current: Incomplete | None = ...): ...
    def addScreenPlateLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findScreenPlateLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkScreen(self, removal, current: Incomplete | None = ...): ...
    def removeScreenPlateLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedScreenList(self, current: Incomplete | None = ...): ...
    def unloadWells(self, current: Incomplete | None = ...): ...
    def sizeOfWells(self, current: Incomplete | None = ...): ...
    def copyWells(self, current: Incomplete | None = ...): ...
    def addWell(self, target, current: Incomplete | None = ...): ...
    def addAllWellSet(self, targets, current: Incomplete | None = ...): ...
    def removeWell(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellSet(self, targets, current: Incomplete | None = ...): ...
    def clearWells(self, current: Incomplete | None = ...): ...
    def reloadWells(self, toCopy, current: Incomplete | None = ...): ...
    def unloadPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def sizeOfPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def copyPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def addPlateAcquisition(self, target, current: Incomplete | None = ...): ...
    def addAllPlateAcquisitionSet(self, targets, current: Incomplete | None = ...): ...
    def removePlateAcquisition(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllPlateAcquisitionSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def reloadPlateAcquisitions(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addPlateAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllPlateAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removePlateAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllPlateAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addPlateAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findPlateAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlateAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class PlatePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getDefaultSample(self, _ctx: Incomplete | None = ...): ...
    def setDefaultSample(self, theDefaultSample, _ctx: Incomplete | None = ...): ...
    def getColumnNamingConvention(self, _ctx: None = ...) -> None: ...
    def setColumnNamingConvention(
        self, theColumnNamingConvention, _ctx: Incomplete | None = ...
    ): ...
    def getRowNamingConvention(self, _ctx: None = ...) -> None: ...
    def setRowNamingConvention(
        self, theRowNamingConvention, _ctx: Incomplete | None = ...
    ): ...
    def getWellOriginX(self, _ctx: Incomplete | None = ...): ...
    def setWellOriginX(self, theWellOriginX, _ctx: Incomplete | None = ...): ...
    def getWellOriginY(self, _ctx: Incomplete | None = ...): ...
    def setWellOriginY(self, theWellOriginY, _ctx: Incomplete | None = ...): ...
    def getRows(self, _ctx: Incomplete | None = ...): ...
    def setRows(self, theRows, _ctx: Incomplete | None = ...): ...
    def getColumns(self, _ctx: Incomplete | None = ...): ...
    def setColumns(self, theColumns, _ctx: Incomplete | None = ...): ...
    def getStatus(self, _ctx: Incomplete | None = ...): ...
    def setStatus(self, theStatus, _ctx: Incomplete | None = ...): ...
    def getExternalIdentifier(self, _ctx: Incomplete | None = ...): ...
    def setExternalIdentifier(
        self, theExternalIdentifier, _ctx: Incomplete | None = ...
    ): ...
    def unloadScreenLinks(self, _ctx: Incomplete | None = ...): ...
    def sizeOfScreenLinks(self, _ctx: Incomplete | None = ...): ...
    def copyScreenLinks(self, _ctx: Incomplete | None = ...): ...
    def addScreenPlateLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllScreenPlateLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeScreenPlateLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllScreenPlateLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearScreenLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadScreenLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getScreenLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkScreen(self, addition, _ctx: Incomplete | None = ...): ...
    def addScreenPlateLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findScreenPlateLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkScreen(self, removal, _ctx: Incomplete | None = ...): ...
    def removeScreenPlateLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedScreenList(self, _ctx: Incomplete | None = ...): ...
    def unloadWells(self, _ctx: Incomplete | None = ...): ...
    def sizeOfWells(self, _ctx: Incomplete | None = ...): ...
    def copyWells(self, _ctx: Incomplete | None = ...): ...
    def addWell(self, target, _ctx: Incomplete | None = ...): ...
    def addAllWellSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeWell(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllWellSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearWells(self, _ctx: Incomplete | None = ...): ...
    def reloadWells(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadPlateAcquisitions(self, _ctx: Incomplete | None = ...): ...
    def sizeOfPlateAcquisitions(self, _ctx: Incomplete | None = ...): ...
    def copyPlateAcquisitions(self, _ctx: Incomplete | None = ...): ...
    def addPlateAcquisition(self, target, _ctx: Incomplete | None = ...): ...
    def addAllPlateAcquisitionSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removePlateAcquisition(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllPlateAcquisitionSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearPlateAcquisitions(self, _ctx: Incomplete | None = ...): ...
    def reloadPlateAcquisitions(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addPlateAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllPlateAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removePlateAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllPlateAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addPlateAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findPlateAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removePlateAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PlateI(Plate):
    DEFAULTSAMPLE: ClassVar[str] = ...
    COLUMNNAMINGCONVENTION: ClassVar[str] = ...
    ROWNAMINGCONVENTION: ClassVar[str] = ...
    WELLORIGINX: ClassVar[str] = ...
    WELLORIGINY: ClassVar[str] = ...
    ROWS: ClassVar[str] = ...
    COLUMNS: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    EXTERNALIDENTIFIER: ClassVar[str] = ...
    SCREENLINKS: ClassVar[str] = ...
    WELLS: ClassVar[str] = ...
    PLATEACQUISITIONS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadDefaultSample(self): ...
    def getDefaultSample(self, current: Incomplete | None = ...): ...
    def setDefaultSample(
        self, _defaultSample, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadColumnNamingConvention(self): ...
    def getColumnNamingConvention(self, current: None = ...) -> None: ...
    def setColumnNamingConvention(
        self,
        _columnNamingConvention,
        current: Incomplete | None = ...,
        wrap: bool = ...,
    ): ...
    def unloadRowNamingConvention(self): ...
    def getRowNamingConvention(self, current: None = ...) -> None: ...
    def setRowNamingConvention(
        self, _rowNamingConvention, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadWellOriginX(self): ...
    def getWellOriginX(self, current: Incomplete | None = ...): ...
    def setWellOriginX(
        self, _wellOriginX, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadWellOriginY(self): ...
    def getWellOriginY(self, current: Incomplete | None = ...): ...
    def setWellOriginY(
        self, _wellOriginY, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadRows(self): ...
    def getRows(self, current: Incomplete | None = ...): ...
    def setRows(self, _rows, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadColumns(self): ...
    def getColumns(self, current: Incomplete | None = ...): ...
    def setColumns(
        self, _columns, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadExternalIdentifier(self): ...
    def getExternalIdentifier(self, current: Incomplete | None = ...): ...
    def setExternalIdentifier(
        self, _externalIdentifier, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScreenLinks(self, current: Incomplete | None = ...): ...
    def isScreenLinksLoaded(self): ...
    def sizeOfScreenLinks(self, current: Incomplete | None = ...): ...
    def copyScreenLinks(self, current: Incomplete | None = ...): ...
    def iterateScreenLinks(self): ...
    def addScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def removeAllScreenPlateLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearScreenLinks(self, current: Incomplete | None = ...): ...
    def reloadScreenLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getScreenLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkScreen(self, addition, current: Incomplete | None = ...): ...
    def addScreenPlateLinkToBoth(self, link, bothSides): ...
    def findScreenPlateLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkScreen(self, removal, current: Incomplete | None = ...): ...
    def removeScreenPlateLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedScreenList(self, current: Incomplete | None = ...): ...
    def unloadWells(self, current: Incomplete | None = ...): ...
    def isWellsLoaded(self): ...
    def sizeOfWells(self, current: Incomplete | None = ...): ...
    def copyWells(self, current: Incomplete | None = ...): ...
    def iterateWells(self): ...
    def addWell(self, target, current: Incomplete | None = ...): ...
    def addAllWellSet(self, targets, current: Incomplete | None = ...): ...
    def removeWell(self, target, current: Incomplete | None = ...): ...
    def removeAllWellSet(self, targets, current: Incomplete | None = ...): ...
    def clearWells(self, current: Incomplete | None = ...): ...
    def reloadWells(self, toCopy, current: Incomplete | None = ...): ...
    def unloadPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def isPlateAcquisitionsLoaded(self): ...
    def sizeOfPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def copyPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def iteratePlateAcquisitions(self): ...
    def addPlateAcquisition(self, target, current: Incomplete | None = ...): ...
    def addAllPlateAcquisitionSet(self, targets, current: Incomplete | None = ...): ...
    def removePlateAcquisition(self, target, current: Incomplete | None = ...): ...
    def removeAllPlateAcquisitionSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def reloadPlateAcquisitions(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addPlateAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllPlateAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removePlateAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllPlateAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addPlateAnnotationLinkToBoth(self, link, bothSides): ...
    def findPlateAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlateAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class PlateAcquisition(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getStartTime(self, current: Incomplete | None = ...): ...
    def setStartTime(self, theStartTime, current: Incomplete | None = ...): ...
    def getEndTime(self, current: Incomplete | None = ...): ...
    def setEndTime(self, theEndTime, current: Incomplete | None = ...): ...
    def getMaximumFieldCount(self, current: Incomplete | None = ...): ...
    def setMaximumFieldCount(
        self, theMaximumFieldCount, current: Incomplete | None = ...
    ): ...
    def getPlate(self, current: Incomplete | None = ...): ...
    def setPlate(self, thePlate, current: Incomplete | None = ...): ...
    def unloadWellSample(self, current: Incomplete | None = ...): ...
    def sizeOfWellSample(self, current: Incomplete | None = ...): ...
    def copyWellSample(self, current: Incomplete | None = ...): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSample(self, current: Incomplete | None = ...): ...
    def reloadWellSample(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addPlateAcquisitionAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllPlateAcquisitionAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removePlateAcquisitionAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllPlateAcquisitionAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addPlateAcquisitionAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findPlateAcquisitionAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlateAcquisitionAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class PlateAcquisitionPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getStartTime(self, _ctx: Incomplete | None = ...): ...
    def setStartTime(self, theStartTime, _ctx: Incomplete | None = ...): ...
    def getEndTime(self, _ctx: Incomplete | None = ...): ...
    def setEndTime(self, theEndTime, _ctx: Incomplete | None = ...): ...
    def getMaximumFieldCount(self, _ctx: Incomplete | None = ...): ...
    def setMaximumFieldCount(
        self, theMaximumFieldCount, _ctx: Incomplete | None = ...
    ): ...
    def getPlate(self, _ctx: Incomplete | None = ...): ...
    def setPlate(self, thePlate, _ctx: Incomplete | None = ...): ...
    def unloadWellSample(self, _ctx: Incomplete | None = ...): ...
    def sizeOfWellSample(self, _ctx: Incomplete | None = ...): ...
    def copyWellSample(self, _ctx: Incomplete | None = ...): ...
    def addWellSample(self, target, _ctx: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeWellSample(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearWellSample(self, _ctx: Incomplete | None = ...): ...
    def reloadWellSample(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addPlateAcquisitionAnnotationLink(
        self, target, _ctx: Incomplete | None = ...
    ): ...
    def addAllPlateAcquisitionAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removePlateAcquisitionAnnotationLink(
        self, theTarget, _ctx: Incomplete | None = ...
    ): ...
    def removeAllPlateAcquisitionAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addPlateAcquisitionAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findPlateAcquisitionAnnotationLink(
        self, removal, _ctx: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removePlateAcquisitionAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PlateAcquisitionI(PlateAcquisition):
    NAME: ClassVar[str] = ...
    STARTTIME: ClassVar[str] = ...
    ENDTIME: ClassVar[str] = ...
    MAXIMUMFIELDCOUNT: ClassVar[str] = ...
    PLATE: ClassVar[str] = ...
    WELLSAMPLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadStartTime(self): ...
    def getStartTime(self, current: Incomplete | None = ...): ...
    def setStartTime(
        self, _startTime, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadEndTime(self): ...
    def getEndTime(self, current: Incomplete | None = ...): ...
    def setEndTime(
        self, _endTime, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMaximumFieldCount(self): ...
    def getMaximumFieldCount(self, current: Incomplete | None = ...): ...
    def setMaximumFieldCount(
        self, _maximumFieldCount, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPlate(self): ...
    def getPlate(self, current: Incomplete | None = ...): ...
    def setPlate(self, _plate, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWellSample(self, current: Incomplete | None = ...): ...
    def isWellSampleLoaded(self): ...
    def sizeOfWellSample(self, current: Incomplete | None = ...): ...
    def copyWellSample(self, current: Incomplete | None = ...): ...
    def iterateWellSample(self): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, target, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSample(self, current: Incomplete | None = ...): ...
    def reloadWellSample(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addPlateAcquisitionAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def addAllPlateAcquisitionAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removePlateAcquisitionAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllPlateAcquisitionAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addPlateAcquisitionAnnotationLinkToBoth(self, link, bothSides): ...
    def findPlateAcquisitionAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlateAcquisitionAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class PlateAcquisitionAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class PlateAcquisitionAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PlateAcquisitionAnnotationLinkI(PlateAcquisitionAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class PlateAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class PlateAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PlateAnnotationLinkI(PlateAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class Point(Shape):
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, theX, current: Incomplete | None = ...): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, theY, current: Incomplete | None = ...): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, current: None = ...): ...

class PointPrx(ShapePrx):
    def getX(self, _ctx: Incomplete | None = ...): ...
    def setX(self, theX, _ctx: Incomplete | None = ...): ...
    def getY(self, _ctx: Incomplete | None = ...): ...
    def setY(self, theY, _ctx: Incomplete | None = ...): ...
    def getTextValue(self, _ctx: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PointI(Point):
    X: ClassVar[str] = ...
    Y: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadX(self): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, _x, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY(self): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, _y, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(
        self, _locked, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(
        self, _transform, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(
        self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(
        self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(
        self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(
        self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(
        self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(
        self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(
        self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(
        self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Polygon(Shape):
    def getPoints(self, current: Incomplete | None = ...): ...
    def setPoints(self, thePoints, current: Incomplete | None = ...): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, current: None = ...): ...

class PolygonPrx(ShapePrx):
    def getPoints(self, _ctx: Incomplete | None = ...): ...
    def setPoints(self, thePoints, _ctx: Incomplete | None = ...): ...
    def getTextValue(self, _ctx: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PolygonI(Polygon):
    POINTS: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadPoints(self): ...
    def getPoints(self, current: Incomplete | None = ...): ...
    def setPoints(
        self, _points, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(
        self, _locked, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(
        self, _transform, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(
        self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(
        self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(
        self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(
        self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(
        self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(
        self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(
        self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(
        self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Polyline(Shape):
    def getPoints(self, current: Incomplete | None = ...): ...
    def setPoints(self, thePoints, current: Incomplete | None = ...): ...
    def getMarkerStart(self, current: Incomplete | None = ...): ...
    def setMarkerStart(self, theMarkerStart, current: Incomplete | None = ...): ...
    def getMarkerEnd(self, current: Incomplete | None = ...): ...
    def setMarkerEnd(self, theMarkerEnd, current: Incomplete | None = ...): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, current: None = ...): ...

class PolylinePrx(ShapePrx):
    def getPoints(self, _ctx: Incomplete | None = ...): ...
    def setPoints(self, thePoints, _ctx: Incomplete | None = ...): ...
    def getMarkerStart(self, _ctx: Incomplete | None = ...): ...
    def setMarkerStart(self, theMarkerStart, _ctx: Incomplete | None = ...): ...
    def getMarkerEnd(self, _ctx: Incomplete | None = ...): ...
    def setMarkerEnd(self, theMarkerEnd, _ctx: Incomplete | None = ...): ...
    def getTextValue(self, _ctx: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PolylineI(Polyline):
    POINTS: ClassVar[str] = ...
    MARKERSTART: ClassVar[str] = ...
    MARKEREND: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadPoints(self): ...
    def getPoints(self, current: Incomplete | None = ...): ...
    def setPoints(
        self, _points, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMarkerStart(self): ...
    def getMarkerStart(self, current: Incomplete | None = ...): ...
    def setMarkerStart(
        self, _markerStart, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMarkerEnd(self): ...
    def getMarkerEnd(self, current: Incomplete | None = ...): ...
    def setMarkerEnd(
        self, _markerEnd, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(
        self, _locked, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(
        self, _transform, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(
        self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(
        self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(
        self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(
        self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(
        self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(
        self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(
        self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(
        self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Project(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def unloadDatasetLinks(self, current: None = ...): ...
    def sizeOfDatasetLinks(self, current: None = ...) -> int: ...
    def copyDatasetLinks(self, current: Incomplete | None = ...): ...
    def addProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectDatasetLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeProjectDatasetLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllProjectDatasetLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearDatasetLinks(self, current: Incomplete | None = ...): ...
    def reloadDatasetLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getDatasetLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkDataset(
        self, addition: DatasetI, current: None = ...
    ) -> DatasetImageLinkI: ...
    def addProjectDatasetLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findProjectDatasetLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkDataset(self, removal: DatasetI, current: None = ...): ...
    def removeProjectDatasetLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedDatasetList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addProjectAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeProjectAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllProjectAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addProjectAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findProjectAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeProjectAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class ProjectPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def unloadDatasetLinks(self, _ctx: None = ...): ...
    def sizeOfDatasetLinks(self, _ctx: None = ...) -> int: ...
    def copyDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def addProjectDatasetLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllProjectDatasetLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeProjectDatasetLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllProjectDatasetLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadDatasetLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getDatasetLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkDataset(
        self, addition: DatasetI, _ctx: None = ...
    ) -> DatasetImageLinkI: ...
    def addProjectDatasetLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findProjectDatasetLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkDataset(self, removal: DatasetI, _ctx: None = ...): ...
    def removeProjectDatasetLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedDatasetList(self, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addProjectAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllProjectAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeProjectAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllProjectAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addProjectAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findProjectAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeProjectAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ProjectI(Project):
    DATASETLINKS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadDatasetLinks(self, current: None = ...): ...
    def isDatasetLinksLoaded(self): ...
    def sizeOfDatasetLinks(self, current: None = ...) -> int: ...
    def copyDatasetLinks(self, current: Incomplete | None = ...): ...
    def iterateDatasetLinks(self): ...
    def addProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectDatasetLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def removeAllProjectDatasetLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearDatasetLinks(self, current: Incomplete | None = ...): ...
    def reloadDatasetLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getDatasetLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkDataset(
        self, addition: DatasetI, current: None = ...
    ) -> DatasetImageLinkI: ...
    def addProjectDatasetLinkToBoth(self, link, bothSides): ...
    def findProjectDatasetLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkDataset(self, removal: DatasetI, current: None = ...): ...
    def removeProjectDatasetLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedDatasetList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addProjectAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeProjectAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllProjectAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addProjectAnnotationLinkToBoth(self, link, bothSides): ...
    def findProjectAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeProjectAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class ProjectAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ProjectAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ProjectAnnotationLinkI(ProjectAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ProjectDatasetLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ProjectDatasetLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ProjectDatasetLinkI(ProjectDatasetLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ProjectionAxis(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class ProjectionAxisPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ProjectionAxisI(ProjectionAxis):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class ProjectionDef(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getRenderingDef(self, current: Incomplete | None = ...): ...
    def setRenderingDef(self, theRenderingDef, current: Incomplete | None = ...): ...
    def getAxis(self, current: Incomplete | None = ...): ...
    def setAxis(self, theAxis, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(self, theActive, current: Incomplete | None = ...): ...
    def getStartPlane(self, current: Incomplete | None = ...): ...
    def setStartPlane(self, theStartPlane, current: Incomplete | None = ...): ...
    def getEndPlane(self, current: Incomplete | None = ...): ...
    def setEndPlane(self, theEndPlane, current: Incomplete | None = ...): ...
    def getStepping(self, current: Incomplete | None = ...): ...
    def setStepping(self, theStepping, current: Incomplete | None = ...): ...

class ProjectionDefPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getRenderingDef(self, _ctx: Incomplete | None = ...): ...
    def setRenderingDef(self, theRenderingDef, _ctx: Incomplete | None = ...): ...
    def getAxis(self, _ctx: Incomplete | None = ...): ...
    def setAxis(self, theAxis, _ctx: Incomplete | None = ...): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def getActive(self, _ctx: Incomplete | None = ...): ...
    def setActive(self, theActive, _ctx: Incomplete | None = ...): ...
    def getStartPlane(self, _ctx: Incomplete | None = ...): ...
    def setStartPlane(self, theStartPlane, _ctx: Incomplete | None = ...): ...
    def getEndPlane(self, _ctx: Incomplete | None = ...): ...
    def setEndPlane(self, theEndPlane, _ctx: Incomplete | None = ...): ...
    def getStepping(self, _ctx: Incomplete | None = ...): ...
    def setStepping(self, theStepping, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ProjectionDefI(ProjectionDef):
    RENDERINGDEF: ClassVar[str] = ...
    AXIS: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    ACTIVE: ClassVar[str] = ...
    STARTPLANE: ClassVar[str] = ...
    ENDPLANE: ClassVar[str] = ...
    STEPPING: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadRenderingDef(self): ...
    def getRenderingDef(self, current: Incomplete | None = ...): ...
    def setRenderingDef(
        self, _renderingDef, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAxis(self): ...
    def getAxis(self, current: Incomplete | None = ...): ...
    def setAxis(self, _axis, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadActive(self): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(
        self, _active, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStartPlane(self): ...
    def getStartPlane(self, current: Incomplete | None = ...): ...
    def setStartPlane(
        self, _startPlane, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadEndPlane(self): ...
    def getEndPlane(self, current: Incomplete | None = ...): ...
    def setEndPlane(
        self, _endPlane, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStepping(self): ...
    def getStepping(self, current: Incomplete | None = ...): ...
    def setStepping(
        self, _stepping, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class ProjectionType(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class ProjectionTypePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ProjectionTypeI(ProjectionType):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class Pulse(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class PulsePrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PulseI(Pulse):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class QuantumDef(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getCdStart(self, current: Incomplete | None = ...): ...
    def setCdStart(self, theCdStart, current: Incomplete | None = ...): ...
    def getCdEnd(self, current: Incomplete | None = ...): ...
    def setCdEnd(self, theCdEnd, current: Incomplete | None = ...): ...
    def getBitResolution(self, current: Incomplete | None = ...): ...
    def setBitResolution(self, theBitResolution, current: Incomplete | None = ...): ...

class QuantumDefPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getCdStart(self, _ctx: Incomplete | None = ...): ...
    def setCdStart(self, theCdStart, _ctx: Incomplete | None = ...): ...
    def getCdEnd(self, _ctx: Incomplete | None = ...): ...
    def setCdEnd(self, theCdEnd, _ctx: Incomplete | None = ...): ...
    def getBitResolution(self, _ctx: Incomplete | None = ...): ...
    def setBitResolution(self, theBitResolution, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class QuantumDefI(QuantumDef):
    CDSTART: ClassVar[str] = ...
    CDEND: ClassVar[str] = ...
    BITRESOLUTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadCdStart(self): ...
    def getCdStart(self, current: Incomplete | None = ...): ...
    def setCdStart(
        self, _cdStart, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadCdEnd(self): ...
    def getCdEnd(self, current: Incomplete | None = ...): ...
    def setCdEnd(self, _cdEnd, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBitResolution(self): ...
    def getBitResolution(self, current: Incomplete | None = ...): ...
    def setBitResolution(
        self, _bitResolution, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class Reagent(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getReagentIdentifier(self, current: Incomplete | None = ...): ...
    def setReagentIdentifier(
        self, theReagentIdentifier, current: Incomplete | None = ...
    ): ...
    def getScreen(self, current: Incomplete | None = ...): ...
    def setScreen(self, theScreen, current: Incomplete | None = ...): ...
    def unloadWellLinks(self, current: Incomplete | None = ...): ...
    def sizeOfWellLinks(self, current: Incomplete | None = ...): ...
    def copyWellLinks(self, current: Incomplete | None = ...): ...
    def addWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellReagentLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellReagentLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearWellLinks(self, current: Incomplete | None = ...): ...
    def reloadWellLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getWellLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkWell(self, addition, current: Incomplete | None = ...): ...
    def addWellReagentLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findWellReagentLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkWell(self, removal, current: Incomplete | None = ...): ...
    def removeWellReagentLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedWellList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addReagentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllReagentAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeReagentAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllReagentAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addReagentAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findReagentAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeReagentAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class ReagentPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getReagentIdentifier(self, _ctx: Incomplete | None = ...): ...
    def setReagentIdentifier(
        self, theReagentIdentifier, _ctx: Incomplete | None = ...
    ): ...
    def getScreen(self, _ctx: Incomplete | None = ...): ...
    def setScreen(self, theScreen, _ctx: Incomplete | None = ...): ...
    def unloadWellLinks(self, _ctx: Incomplete | None = ...): ...
    def sizeOfWellLinks(self, _ctx: Incomplete | None = ...): ...
    def copyWellLinks(self, _ctx: Incomplete | None = ...): ...
    def addWellReagentLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllWellReagentLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeWellReagentLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllWellReagentLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearWellLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadWellLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getWellLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkWell(self, addition, _ctx: Incomplete | None = ...): ...
    def addWellReagentLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findWellReagentLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkWell(self, removal, _ctx: Incomplete | None = ...): ...
    def removeWellReagentLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedWellList(self, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addReagentAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllReagentAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeReagentAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllReagentAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addReagentAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findReagentAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeReagentAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ReagentI(Reagent):
    NAME: ClassVar[str] = ...
    REAGENTIDENTIFIER: ClassVar[str] = ...
    SCREEN: ClassVar[str] = ...
    WELLLINKS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadReagentIdentifier(self): ...
    def getReagentIdentifier(self, current: Incomplete | None = ...): ...
    def setReagentIdentifier(
        self, _reagentIdentifier, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScreen(self): ...
    def getScreen(self, current: Incomplete | None = ...): ...
    def setScreen(
        self, _screen, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadWellLinks(self, current: Incomplete | None = ...): ...
    def isWellLinksLoaded(self): ...
    def sizeOfWellLinks(self, current: Incomplete | None = ...): ...
    def copyWellLinks(self, current: Incomplete | None = ...): ...
    def iterateWellLinks(self): ...
    def addWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def removeAllWellReagentLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearWellLinks(self, current: Incomplete | None = ...): ...
    def reloadWellLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getWellLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkWell(self, addition, current: Incomplete | None = ...): ...
    def addWellReagentLinkToBoth(self, link, bothSides): ...
    def findWellReagentLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkWell(self, removal, current: Incomplete | None = ...): ...
    def removeWellReagentLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedWellList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addReagentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllReagentAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeReagentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllReagentAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addReagentAnnotationLinkToBoth(self, link, bothSides): ...
    def findReagentAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeReagentAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class ReagentAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ReagentAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ReagentAnnotationLinkI(ReagentAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class Rectangle(Shape):
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, theX, current: Incomplete | None = ...): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, theY, current: Incomplete | None = ...): ...
    def getWidth(self, current: Incomplete | None = ...): ...
    def setWidth(self, theWidth, current: Incomplete | None = ...): ...
    def getHeight(self, current: Incomplete | None = ...): ...
    def setHeight(self, theHeight, current: Incomplete | None = ...): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, current: None = ...): ...

class RectanglePrx(ShapePrx):
    def getX(self, _ctx: Incomplete | None = ...): ...
    def setX(self, theX, _ctx: Incomplete | None = ...): ...
    def getY(self, _ctx: Incomplete | None = ...): ...
    def setY(self, theY, _ctx: Incomplete | None = ...): ...
    def getWidth(self, _ctx: Incomplete | None = ...): ...
    def setWidth(self, theWidth, _ctx: Incomplete | None = ...): ...
    def getHeight(self, _ctx: Incomplete | None = ...): ...
    def setHeight(self, theHeight, _ctx: Incomplete | None = ...): ...
    def getTextValue(self, _ctx: None = ...) -> RStringI: ...
    def setTextValue(self, theTextValue: RStringI, _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class RectangleI(Rectangle):
    X: ClassVar[str] = ...
    Y: ClassVar[str] = ...
    WIDTH: ClassVar[str] = ...
    HEIGHT: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadX(self): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, _x, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY(self): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, _y, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWidth(self): ...
    def getWidth(self, current: Incomplete | None = ...): ...
    def setWidth(self, _width, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadHeight(self): ...
    def getHeight(self, current: Incomplete | None = ...): ...
    def setHeight(
        self, _height, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(
        self, _locked, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(
        self, _transform, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(
        self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(
        self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(
        self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(
        self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(
        self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(
        self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(
        self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(
        self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class RenderingDef(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, thePixels: PixelsI, current: None = ...): ...
    def getDefaultZ(self, current: Incomplete | None = ...): ...
    def setDefaultZ(self, theDefaultZ, current: Incomplete | None = ...): ...
    def getDefaultT(self, current: Incomplete | None = ...): ...
    def setDefaultT(self, theDefaultT, current: Incomplete | None = ...): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, current: None = ...): ...
    def unloadWaveRendering(self, current: Incomplete | None = ...): ...
    def sizeOfWaveRendering(self, current: Incomplete | None = ...): ...
    def copyWaveRendering(self, current: Incomplete | None = ...): ...
    def addChannelBinding(self, target, current: Incomplete | None = ...): ...
    def addAllChannelBindingSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannelBinding(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllChannelBindingSet(self, targets, current: Incomplete | None = ...): ...
    def clearWaveRendering(self, current: Incomplete | None = ...): ...
    def reloadWaveRendering(self, toCopy, current: Incomplete | None = ...): ...
    def getChannelBinding(self, index, current: Incomplete | None = ...): ...
    def setChannelBinding(
        self, index, theElement, current: Incomplete | None = ...
    ): ...
    def getPrimaryChannelBinding(self, current: Incomplete | None = ...): ...
    def setPrimaryChannelBinding(
        self, theElement, current: Incomplete | None = ...
    ): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getCompression(self, current: Incomplete | None = ...): ...
    def setCompression(self, theCompression, current: Incomplete | None = ...): ...
    def getQuantization(self, current: Incomplete | None = ...): ...
    def setQuantization(self, theQuantization, current: Incomplete | None = ...): ...
    def unloadProjections(self, current: Incomplete | None = ...): ...
    def sizeOfProjections(self, current: Incomplete | None = ...): ...
    def copyProjections(self, current: Incomplete | None = ...): ...
    def addProjectionDef(self, target, current: Incomplete | None = ...): ...
    def addAllProjectionDefSet(self, targets, current: Incomplete | None = ...): ...
    def removeProjectionDef(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllProjectionDefSet(self, targets, current: Incomplete | None = ...): ...
    def clearProjections(self, current: Incomplete | None = ...): ...
    def reloadProjections(self, toCopy, current: Incomplete | None = ...): ...
    def getProjectionDef(self, index, current: Incomplete | None = ...): ...
    def setProjectionDef(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryProjectionDef(self, current: Incomplete | None = ...): ...
    def setPrimaryProjectionDef(self, theElement, current: Incomplete | None = ...): ...

class RenderingDefPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getPixels(self, _ctx: Incomplete | None = ...): ...
    def setPixels(self, thePixels: PixelsI, _ctx: None = ...): ...
    def getDefaultZ(self, _ctx: Incomplete | None = ...): ...
    def setDefaultZ(self, theDefaultZ, _ctx: Incomplete | None = ...): ...
    def getDefaultT(self, _ctx: Incomplete | None = ...): ...
    def setDefaultT(self, theDefaultT, _ctx: Incomplete | None = ...): ...
    def getModel(self, _ctx: None = ...) -> RStringI: ...
    def setModel(self, theModel: RStringI, _ctx: None = ...): ...
    def unloadWaveRendering(self, _ctx: Incomplete | None = ...): ...
    def sizeOfWaveRendering(self, _ctx: Incomplete | None = ...): ...
    def copyWaveRendering(self, _ctx: Incomplete | None = ...): ...
    def addChannelBinding(self, target, _ctx: Incomplete | None = ...): ...
    def addAllChannelBindingSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeChannelBinding(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllChannelBindingSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearWaveRendering(self, _ctx: Incomplete | None = ...): ...
    def reloadWaveRendering(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getChannelBinding(self, index, _ctx: Incomplete | None = ...): ...
    def setChannelBinding(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def getPrimaryChannelBinding(self, _ctx: Incomplete | None = ...): ...
    def setPrimaryChannelBinding(self, theElement, _ctx: Incomplete | None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getCompression(self, _ctx: Incomplete | None = ...): ...
    def setCompression(self, theCompression, _ctx: Incomplete | None = ...): ...
    def getQuantization(self, _ctx: Incomplete | None = ...): ...
    def setQuantization(self, theQuantization, _ctx: Incomplete | None = ...): ...
    def unloadProjections(self, _ctx: Incomplete | None = ...): ...
    def sizeOfProjections(self, _ctx: Incomplete | None = ...): ...
    def copyProjections(self, _ctx: Incomplete | None = ...): ...
    def addProjectionDef(self, target, _ctx: Incomplete | None = ...): ...
    def addAllProjectionDefSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeProjectionDef(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllProjectionDefSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearProjections(self, _ctx: Incomplete | None = ...): ...
    def reloadProjections(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getProjectionDef(self, index, _ctx: Incomplete | None = ...): ...
    def setProjectionDef(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def getPrimaryProjectionDef(self, _ctx: Incomplete | None = ...): ...
    def setPrimaryProjectionDef(self, theElement, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class RenderingDefI(RenderingDef):
    PIXELS: ClassVar[str] = ...
    DEFAULTZ: ClassVar[str] = ...
    DEFAULTT: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    WAVERENDERING: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    COMPRESSION: ClassVar[str] = ...
    QUANTIZATION: ClassVar[str] = ...
    PROJECTIONS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadPixels(self): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, _pixels: PixelsI, current: None = ..., wrap: bool = ...): ...
    def unloadDefaultZ(self): ...
    def getDefaultZ(self, current: Incomplete | None = ...): ...
    def setDefaultZ(
        self, _defaultZ, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadDefaultT(self): ...
    def getDefaultT(self, current: Incomplete | None = ...): ...
    def setDefaultT(
        self, _defaultT, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadModel(self): ...
    def getModel(self, current: None = ...) -> RStringI: ...
    def setModel(self, _model: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadWaveRendering(self, current: Incomplete | None = ...): ...
    def isWaveRenderingLoaded(self): ...
    def sizeOfWaveRendering(self, current: Incomplete | None = ...): ...
    def copyWaveRendering(self, current: Incomplete | None = ...): ...
    def iterateWaveRendering(self): ...
    def addChannelBinding(self, target, current: Incomplete | None = ...): ...
    def addAllChannelBindingSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannelBinding(self, target, current: Incomplete | None = ...): ...
    def removeAllChannelBindingSet(self, targets, current: Incomplete | None = ...): ...
    def clearWaveRendering(self, current: Incomplete | None = ...): ...
    def reloadWaveRendering(self, toCopy, current: Incomplete | None = ...): ...
    def getChannelBinding(self, index, current: Incomplete | None = ...): ...
    def setChannelBinding(
        self, index, element, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getPrimaryChannelBinding(self, current: Incomplete | None = ...): ...
    def setPrimaryChannelBinding(self, element, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadCompression(self): ...
    def getCompression(self, current: Incomplete | None = ...): ...
    def setCompression(
        self, _compression, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadQuantization(self): ...
    def getQuantization(self, current: Incomplete | None = ...): ...
    def setQuantization(
        self, _quantization, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadProjections(self, current: Incomplete | None = ...): ...
    def isProjectionsLoaded(self): ...
    def sizeOfProjections(self, current: Incomplete | None = ...): ...
    def copyProjections(self, current: Incomplete | None = ...): ...
    def iterateProjections(self): ...
    def addProjectionDef(self, target, current: Incomplete | None = ...): ...
    def addAllProjectionDefSet(self, targets, current: Incomplete | None = ...): ...
    def removeProjectionDef(self, target, current: Incomplete | None = ...): ...
    def removeAllProjectionDefSet(self, targets, current: Incomplete | None = ...): ...
    def clearProjections(self, current: Incomplete | None = ...): ...
    def reloadProjections(self, toCopy, current: Incomplete | None = ...): ...
    def getProjectionDef(self, index, current: Incomplete | None = ...): ...
    def setProjectionDef(
        self, index, element, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getPrimaryProjectionDef(self, current: Incomplete | None = ...): ...
    def setPrimaryProjectionDef(self, element, current: Incomplete | None = ...): ...

class RenderingModel(IObject):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], current: None = ...): ...

class RenderingModelPrx(IObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, theValue: Union[int, float], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class RenderingModelI(RenderingModel):
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(
        self, _value: Union[int, float], current: None = ..., wrap: bool = ...
    ): ...

class ReverseIntensityContext(CodomainMapContext):
    def getReverse(self, current: Incomplete | None = ...): ...
    def setReverse(self, theReverse, current: Incomplete | None = ...): ...

class ReverseIntensityContextPrx(CodomainMapContextPrx):
    def getReverse(self, _ctx: Incomplete | None = ...): ...
    def setReverse(self, theReverse, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ReverseIntensityContextI(ReverseIntensityContext):
    REVERSE: ClassVar[str] = ...
    CHANNELBINDING: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadReverse(self): ...
    def getReverse(self, current: Incomplete | None = ...): ...
    def setReverse(
        self, _reverse, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadChannelBinding(self): ...
    def getChannelBinding(self, current: Incomplete | None = ...): ...
    def setChannelBinding(
        self, _channelBinding, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class Roi(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def unloadShapes(self, current: Incomplete | None = ...): ...
    def sizeOfShapes(self, current: Incomplete | None = ...): ...
    def copyShapes(self, current: Incomplete | None = ...): ...
    def addShape(self, target, current: Incomplete | None = ...): ...
    def addAllShapeSet(self, targets, current: Incomplete | None = ...): ...
    def removeShape(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllShapeSet(self, targets, current: Incomplete | None = ...): ...
    def clearShapes(self, current: Incomplete | None = ...): ...
    def reloadShapes(self, toCopy, current: Incomplete | None = ...): ...
    def getShape(self, index, current: Incomplete | None = ...): ...
    def setShape(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryShape(self, current: Incomplete | None = ...): ...
    def setPrimaryShape(self, theElement, current: Incomplete | None = ...): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(self, theImage: Optional[ImageI], current: None = ...): ...
    def getSource(self, current: Incomplete | None = ...): ...
    def setSource(self, theSource, current: Incomplete | None = ...): ...
    def unloadFolderLinks(self, current: None = ...): ...
    def sizeOfFolderLinks(self, current: Incomplete | None = ...): ...
    def copyFolderLinks(self, current: Incomplete | None = ...): ...
    def addFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderRoiLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearFolderLinks(self, current: Incomplete | None = ...): ...
    def reloadFolderLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFolderLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkFolder(self, addition, current: Incomplete | None = ...): ...
    def addFolderRoiLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findFolderRoiLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkFolder(self, removal, current: Incomplete | None = ...): ...
    def removeFolderRoiLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedFolderList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addRoiAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllRoiAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeRoiAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllRoiAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addRoiAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findRoiAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeRoiAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class RoiPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def unloadShapes(self, _ctx: Incomplete | None = ...): ...
    def sizeOfShapes(self, _ctx: Incomplete | None = ...): ...
    def copyShapes(self, _ctx: Incomplete | None = ...): ...
    def addShape(self, target, _ctx: Incomplete | None = ...): ...
    def addAllShapeSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeShape(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllShapeSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearShapes(self, _ctx: Incomplete | None = ...): ...
    def reloadShapes(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getShape(self, index, _ctx: Incomplete | None = ...): ...
    def setShape(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def getPrimaryShape(self, _ctx: Incomplete | None = ...): ...
    def setPrimaryShape(self, theElement, _ctx: Incomplete | None = ...): ...
    def getImage(self, _ctx: Incomplete | None = ...): ...
    def setImage(self, theImage: Optional[ImageI], _ctx: None = ...): ...
    def getSource(self, _ctx: Incomplete | None = ...): ...
    def setSource(self, theSource, _ctx: Incomplete | None = ...): ...
    def unloadFolderLinks(self, _ctx: None = ...): ...
    def sizeOfFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def copyFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def addFolderRoiLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllFolderRoiLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeFolderRoiLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllFolderRoiLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadFolderLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getFolderLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkFolder(self, addition, _ctx: Incomplete | None = ...): ...
    def addFolderRoiLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findFolderRoiLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkFolder(self, removal, _ctx: Incomplete | None = ...): ...
    def removeFolderRoiLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedFolderList(self, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addRoiAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllRoiAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeRoiAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllRoiAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addRoiAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findRoiAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeRoiAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class RoiI(Roi):
    NAME: ClassVar[str] = ...
    SHAPES: ClassVar[str] = ...
    IMAGE: ClassVar[str] = ...
    SOURCE: ClassVar[str] = ...
    FOLDERLINKS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadShapes(self, current: Incomplete | None = ...): ...
    def isShapesLoaded(self): ...
    def sizeOfShapes(self, current: Incomplete | None = ...): ...
    def copyShapes(self, current: Incomplete | None = ...): ...
    def iterateShapes(self): ...
    def addShape(self, target, current: Incomplete | None = ...): ...
    def addAllShapeSet(self, targets, current: Incomplete | None = ...): ...
    def removeShape(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeSet(self, targets, current: Incomplete | None = ...): ...
    def clearShapes(self, current: Incomplete | None = ...): ...
    def reloadShapes(self, toCopy, current: Incomplete | None = ...): ...
    def getShape(self, index, current: Incomplete | None = ...): ...
    def setShape(
        self, index, element, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getPrimaryShape(self, current: Incomplete | None = ...): ...
    def setPrimaryShape(self, element, current: Incomplete | None = ...): ...
    def unloadImage(self): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(
        self, _image: Optional[ImageI], current: None = ..., wrap: bool = ...
    ): ...
    def unloadSource(self): ...
    def getSource(self, current: Incomplete | None = ...): ...
    def setSource(
        self, _source, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFolderLinks(self, current: None = ...): ...
    def isFolderLinksLoaded(self): ...
    def sizeOfFolderLinks(self, current: Incomplete | None = ...): ...
    def copyFolderLinks(self, current: Incomplete | None = ...): ...
    def iterateFolderLinks(self): ...
    def addFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearFolderLinks(self, current: Incomplete | None = ...): ...
    def reloadFolderLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFolderLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkFolder(self, addition, current: Incomplete | None = ...): ...
    def addFolderRoiLinkToBoth(self, link, bothSides): ...
    def findFolderRoiLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkFolder(self, removal, current: Incomplete | None = ...): ...
    def removeFolderRoiLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedFolderList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addRoiAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllRoiAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeRoiAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllRoiAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addRoiAnnotationLinkToBoth(self, link, bothSides): ...
    def findRoiAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeRoiAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class RoiAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class RoiAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class RoiAnnotationLinkI(RoiAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class Screen(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getProtocolIdentifier(self, current: Incomplete | None = ...): ...
    def setProtocolIdentifier(
        self, theProtocolIdentifier, current: Incomplete | None = ...
    ): ...
    def getProtocolDescription(self, current: Incomplete | None = ...): ...
    def setProtocolDescription(
        self, theProtocolDescription, current: Incomplete | None = ...
    ): ...
    def getReagentSetIdentifier(self, current: Incomplete | None = ...): ...
    def setReagentSetIdentifier(
        self, theReagentSetIdentifier, current: Incomplete | None = ...
    ): ...
    def getReagentSetDescription(self, current: Incomplete | None = ...): ...
    def setReagentSetDescription(
        self, theReagentSetDescription, current: Incomplete | None = ...
    ): ...
    def unloadPlateLinks(self, current: Incomplete | None = ...): ...
    def sizeOfPlateLinks(self, current: Incomplete | None = ...): ...
    def copyPlateLinks(self, current: Incomplete | None = ...): ...
    def addScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeScreenPlateLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllScreenPlateLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearPlateLinks(self, current: Incomplete | None = ...): ...
    def reloadPlateLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getPlateLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkPlate(self, addition, current: Incomplete | None = ...): ...
    def addScreenPlateLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findScreenPlateLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkPlate(self, removal, current: Incomplete | None = ...): ...
    def removeScreenPlateLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedPlateList(self, current: Incomplete | None = ...): ...
    def unloadReagents(self, current: Incomplete | None = ...): ...
    def sizeOfReagents(self, current: Incomplete | None = ...): ...
    def copyReagents(self, current: Incomplete | None = ...): ...
    def addReagent(self, target, current: Incomplete | None = ...): ...
    def addAllReagentSet(self, targets, current: Incomplete | None = ...): ...
    def removeReagent(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllReagentSet(self, targets, current: Incomplete | None = ...): ...
    def clearReagents(self, current: Incomplete | None = ...): ...
    def reloadReagents(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addScreenAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeScreenAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllScreenAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addScreenAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findScreenAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeScreenAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class ScreenPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def getProtocolIdentifier(self, _ctx: Incomplete | None = ...): ...
    def setProtocolIdentifier(
        self, theProtocolIdentifier, _ctx: Incomplete | None = ...
    ): ...
    def getProtocolDescription(self, _ctx: Incomplete | None = ...): ...
    def setProtocolDescription(
        self, theProtocolDescription, _ctx: Incomplete | None = ...
    ): ...
    def getReagentSetIdentifier(self, _ctx: Incomplete | None = ...): ...
    def setReagentSetIdentifier(
        self, theReagentSetIdentifier, _ctx: Incomplete | None = ...
    ): ...
    def getReagentSetDescription(self, _ctx: Incomplete | None = ...): ...
    def setReagentSetDescription(
        self, theReagentSetDescription, _ctx: Incomplete | None = ...
    ): ...
    def unloadPlateLinks(self, _ctx: Incomplete | None = ...): ...
    def sizeOfPlateLinks(self, _ctx: Incomplete | None = ...): ...
    def copyPlateLinks(self, _ctx: Incomplete | None = ...): ...
    def addScreenPlateLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllScreenPlateLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeScreenPlateLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllScreenPlateLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearPlateLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadPlateLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getPlateLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkPlate(self, addition, _ctx: Incomplete | None = ...): ...
    def addScreenPlateLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findScreenPlateLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkPlate(self, removal, _ctx: Incomplete | None = ...): ...
    def removeScreenPlateLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedPlateList(self, _ctx: Incomplete | None = ...): ...
    def unloadReagents(self, _ctx: Incomplete | None = ...): ...
    def sizeOfReagents(self, _ctx: Incomplete | None = ...): ...
    def copyReagents(self, _ctx: Incomplete | None = ...): ...
    def addReagent(self, target, _ctx: Incomplete | None = ...): ...
    def addAllReagentSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeReagent(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllReagentSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearReagents(self, _ctx: Incomplete | None = ...): ...
    def reloadReagents(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addScreenAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllScreenAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeScreenAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllScreenAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addScreenAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findScreenAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeScreenAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ScreenI(Screen):
    TYPE: ClassVar[str] = ...
    PROTOCOLIDENTIFIER: ClassVar[str] = ...
    PROTOCOLDESCRIPTION: ClassVar[str] = ...
    REAGENTSETIDENTIFIER: ClassVar[str] = ...
    REAGENTSETDESCRIPTION: ClassVar[str] = ...
    PLATELINKS: ClassVar[str] = ...
    REAGENTS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadProtocolIdentifier(self): ...
    def getProtocolIdentifier(self, current: Incomplete | None = ...): ...
    def setProtocolIdentifier(
        self, _protocolIdentifier, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadProtocolDescription(self): ...
    def getProtocolDescription(self, current: Incomplete | None = ...): ...
    def setProtocolDescription(
        self, _protocolDescription, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadReagentSetIdentifier(self): ...
    def getReagentSetIdentifier(self, current: Incomplete | None = ...): ...
    def setReagentSetIdentifier(
        self, _reagentSetIdentifier, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadReagentSetDescription(self): ...
    def getReagentSetDescription(self, current: Incomplete | None = ...): ...
    def setReagentSetDescription(
        self, _reagentSetDescription, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPlateLinks(self, current: Incomplete | None = ...): ...
    def isPlateLinksLoaded(self): ...
    def sizeOfPlateLinks(self, current: Incomplete | None = ...): ...
    def copyPlateLinks(self, current: Incomplete | None = ...): ...
    def iteratePlateLinks(self): ...
    def addScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def removeAllScreenPlateLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearPlateLinks(self, current: Incomplete | None = ...): ...
    def reloadPlateLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getPlateLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkPlate(self, addition, current: Incomplete | None = ...): ...
    def addScreenPlateLinkToBoth(self, link, bothSides): ...
    def findScreenPlateLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkPlate(self, removal, current: Incomplete | None = ...): ...
    def removeScreenPlateLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedPlateList(self, current: Incomplete | None = ...): ...
    def unloadReagents(self, current: Incomplete | None = ...): ...
    def isReagentsLoaded(self): ...
    def sizeOfReagents(self, current: Incomplete | None = ...): ...
    def copyReagents(self, current: Incomplete | None = ...): ...
    def iterateReagents(self): ...
    def addReagent(self, target, current: Incomplete | None = ...): ...
    def addAllReagentSet(self, targets, current: Incomplete | None = ...): ...
    def removeReagent(self, target, current: Incomplete | None = ...): ...
    def removeAllReagentSet(self, targets, current: Incomplete | None = ...): ...
    def clearReagents(self, current: Incomplete | None = ...): ...
    def reloadReagents(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addScreenAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeScreenAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllScreenAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addScreenAnnotationLinkToBoth(self, link, bothSides): ...
    def findScreenAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeScreenAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class ScreenAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ScreenAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ScreenAnnotationLinkI(ScreenAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ScreenPlateLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ScreenPlateLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ScreenPlateLinkI(ScreenPlateLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ScriptJob(Job):
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], current: None = ...
    ): ...

class ScriptJobPrx(JobPrx):
    def getDescription(self, _ctx: None = ...) -> RStringI: ...
    def setDescription(
        self, theDescription: Union[RStringI, str], _ctx: None = ...
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ScriptJobI(ScriptJob):
    DESCRIPTION: ClassVar[str] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(
        self, _username, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(
        self, _groupname, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(
        self, _submitted, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(
        self, _scheduledFor: RTimeI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(
        self, _finished, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: None = ...) -> int: ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class Session(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getNode(self, current: Incomplete | None = ...): ...
    def setNode(self, theNode, current: Incomplete | None = ...): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, theUuid, current: Incomplete | None = ...): ...
    def getOwner(self, current: Incomplete | None = ...) -> Optional[ExperimenterI]: ...
    def setOwner(
        self, theOwner: Optional[ExperimenterI], current: Incomplete | None = ...
    ): ...
    def getSudoer(self, current: Incomplete | None = ...): ...
    def setSudoer(self, theSudoer, current: Incomplete | None = ...): ...
    def getTimeToIdle(self, current: Incomplete | None = ...): ...
    def setTimeToIdle(self, theTimeToIdle, current: Incomplete | None = ...): ...
    def getTimeToLive(self, current: Incomplete | None = ...): ...
    def setTimeToLive(self, theTimeToLive, current: Incomplete | None = ...): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, theStarted, current: Incomplete | None = ...): ...
    def getClosed(self, current: Incomplete | None = ...): ...
    def setClosed(self, theClosed, current: Incomplete | None = ...): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, theMessage, current: Incomplete | None = ...): ...
    def getDefaultEventType(self, current: Incomplete | None = ...): ...
    def setDefaultEventType(
        self, theDefaultEventType, current: Incomplete | None = ...
    ): ...
    def getUserAgent(self, current: Incomplete | None = ...): ...
    def setUserAgent(self, theUserAgent, current: Incomplete | None = ...): ...
    def getUserIP(self, current: Incomplete | None = ...): ...
    def setUserIP(self, theUserIP, current: Incomplete | None = ...): ...
    def unloadEvents(self, current: Incomplete | None = ...): ...
    def sizeOfEvents(self, current: Incomplete | None = ...): ...
    def copyEvents(self, current: Incomplete | None = ...): ...
    def addEvent(self, target, current: Incomplete | None = ...): ...
    def addAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def removeEvent(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def clearEvents(self, current: Incomplete | None = ...): ...
    def reloadEvents(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addSessionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllSessionAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeSessionAnnotationLink(
        self, theTarget, current: Incomplete | None = ...
    ): ...
    def removeAllSessionAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addSessionAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findSessionAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeSessionAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class SessionPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getNode(self, _ctx: Incomplete | None = ...): ...
    def setNode(self, theNode, _ctx: Incomplete | None = ...): ...
    def getUuid(self, _ctx: Incomplete | None = ...): ...
    def setUuid(self, theUuid, _ctx: Incomplete | None = ...): ...
    def getOwner(self, _ctx: Incomplete | None = ...) -> Optional[ExperimenterI]: ...
    def setOwner(
        self, theOwner: Optional[ExperimenterI], _ctx: Incomplete | None = ...
    ): ...
    def getSudoer(self, _ctx: Incomplete | None = ...): ...
    def setSudoer(self, theSudoer, _ctx: Incomplete | None = ...): ...
    def getTimeToIdle(self, _ctx: Incomplete | None = ...): ...
    def setTimeToIdle(self, theTimeToIdle, _ctx: Incomplete | None = ...): ...
    def getTimeToLive(self, _ctx: Incomplete | None = ...): ...
    def setTimeToLive(self, theTimeToLive, _ctx: Incomplete | None = ...): ...
    def getStarted(self, _ctx: Incomplete | None = ...): ...
    def setStarted(self, theStarted, _ctx: Incomplete | None = ...): ...
    def getClosed(self, _ctx: Incomplete | None = ...): ...
    def setClosed(self, theClosed, _ctx: Incomplete | None = ...): ...
    def getMessage(self, _ctx: Incomplete | None = ...): ...
    def setMessage(self, theMessage, _ctx: Incomplete | None = ...): ...
    def getDefaultEventType(self, _ctx: Incomplete | None = ...): ...
    def setDefaultEventType(
        self, theDefaultEventType, _ctx: Incomplete | None = ...
    ): ...
    def getUserAgent(self, _ctx: Incomplete | None = ...): ...
    def setUserAgent(self, theUserAgent, _ctx: Incomplete | None = ...): ...
    def getUserIP(self, _ctx: Incomplete | None = ...): ...
    def setUserIP(self, theUserIP, _ctx: Incomplete | None = ...): ...
    def unloadEvents(self, _ctx: Incomplete | None = ...): ...
    def sizeOfEvents(self, _ctx: Incomplete | None = ...): ...
    def copyEvents(self, _ctx: Incomplete | None = ...): ...
    def addEvent(self, target, _ctx: Incomplete | None = ...): ...
    def addAllEventSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeEvent(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllEventSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearEvents(self, _ctx: Incomplete | None = ...): ...
    def reloadEvents(self, toCopy, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addSessionAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllSessionAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def removeSessionAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllSessionAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addSessionAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findSessionAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeSessionAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class SessionI(Session):
    deprecations_warned: ClassVar[set] = ...
    NODE: ClassVar[str] = ...
    UUID: ClassVar[str] = ...
    OWNER: ClassVar[str] = ...
    SUDOER: ClassVar[str] = ...
    TIMETOIDLE: ClassVar[str] = ...
    TIMETOLIVE: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    CLOSED: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    DEFAULTEVENTTYPE: ClassVar[str] = ...
    USERAGENT: ClassVar[str] = ...
    USERIP: ClassVar[str] = ...
    EVENTS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    @staticmethod
    def warn_of_deprecation(item): ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadNode(self): ...
    def getNode(self, current: Incomplete | None = ...): ...
    def setNode(self, _node, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUuid(self): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, _uuid, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOwner(self): ...
    def getOwner(self, current: Incomplete | None = ...) -> Optional[ExperimenterI]: ...
    def setOwner(
        self,
        _owner: Optional[ExperimenterI],
        current: Incomplete | None = ...,
        wrap: bool = ...,
    ): ...
    def unloadSudoer(self): ...
    def getSudoer(self, current: Incomplete | None = ...): ...
    def setSudoer(
        self, _sudoer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTimeToIdle(self): ...
    def getTimeToIdle(self, current: Incomplete | None = ...): ...
    def setTimeToIdle(
        self, _timeToIdle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTimeToLive(self): ...
    def getTimeToLive(self, current: Incomplete | None = ...): ...
    def setTimeToLive(
        self, _timeToLive, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadClosed(self): ...
    def getClosed(self, current: Incomplete | None = ...): ...
    def setClosed(
        self, _closed, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadDefaultEventType(self): ...
    def getDefaultEventType(self, current: Incomplete | None = ...): ...
    def setDefaultEventType(
        self, _defaultEventType, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadUserAgent(self): ...
    def getUserAgent(self, current: Incomplete | None = ...): ...
    def setUserAgent(
        self, _userAgent, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadUserIP(self): ...
    def getUserIP(self, current: Incomplete | None = ...): ...
    def setUserIP(
        self, _userIP, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadEvents(self, current: Incomplete | None = ...): ...
    def isEventsLoaded(self): ...
    def sizeOfEvents(self, current: Incomplete | None = ...): ...
    def copyEvents(self, current: Incomplete | None = ...): ...
    def iterateEvents(self): ...
    def addEvent(self, target, current: Incomplete | None = ...): ...
    def addAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def removeEvent(self, target, current: Incomplete | None = ...): ...
    def removeAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def clearEvents(self, current: Incomplete | None = ...): ...
    def reloadEvents(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addSessionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllSessionAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeSessionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllSessionAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addSessionAnnotationLinkToBoth(self, link, bothSides): ...
    def findSessionAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeSessionAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class SessionAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class SessionAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class SessionAnnotationLinkI(SessionAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ShapeAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ShapeAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ShapeAnnotationLinkI(ShapeAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class Share(Session):
    def getGroup(self, current: Incomplete | None = ...) -> ExperimenterGroupI: ...
    def setGroup(
        self, theGroup: ExperimenterGroupI, current: Incomplete | None = ...
    ): ...
    def getItemCount(self, current: Incomplete | None = ...): ...
    def setItemCount(self, theItemCount, current: Incomplete | None = ...): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(self, theActive, current: Incomplete | None = ...): ...
    def getData(self, current: Incomplete | None = ...): ...
    def setData(self, theData, current: Incomplete | None = ...): ...

class SharePrx(SessionPrx):
    def getGroup(self, _ctx: Incomplete | None = ...) -> ExperimenterGroupI: ...
    def setGroup(self, theGroup: ExperimenterGroupI, _ctx: Incomplete | None = ...): ...
    def getItemCount(self, _ctx: Incomplete | None = ...): ...
    def setItemCount(self, theItemCount, _ctx: Incomplete | None = ...): ...
    def getActive(self, _ctx: Incomplete | None = ...): ...
    def setActive(self, theActive, _ctx: Incomplete | None = ...): ...
    def getData(self, _ctx: Incomplete | None = ...): ...
    def setData(self, theData, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ShareI(Share):
    deprecations_warned: ClassVar[set] = ...
    GROUP: ClassVar[str] = ...
    ITEMCOUNT: ClassVar[str] = ...
    ACTIVE: ClassVar[str] = ...
    DATA: ClassVar[str] = ...
    NODE: ClassVar[str] = ...
    UUID: ClassVar[str] = ...
    OWNER: ClassVar[str] = ...
    SUDOER: ClassVar[str] = ...
    TIMETOIDLE: ClassVar[str] = ...
    TIMETOLIVE: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    CLOSED: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    DEFAULTEVENTTYPE: ClassVar[str] = ...
    USERAGENT: ClassVar[str] = ...
    USERIP: ClassVar[str] = ...
    EVENTS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    @staticmethod
    def warn_of_deprecation(item): ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadGroup(self): ...
    def getGroup(self, current: Incomplete | None = ...) -> ExperimenterGroupI: ...
    def setGroup(
        self,
        _group: ExperimenterGroupI,
        current: Incomplete | None = ...,
        wrap: bool = ...,
    ): ...
    def unloadItemCount(self): ...
    def getItemCount(self, current: Incomplete | None = ...): ...
    def setItemCount(
        self, _itemCount, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadActive(self): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(
        self, _active, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadData(self): ...
    def getData(self, current: Incomplete | None = ...): ...
    def setData(self, _data, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNode(self): ...
    def getNode(self, current: Incomplete | None = ...): ...
    def setNode(self, _node, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUuid(self): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, _uuid, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOwner(self): ...
    def getOwner(self, current: Incomplete | None = ...) -> Optional[ExperimenterI]: ...
    def setOwner(
        self,
        _owner: Optional[ExperimenterI],
        current: Incomplete | None = ...,
        wrap: bool = ...,
    ): ...
    def unloadSudoer(self): ...
    def getSudoer(self, current: Incomplete | None = ...): ...
    def setSudoer(
        self, _sudoer, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTimeToIdle(self): ...
    def getTimeToIdle(self, current: Incomplete | None = ...): ...
    def setTimeToIdle(
        self, _timeToIdle, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTimeToLive(self): ...
    def getTimeToLive(self, current: Incomplete | None = ...): ...
    def setTimeToLive(
        self, _timeToLive, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadClosed(self): ...
    def getClosed(self, current: Incomplete | None = ...): ...
    def setClosed(
        self, _closed, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadDefaultEventType(self): ...
    def getDefaultEventType(self, current: Incomplete | None = ...): ...
    def setDefaultEventType(
        self, _defaultEventType, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadUserAgent(self): ...
    def getUserAgent(self, current: Incomplete | None = ...): ...
    def setUserAgent(
        self, _userAgent, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadUserIP(self): ...
    def getUserIP(self, current: Incomplete | None = ...): ...
    def setUserIP(
        self, _userIP, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadEvents(self, current: Incomplete | None = ...): ...
    def isEventsLoaded(self): ...
    def sizeOfEvents(self, current: Incomplete | None = ...): ...
    def copyEvents(self, current: Incomplete | None = ...): ...
    def iterateEvents(self): ...
    def addEvent(self, target, current: Incomplete | None = ...): ...
    def addAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def removeEvent(self, target, current: Incomplete | None = ...): ...
    def removeAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def clearEvents(self, current: Incomplete | None = ...): ...
    def reloadEvents(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addSessionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllSessionAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeSessionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllSessionAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addSessionAnnotationLinkToBoth(self, link, bothSides): ...
    def findSessionAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeSessionAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ShareMember(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class ShareMemberPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ShareMemberI(ShareMember):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class StageLabel(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getPositionX(self, current: Incomplete | None = ...): ...
    def setPositionX(self, thePositionX, current: Incomplete | None = ...): ...
    def getPositionY(self, current: Incomplete | None = ...): ...
    def setPositionY(self, thePositionY, current: Incomplete | None = ...): ...
    def getPositionZ(self, current: Incomplete | None = ...): ...
    def setPositionZ(self, thePositionZ, current: Incomplete | None = ...): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], current: None = ...): ...

class StageLabelPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getPositionX(self, _ctx: Incomplete | None = ...): ...
    def setPositionX(self, thePositionX, _ctx: Incomplete | None = ...): ...
    def getPositionY(self, _ctx: Incomplete | None = ...): ...
    def setPositionY(self, thePositionY, _ctx: Incomplete | None = ...): ...
    def getPositionZ(self, _ctx: Incomplete | None = ...): ...
    def setPositionZ(self, thePositionZ, _ctx: Incomplete | None = ...): ...
    def getName(self, _ctx: None = ...) -> RStringI: ...
    def setName(self, theName: Union[RStringI, str], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class StageLabelI(StageLabel):
    POSITIONX: ClassVar[str] = ...
    POSITIONY: ClassVar[str] = ...
    POSITIONZ: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadPositionX(self): ...
    def getPositionX(self, current: Incomplete | None = ...): ...
    def setPositionX(
        self, _positionX, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPositionY(self): ...
    def getPositionY(self, current: Incomplete | None = ...): ...
    def setPositionY(
        self, _positionY, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPositionZ(self): ...
    def getPositionZ(self, current: Incomplete | None = ...): ...
    def setPositionZ(
        self, _positionZ, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...

class StatsInfo(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getGlobalMin(self, current: Incomplete | None = ...): ...
    def setGlobalMin(self, theGlobalMin, current: Incomplete | None = ...): ...
    def getGlobalMax(self, current: Incomplete | None = ...): ...
    def setGlobalMax(self, theGlobalMax, current: Incomplete | None = ...): ...

class StatsInfoPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getGlobalMin(self, _ctx: Incomplete | None = ...): ...
    def setGlobalMin(self, theGlobalMin, _ctx: Incomplete | None = ...): ...
    def getGlobalMax(self, _ctx: Incomplete | None = ...): ...
    def setGlobalMax(self, theGlobalMax, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class StatsInfoI(StatsInfo):
    GLOBALMIN: ClassVar[str] = ...
    GLOBALMAX: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadGlobalMin(self): ...
    def getGlobalMin(self, current: Incomplete | None = ...): ...
    def setGlobalMin(
        self, _globalMin, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGlobalMax(self): ...
    def getGlobalMax(self, current: Incomplete | None = ...): ...
    def setGlobalMax(
        self, _globalMax, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class TagAnnotation(TextAnnotation): ...

class TagAnnotationPrx(TextAnnotationPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class TagAnnotationI(TagAnnotation):
    TEXTVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class TermAnnotation(BasicAnnotation):
    def getTermValue(self, current: Incomplete | None = ...): ...
    def setTermValue(self, theTermValue, current: Incomplete | None = ...): ...

class TermAnnotationPrx(BasicAnnotationPrx):
    def getTermValue(self, _ctx: Incomplete | None = ...): ...
    def setTermValue(self, theTermValue, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class TermAnnotationI(TermAnnotation):
    TERMVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadTermValue(self): ...
    def getTermValue(self, current: Incomplete | None = ...): ...
    def setTermValue(
        self, _termValue, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Thumbnail(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, thePixels: PixelsI, current: None = ...): ...
    def getMimeType(self, current: Incomplete | None = ...): ...
    def setMimeType(self, theMimeType, current: Incomplete | None = ...): ...
    def getSizeX(self, current: None = ...) -> RIntI: ...
    def setSizeX(self, theSizeX: RIntI, current: None = ...): ...
    def getSizeY(self, current: None = ...) -> RIntI: ...
    def setSizeY(self, theSizeY: RIntI, current: None = ...): ...
    def getRef(self, current: Incomplete | None = ...): ...
    def setRef(self, theRef, current: Incomplete | None = ...): ...

class ThumbnailPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getPixels(self, _ctx: Incomplete | None = ...): ...
    def setPixels(self, thePixels: PixelsI, _ctx: None = ...): ...
    def getMimeType(self, _ctx: Incomplete | None = ...): ...
    def setMimeType(self, theMimeType, _ctx: Incomplete | None = ...): ...
    def getSizeX(self, _ctx: None = ...) -> RIntI: ...
    def setSizeX(self, theSizeX: RIntI, _ctx: None = ...): ...
    def getSizeY(self, _ctx: None = ...) -> RIntI: ...
    def setSizeY(self, theSizeY: RIntI, _ctx: None = ...): ...
    def getRef(self, _ctx: Incomplete | None = ...): ...
    def setRef(self, theRef, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ThumbnailI(Thumbnail):
    PIXELS: ClassVar[str] = ...
    MIMETYPE: ClassVar[str] = ...
    SIZEX: ClassVar[str] = ...
    SIZEY: ClassVar[str] = ...
    REF: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadPixels(self): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, _pixels: PixelsI, current: None = ..., wrap: bool = ...): ...
    def unloadMimeType(self): ...
    def getMimeType(self, current: Incomplete | None = ...): ...
    def setMimeType(
        self, _mimeType, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSizeX(self): ...
    def getSizeX(self, current: None = ...) -> RIntI: ...
    def setSizeX(self, _sizeX: RIntI, current: None = ..., wrap: bool = ...): ...
    def unloadSizeY(self): ...
    def getSizeY(self, current: None = ...) -> RIntI: ...
    def setSizeY(self, _sizeY: RIntI, current: None = ..., wrap: bool = ...): ...
    def unloadRef(self): ...
    def getRef(self, current: Incomplete | None = ...): ...
    def setRef(self, _ref, current: Incomplete | None = ..., wrap: bool = ...): ...

class ThumbnailGenerationJob(Job): ...

class ThumbnailGenerationJobPrx(JobPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ThumbnailGenerationJobI(ThumbnailGenerationJob):
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(
        self, _username, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(
        self, _groupname, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(
        self, _submitted, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(
        self, _scheduledFor: RTimeI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(
        self, _finished, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: None = ...) -> int: ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class TimestampAnnotation(BasicAnnotation):
    def getTimeValue(self, current: Incomplete | None = ...): ...
    def setTimeValue(self, theTimeValue, current: Incomplete | None = ...): ...

class TimestampAnnotationPrx(BasicAnnotationPrx):
    def getTimeValue(self, _ctx: Incomplete | None = ...): ...
    def setTimeValue(self, theTimeValue, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class TimestampAnnotationI(TimestampAnnotation):
    TIMEVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadTimeValue(self): ...
    def getTimeValue(self, current: Incomplete | None = ...): ...
    def setTimeValue(
        self, _timeValue, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class TransmittanceRange(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getCutIn(self, current: Incomplete | None = ...): ...
    def setCutIn(self, theCutIn, current: Incomplete | None = ...): ...
    def getCutOut(self, current: Incomplete | None = ...): ...
    def setCutOut(self, theCutOut, current: Incomplete | None = ...): ...
    def getCutInTolerance(self, current: Incomplete | None = ...): ...
    def setCutInTolerance(
        self, theCutInTolerance, current: Incomplete | None = ...
    ): ...
    def getCutOutTolerance(self, current: Incomplete | None = ...): ...
    def setCutOutTolerance(
        self, theCutOutTolerance, current: Incomplete | None = ...
    ): ...
    def getTransmittance(self, current: Incomplete | None = ...): ...
    def setTransmittance(self, theTransmittance, current: Incomplete | None = ...): ...

class TransmittanceRangePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getCutIn(self, _ctx: Incomplete | None = ...): ...
    def setCutIn(self, theCutIn, _ctx: Incomplete | None = ...): ...
    def getCutOut(self, _ctx: Incomplete | None = ...): ...
    def setCutOut(self, theCutOut, _ctx: Incomplete | None = ...): ...
    def getCutInTolerance(self, _ctx: Incomplete | None = ...): ...
    def setCutInTolerance(self, theCutInTolerance, _ctx: Incomplete | None = ...): ...
    def getCutOutTolerance(self, _ctx: Incomplete | None = ...): ...
    def setCutOutTolerance(self, theCutOutTolerance, _ctx: Incomplete | None = ...): ...
    def getTransmittance(self, _ctx: Incomplete | None = ...): ...
    def setTransmittance(self, theTransmittance, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class TransmittanceRangeI(TransmittanceRange):
    CUTIN: ClassVar[str] = ...
    CUTOUT: ClassVar[str] = ...
    CUTINTOLERANCE: ClassVar[str] = ...
    CUTOUTTOLERANCE: ClassVar[str] = ...
    TRANSMITTANCE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadCutIn(self): ...
    def getCutIn(self, current: Incomplete | None = ...): ...
    def setCutIn(self, _cutIn, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCutOut(self): ...
    def getCutOut(self, current: Incomplete | None = ...): ...
    def setCutOut(
        self, _cutOut, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadCutInTolerance(self): ...
    def getCutInTolerance(self, current: Incomplete | None = ...): ...
    def setCutInTolerance(
        self, _cutInTolerance, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadCutOutTolerance(self): ...
    def getCutOutTolerance(self, current: Incomplete | None = ...): ...
    def setCutOutTolerance(
        self, _cutOutTolerance, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadTransmittance(self): ...
    def getTransmittance(self, current: Incomplete | None = ...): ...
    def setTransmittance(
        self, _transmittance, current: Incomplete | None = ..., wrap: bool = ...
    ): ...

class UploadJob(Job):
    def getVersionInfoAsMap(self, current: Incomplete | None = ...): ...
    def getVersionInfo(self, current: Incomplete | None = ...): ...
    def setVersionInfo(self, theVersionInfo, current: Incomplete | None = ...): ...

class UploadJobPrx(JobPrx):
    def getVersionInfoAsMap(self, _ctx: Incomplete | None = ...): ...
    def getVersionInfo(self, _ctx: Incomplete | None = ...): ...
    def setVersionInfo(self, theVersionInfo, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class UploadJobI(UploadJob):
    VERSIONINFO: ClassVar[str] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadVersionInfo(self): ...
    def getVersionInfo(self, current: Incomplete | None = ...): ...
    def setVersionInfo(
        self, _versionInfo, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getVersionInfoAsMap(self, current: Incomplete | None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(
        self, _username, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(
        self, _groupname, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(
        self, _message, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(
        self, _submitted, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(
        self, _scheduledFor: RTimeI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(
        self, _started, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(
        self, _finished, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: None = ...) -> int: ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class Well(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, theStatus, current: Incomplete | None = ...): ...
    def getColumn(self, current: None = ...) -> RIntI: ...
    def setColumn(self, theColumn: RIntI, current: None = ...): ...
    def getRow(self, current: None = ...) -> RIntI: ...
    def setRow(self, theRow: RIntI, current: None = ...): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, theRed, current: Incomplete | None = ...): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, theGreen, current: Incomplete | None = ...): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, theBlue, current: Incomplete | None = ...): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, theAlpha, current: Incomplete | None = ...): ...
    def unloadReagentLinks(self, current: Incomplete | None = ...): ...
    def sizeOfReagentLinks(self, current: Incomplete | None = ...): ...
    def copyReagentLinks(self, current: Incomplete | None = ...): ...
    def addWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellReagentLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellReagentLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearReagentLinks(self, current: Incomplete | None = ...): ...
    def reloadReagentLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getReagentLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkReagent(self, addition, current: Incomplete | None = ...): ...
    def addWellReagentLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findWellReagentLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkReagent(self, removal, current: Incomplete | None = ...): ...
    def removeWellReagentLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedReagentList(self, current: Incomplete | None = ...): ...
    def getExternalDescription(self, current: Incomplete | None = ...): ...
    def setExternalDescription(
        self, theExternalDescription, current: Incomplete | None = ...
    ): ...
    def getExternalIdentifier(self, current: Incomplete | None = ...): ...
    def setExternalIdentifier(
        self, theExternalIdentifier, current: Incomplete | None = ...
    ): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def unloadWellSamples(self, current: None = ...): ...
    def sizeOfWellSamples(self, current: Incomplete | None = ...): ...
    def copyWellSamples(self, current: Incomplete | None = ...): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSamples(self, current: Incomplete | None = ...): ...
    def reloadWellSamples(self, toCopy, current: Incomplete | None = ...): ...
    def getWellSample(self, index, current: Incomplete | None = ...): ...
    def setWellSample(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryWellSample(self, current: Incomplete | None = ...): ...
    def setPrimaryWellSample(self, theElement, current: Incomplete | None = ...): ...
    def getPlate(self, current: Incomplete | None = ...): ...
    def setPlate(self, thePlate, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def addWellAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeWellAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addWellAnnotationLinkToBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def findWellAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeWellAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class WellPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getStatus(self, _ctx: Incomplete | None = ...): ...
    def setStatus(self, theStatus, _ctx: Incomplete | None = ...): ...
    def getColumn(self, _ctx: None = ...) -> RIntI: ...
    def setColumn(self, theColumn: RIntI, _ctx: None = ...): ...
    def getRow(self, _ctx: None = ...) -> RIntI: ...
    def setRow(self, theRow: RIntI, _ctx: None = ...): ...
    def getRed(self, _ctx: Incomplete | None = ...): ...
    def setRed(self, theRed, _ctx: Incomplete | None = ...): ...
    def getGreen(self, _ctx: Incomplete | None = ...): ...
    def setGreen(self, theGreen, _ctx: Incomplete | None = ...): ...
    def getBlue(self, _ctx: Incomplete | None = ...): ...
    def setBlue(self, theBlue, _ctx: Incomplete | None = ...): ...
    def getAlpha(self, _ctx: Incomplete | None = ...): ...
    def setAlpha(self, theAlpha, _ctx: Incomplete | None = ...): ...
    def unloadReagentLinks(self, _ctx: Incomplete | None = ...): ...
    def sizeOfReagentLinks(self, _ctx: Incomplete | None = ...): ...
    def copyReagentLinks(self, _ctx: Incomplete | None = ...): ...
    def addWellReagentLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllWellReagentLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeWellReagentLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllWellReagentLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearReagentLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadReagentLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getReagentLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkReagent(self, addition, _ctx: Incomplete | None = ...): ...
    def addWellReagentLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findWellReagentLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkReagent(self, removal, _ctx: Incomplete | None = ...): ...
    def removeWellReagentLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedReagentList(self, _ctx: Incomplete | None = ...): ...
    def getExternalDescription(self, _ctx: Incomplete | None = ...): ...
    def setExternalDescription(
        self, theExternalDescription, _ctx: Incomplete | None = ...
    ): ...
    def getExternalIdentifier(self, _ctx: Incomplete | None = ...): ...
    def setExternalIdentifier(
        self, theExternalIdentifier, _ctx: Incomplete | None = ...
    ): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def unloadWellSamples(self, _ctx: None = ...): ...
    def sizeOfWellSamples(self, _ctx: Incomplete | None = ...): ...
    def copyWellSamples(self, _ctx: Incomplete | None = ...): ...
    def addWellSample(self, target, _ctx: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeWellSample(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def clearWellSamples(self, _ctx: Incomplete | None = ...): ...
    def reloadWellSamples(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getWellSample(self, index, _ctx: Incomplete | None = ...): ...
    def setWellSample(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def getPrimaryWellSample(self, _ctx: Incomplete | None = ...): ...
    def setPrimaryWellSample(self, theElement, _ctx: Incomplete | None = ...): ...
    def getPlate(self, _ctx: Incomplete | None = ...): ...
    def setPlate(self, thePlate, _ctx: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, _ctx: None = ...): ...
    def sizeOfAnnotationLinks(self, _ctx: None = ...) -> int: ...
    def copyAnnotationLinks(self, _ctx: None = ...) -> List[Any]: ...
    def addWellAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def addAllWellAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def removeWellAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def removeAllWellAnnotationLinkSet(
        self, targets, _ctx: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], _ctx: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addWellAnnotationLinkToBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def findWellAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def removeWellAnnotationLinkFromBoth(
        self, link, bothSides, _ctx: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class WellI(Well):
    STATUS: ClassVar[str] = ...
    COLUMN: ClassVar[str] = ...
    ROW: ClassVar[str] = ...
    RED: ClassVar[str] = ...
    GREEN: ClassVar[str] = ...
    BLUE: ClassVar[str] = ...
    ALPHA: ClassVar[str] = ...
    REAGENTLINKS: ClassVar[str] = ...
    EXTERNALDESCRIPTION: ClassVar[str] = ...
    EXTERNALIDENTIFIER: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    WELLSAMPLES: ClassVar[str] = ...
    PLATE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(
        self, _status, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadColumn(self): ...
    def getColumn(self, current: None = ...) -> RIntI: ...
    def setColumn(self, _column: RIntI, current: None = ..., wrap: bool = ...): ...
    def unloadRow(self): ...
    def getRow(self, current: None = ...) -> RIntI: ...
    def setRow(self, _row: RIntI, current: None = ..., wrap: bool = ...): ...
    def unloadRed(self): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, _red, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGreen(self): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, _green, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBlue(self): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, _blue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAlpha(self): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, _alpha, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadReagentLinks(self, current: Incomplete | None = ...): ...
    def isReagentLinksLoaded(self): ...
    def sizeOfReagentLinks(self, current: Incomplete | None = ...): ...
    def copyReagentLinks(self, current: Incomplete | None = ...): ...
    def iterateReagentLinks(self): ...
    def addWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def removeAllWellReagentLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearReagentLinks(self, current: Incomplete | None = ...): ...
    def reloadReagentLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getReagentLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkReagent(self, addition, current: Incomplete | None = ...): ...
    def addWellReagentLinkToBoth(self, link, bothSides): ...
    def findWellReagentLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkReagent(self, removal, current: Incomplete | None = ...): ...
    def removeWellReagentLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedReagentList(self, current: Incomplete | None = ...): ...
    def unloadExternalDescription(self): ...
    def getExternalDescription(self, current: Incomplete | None = ...): ...
    def setExternalDescription(
        self, _externalDescription, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadExternalIdentifier(self): ...
    def getExternalIdentifier(self, current: Incomplete | None = ...): ...
    def setExternalIdentifier(
        self, _externalIdentifier, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWellSamples(self, current: None = ...): ...
    def isWellSamplesLoaded(self): ...
    def sizeOfWellSamples(self, current: Incomplete | None = ...): ...
    def copyWellSamples(self, current: Incomplete | None = ...): ...
    def iterateWellSamples(self): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, target, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSamples(self, current: Incomplete | None = ...): ...
    def reloadWellSamples(self, toCopy, current: Incomplete | None = ...): ...
    def getWellSample(self, index, current: Incomplete | None = ...): ...
    def setWellSample(
        self, index, element, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def getPrimaryWellSample(self, current: Incomplete | None = ...): ...
    def setPrimaryWellSample(self, element, current: Incomplete | None = ...): ...
    def unloadPlate(self): ...
    def getPlate(self, current: Incomplete | None = ...): ...
    def setPlate(self, _plate, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addWellAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeWellAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllWellAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addWellAnnotationLinkToBoth(self, link, bothSides): ...
    def findWellAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeWellAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class WellAnnotationLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class WellAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class WellAnnotationLinkI(WellAnnotationLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class WellReagentLink(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self, theParent: Union[ImageI, str, DatasetI], current: None = ...
    ): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class WellReagentLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getParent(self, _ctx: None = ...) -> DatasetI: ...
    def setParent(self, theParent: Union[ImageI, str, DatasetI], _ctx: None = ...): ...
    def getChild(self, _ctx: None = ...) -> ImageI: ...
    def setChild(
        self,
        theChild: Optional[Union[BooleanAnnotationI, ImageI, str]],
        _ctx: None = ...,
    ): ...
    def link(
        self,
        theParent: Union[ImageI, DatasetI],
        theChild: Optional[Union[BooleanAnnotationI, ImageI]],
        _ctx: None = ...,
    ): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class WellReagentLinkI(WellReagentLink):
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: None = ...) -> DatasetI: ...
    def setParent(
        self,
        _parent: Union[ImageI, str, DatasetI],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def unloadChild(self): ...
    def getChild(self, current: None = ...) -> ImageI: ...
    def setChild(
        self,
        _child: Optional[Union[BooleanAnnotationI, ImageI, str]],
        current: None = ...,
        wrap: bool = ...,
    ): ...
    def link(
        self,
        _parent: Union[ImageI, DatasetI],
        _child: Optional[Union[BooleanAnnotationI, ImageI]],
        current: None = ...,
    ): ...

class WellSample(IObject):
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, current: None = ...): ...
    def getPosX(self, current: Incomplete | None = ...): ...
    def setPosX(self, thePosX, current: Incomplete | None = ...): ...
    def getPosY(self, current: Incomplete | None = ...): ...
    def setPosY(self, thePosY, current: Incomplete | None = ...): ...
    def getTimepoint(self, current: Incomplete | None = ...): ...
    def setTimepoint(self, theTimepoint, current: Incomplete | None = ...): ...
    def getPlateAcquisition(self, current: Incomplete | None = ...): ...
    def setPlateAcquisition(
        self, thePlateAcquisition, current: Incomplete | None = ...
    ): ...
    def getWell(self, current: Incomplete | None = ...): ...
    def setWell(self, theWell, current: Incomplete | None = ...): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(self, theImage: Optional[ImageI], current: None = ...): ...

class WellSamplePrx(IObjectPrx):
    def getVersion(self, _ctx: None = ...) -> RIntI: ...
    def setVersion(self, theVersion: RIntI, _ctx: None = ...): ...
    def getPosX(self, _ctx: Incomplete | None = ...): ...
    def setPosX(self, thePosX, _ctx: Incomplete | None = ...): ...
    def getPosY(self, _ctx: Incomplete | None = ...): ...
    def setPosY(self, thePosY, _ctx: Incomplete | None = ...): ...
    def getTimepoint(self, _ctx: Incomplete | None = ...): ...
    def setTimepoint(self, theTimepoint, _ctx: Incomplete | None = ...): ...
    def getPlateAcquisition(self, _ctx: Incomplete | None = ...): ...
    def setPlateAcquisition(
        self, thePlateAcquisition, _ctx: Incomplete | None = ...
    ): ...
    def getWell(self, _ctx: Incomplete | None = ...): ...
    def setWell(self, theWell, _ctx: Incomplete | None = ...): ...
    def getImage(self, _ctx: Incomplete | None = ...): ...
    def setImage(self, theImage: Optional[ImageI], _ctx: None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class WellSampleI(WellSample):
    POSX: ClassVar[str] = ...
    POSY: ClassVar[str] = ...
    TIMEPOINT: ClassVar[str] = ...
    PLATEACQUISITION: ClassVar[str] = ...
    WELL: ClassVar[str] = ...
    IMAGE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadPosX(self): ...
    def getPosX(self, current: Incomplete | None = ...): ...
    def setPosX(self, _posX, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPosY(self): ...
    def getPosY(self, current: Incomplete | None = ...): ...
    def setPosY(self, _posY, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTimepoint(self): ...
    def getTimepoint(self, current: Incomplete | None = ...): ...
    def setTimepoint(
        self, _timepoint, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadPlateAcquisition(self): ...
    def getPlateAcquisition(self, current: Incomplete | None = ...): ...
    def setPlateAcquisition(
        self, _plateAcquisition, current: Incomplete | None = ..., wrap: bool = ...
    ): ...
    def unloadWell(self): ...
    def getWell(self, current: Incomplete | None = ...): ...
    def setWell(self, _well, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadImage(self): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(
        self, _image: Optional[ImageI], current: None = ..., wrap: bool = ...
    ): ...

class XmlAnnotation(TextAnnotation): ...

class XmlAnnotationPrx(TextAnnotationPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class XmlAnnotationI(XmlAnnotation):
    TEXTVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...

    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def unload(self, current: None = ...): ...
    def isLoaded(self, current: None = ...) -> bool: ...
    def unloadCollections(self, current: None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: None = ...) -> ImageI: ...
    def getDetails(self, current: None = ...) -> DetailsI: ...
    def unloadDetails(self, current: None = ...): ...
    def getId(self, current: None = ...) -> None: ...
    def setId(self, _id: RLongI, current: None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: None = ...) -> RIntI: ...
    def setVersion(self, version: RIntI, current: None = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: None = ...) -> RStringI: ...
    def setTextValue(
        self, _textValue: RStringI, current: None = ..., wrap: bool = ...
    ): ...
    def unloadNs(self): ...
    def getNs(self, current: None = ...) -> RStringI: ...
    def setNs(self, _ns: RStringI, current: None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: None = ...) -> RStringI: ...
    def setName(
        self, _name: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadDescription(self): ...
    def getDescription(self, current: None = ...) -> RStringI: ...
    def setDescription(
        self, _description: Union[RStringI, str], current: None = ..., wrap: bool = ...
    ): ...
    def unloadAnnotationLinks(self, current: None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: None = ...) -> int: ...
    def copyAnnotationLinks(self, current: None = ...) -> List[Any]: ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def removeAnnotationAnnotationLink(
        self, target, current: Incomplete | None = ...
    ): ...
    def removeAllAnnotationAnnotationLinkSet(
        self, targets, current: Incomplete | None = ...
    ): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(
        self, addition: Optional[BooleanAnnotationI], current: None = ...
    ) -> ImageAnnotationLinkI: ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(
        self, removal, current: Incomplete | None = ...
    ): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(
        self, link, bothSides, current: Incomplete | None = ...
    ): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class Permissions(Ice.Object):
    def getPerm1(self, current: Incomplete | None = ...): ...
    def setPerm1(self, value, current: Incomplete | None = ...): ...
    def isDisallow(self, restriction, current: Incomplete | None = ...): ...
    def isRestricted(self, restriction, current: Incomplete | None = ...): ...
    def canAnnotate(self, current: Incomplete | None = ...): ...
    def canEdit(self, current: Incomplete | None = ...): ...
    def canLink(self, current: Incomplete | None = ...): ...
    def canDelete(self, current: Incomplete | None = ...): ...
    def canChgrp(self, current: Incomplete | None = ...): ...
    def canChown(self, current: Incomplete | None = ...): ...
    def isUserRead(self, current: Incomplete | None = ...) -> bool: ...
    def isUserAnnotate(self, current: Incomplete | None = ...) -> bool: ...
    def isUserWrite(self, current: Incomplete | None = ...) -> bool: ...
    def isGroupRead(self, current: Incomplete | None = ...) -> bool: ...
    def isGroupAnnotate(self, current: Incomplete | None = ...) -> bool: ...
    def isGroupWrite(self, current: Incomplete | None = ...) -> bool: ...
    def isWorldRead(self, current: Incomplete | None = ...) -> bool: ...
    def isWorldAnnotate(self, current: Incomplete | None = ...) -> bool: ...
    def isWorldWrite(self, current: Incomplete | None = ...) -> bool: ...
    def setUserRead(self, value: bool, current: Incomplete | None = ...): ...
    def setUserAnnotate(self, value: bool, current: Incomplete | None = ...): ...
    def setUserWrite(self, value: bool, current: Incomplete | None = ...): ...
    def setGroupRead(self, value: bool, current: Incomplete | None = ...): ...
    def setGroupAnnotate(self, value: bool, current: Incomplete | None = ...): ...
    def setGroupWrite(self, value: bool, current: Incomplete | None = ...): ...
    def setWorldRead(self, value: bool, current: Incomplete | None = ...): ...
    def setWorldAnnotate(self, value: bool, current: Incomplete | None = ...): ...
    def setWorldWrite(self, value: bool, current: Incomplete | None = ...): ...

class PermissionsPrx(IcePy.ObjectPrx):
    def getPerm1(self, _ctx: Incomplete | None = ...): ...
    def setPerm1(self, value, _ctx: Incomplete | None = ...): ...
    def isDisallow(self, restriction, _ctx: Incomplete | None = ...): ...
    def isRestricted(self, restriction, _ctx: Incomplete | None = ...): ...
    def canAnnotate(self, _ctx: Incomplete | None = ...): ...
    def canEdit(self, _ctx: Incomplete | None = ...): ...
    def canLink(self, _ctx: Incomplete | None = ...): ...
    def canDelete(self, _ctx: Incomplete | None = ...): ...
    def canChgrp(self, _ctx: Incomplete | None = ...): ...
    def canChown(self, _ctx: Incomplete | None = ...): ...
    def isUserRead(self, _ctx: Incomplete | None = ...) -> bool: ...
    def isUserAnnotate(self, _ctx: Incomplete | None = ...) -> bool: ...
    def isUserWrite(self, _ctx: Incomplete | None = ...) -> bool: ...
    def isGroupRead(self, _ctx: Incomplete | None = ...) -> bool: ...
    def isGroupAnnotate(self, _ctx: Incomplete | None = ...) -> bool: ...
    def isGroupWrite(self, _ctx: Incomplete | None = ...) -> bool: ...
    def isWorldRead(self, _ctx: Incomplete | None = ...) -> bool: ...
    def isWorldAnnotate(self, _ctx: Incomplete | None = ...) -> bool: ...
    def isWorldWrite(self, _ctx: Incomplete | None = ...) -> bool: ...
    def setUserRead(self, value: bool, _ctx: Incomplete | None = ...): ...
    def setUserAnnotate(self, value: bool, _ctx: Incomplete | None = ...): ...
    def setUserWrite(self, value: bool, _ctx: Incomplete | None = ...): ...
    def setGroupRead(self, value: bool, _ctx: Incomplete | None = ...): ...
    def setGroupAnnotate(self, value: bool, _ctx: Incomplete | None = ...): ...
    def setGroupWrite(self, value: bool, _ctx: Incomplete | None = ...): ...
    def setWorldRead(self, value: bool, _ctx: Incomplete | None = ...): ...
    def setWorldAnnotate(self, value: bool, _ctx: Incomplete | None = ...): ...
    def setWorldWrite(self, value: bool, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PermissionsI(Permissions):
    def granted(self, mask: int, shift: int) -> bool: ...
    def set(self, mask: int, shift: int, on: bool): ...
    def isUserRead(self) -> bool: ...
    def setUserRead(self, value: bool): ...
    def isUserWrite(self) -> bool: ...
    def setUserWrite(self, value: bool): ...
    def isUserAnnotate(self) -> bool: ...
    def setUserAnnotate(self, value: bool): ...
    def isGroupRead(self) -> bool: ...
    def setGroupRead(self, value: bool): ...
    def isGroupWrite(self) -> bool: ...
    def setGroupWrite(self, value: bool): ...
    def isGroupAnnotate(self) -> bool: ...
    def setGroupAnnotate(self, value: bool): ...
    def isWorldRead(self) -> bool: ...
    def setWorldRead(self, value: bool): ...
    def isWorldWrite(self) -> bool: ...
    def setWorldWrite(self, value: bool): ...
    def isWorldAnnotate(self) -> bool: ...
    def setWorldAnnotate(self, value: bool): ...
    def isRestricted(self, restriction, current: Incomplete | None = ...): ...
    def isDisallow(self, restriction, current: Incomplete | None = ...): ...
    def canAnnotate(self, current: Incomplete | None = ...): ...
    def canDelete(self, current: Incomplete | None = ...): ...
    def canEdit(self, current: Incomplete | None = ...): ...
    def canLink(self, current: Incomplete | None = ...): ...
    def canChgrp(self, current: Incomplete | None = ...): ...
    def canChown(self, current: Incomplete | None = ...): ...
    def getPerm1(self): ...
    def setPerm1(self, _perm1): ...
    def from_string(self, perms: str) -> PermissionsI: ...
    def throwIfImmutable(self): ...

class ElectricPotential(Ice.Object):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], current: None = ...): ...
    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def getSymbol(self, current: None = ...) -> str: ...
    def copy(self, current: Incomplete | None = ...): ...

class ElectricPotentialPrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], _ctx: None = ...): ...
    def getUnit(self, _ctx: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, _ctx: None = ...): ...
    def getSymbol(self, _ctx: None = ...) -> str: ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class ElectricPotentialI(ElectricPotential, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...

    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def getSymbol(self, current: None = ...) -> str: ...
    @staticmethod
    def lookupSymbol(unit: UnitsLength) -> str: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def setValue(self, value: Union[int, float], current: None = ...): ...

class Frequency(Ice.Object):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], current: None = ...): ...
    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def getSymbol(self, current: None = ...) -> str: ...
    def copy(self, current: Incomplete | None = ...): ...

class FrequencyPrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], _ctx: None = ...): ...
    def getUnit(self, _ctx: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, _ctx: None = ...): ...
    def getSymbol(self, _ctx: None = ...) -> str: ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class FrequencyI(Frequency, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...

    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def getSymbol(self, current: None = ...) -> str: ...
    @staticmethod
    def lookupSymbol(unit: UnitsLength) -> str: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def setValue(self, value: Union[int, float], current: None = ...): ...

class Length(Ice.Object):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], current: None = ...): ...
    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def getSymbol(self, current: None = ...) -> str: ...
    def copy(self, current: Incomplete | None = ...): ...

class LengthPrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], _ctx: None = ...): ...
    def getUnit(self, _ctx: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, _ctx: None = ...): ...
    def getSymbol(self, _ctx: None = ...) -> str: ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class LengthI(Length, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...

    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def getSymbol(self, current: None = ...) -> str: ...
    @staticmethod
    def lookupSymbol(unit: UnitsLength) -> str: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def setValue(self, value: Union[int, float], current: None = ...): ...

class Power(Ice.Object):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], current: None = ...): ...
    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def getSymbol(self, current: None = ...) -> str: ...
    def copy(self, current: Incomplete | None = ...): ...

class PowerPrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], _ctx: None = ...): ...
    def getUnit(self, _ctx: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, _ctx: None = ...): ...
    def getSymbol(self, _ctx: None = ...) -> str: ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PowerI(Power, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...

    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def getSymbol(self, current: None = ...) -> str: ...
    @staticmethod
    def lookupSymbol(unit: UnitsLength) -> str: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def setValue(self, value: Union[int, float], current: None = ...): ...

class Pressure(Ice.Object):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], current: None = ...): ...
    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def getSymbol(self, current: None = ...) -> str: ...
    def copy(self, current: Incomplete | None = ...): ...

class PressurePrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], _ctx: None = ...): ...
    def getUnit(self, _ctx: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, _ctx: None = ...): ...
    def getSymbol(self, _ctx: None = ...) -> str: ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class PressureI(Pressure, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...

    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def getSymbol(self, current: None = ...) -> str: ...
    @staticmethod
    def lookupSymbol(unit: UnitsLength) -> str: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def setValue(self, value: Union[int, float], current: None = ...): ...

class Temperature(Ice.Object):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], current: None = ...): ...
    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def getSymbol(self, current: None = ...) -> str: ...
    def copy(self, current: Incomplete | None = ...): ...

class TemperaturePrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], _ctx: None = ...): ...
    def getUnit(self, _ctx: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, _ctx: None = ...): ...
    def getSymbol(self, _ctx: None = ...) -> str: ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class TemperatureI(Temperature, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...

    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def getSymbol(self, current: None = ...) -> str: ...
    @staticmethod
    def lookupSymbol(unit: UnitsLength) -> str: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def setValue(self, value: Union[int, float], current: None = ...): ...

class Time(Ice.Object):
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], current: None = ...): ...
    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def getSymbol(self, current: None = ...) -> str: ...
    def copy(self, current: Incomplete | None = ...): ...

class TimePrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: None = ...) -> Union[int, float]: ...
    def setValue(self, value: Union[int, float], _ctx: None = ...): ...
    def getUnit(self, _ctx: None = ...) -> UnitsTime: ...
    def setUnit(self, unit: UnitsTime, _ctx: None = ...): ...
    def getSymbol(self, _ctx: None = ...) -> str: ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...

class TimeI(Time, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...

    def getUnit(self, current: None = ...) -> UnitsTime: ...
    def getValue(self, current: None = ...) -> Union[int, float]: ...
    def getSymbol(self, current: None = ...) -> str: ...
    @staticmethod
    def lookupSymbol(unit: UnitsLength) -> str: ...
    def setUnit(self, unit: UnitsTime, current: None = ...): ...
    def setValue(self, value: Union[int, float], current: None = ...): ...

class NamedValue(Ice.Object): ...

class NamedValuePrx(IcePy.ObjectPrx):
    @staticmethod
    def checkedCast(
        proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...
    ): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
