import Ice
import IcePy
import omero_model_UnitBase
from _typeshed import Incomplete
from typing import ClassVar

class Details(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getOwner: ClassVar[IcePy.Operation] = ...
    _op_setOwner: ClassVar[IcePy.Operation] = ...
    _op_getGroup: ClassVar[IcePy.Operation] = ...
    _op_setGroup: ClassVar[IcePy.Operation] = ...
    _op_getCreationEvent: ClassVar[IcePy.Operation] = ...
    _op_setCreationEvent: ClassVar[IcePy.Operation] = ...
    _op_getUpdateEvent: ClassVar[IcePy.Operation] = ...
    _op_setUpdateEvent: ClassVar[IcePy.Operation] = ...
    _op_getPermissions: ClassVar[IcePy.Operation] = ...
    _op_setPermissions: ClassVar[IcePy.Operation] = ...
    _op_getExternalInfo: ClassVar[IcePy.Operation] = ...
    _op_setExternalInfo: ClassVar[IcePy.Operation] = ...
    def __init__(self, _owner: Incomplete | None = ..., _group: Incomplete | None = ..., _creationEvent: Incomplete | None = ..., _updateEvent: Incomplete | None = ..., _permissions: Incomplete | None = ..., _externalInfo: Incomplete | None = ..., _call: Incomplete | None = ..., _event: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getOwner(self, current: Incomplete | None = ...): ...
    def setOwner(self, theOwner, current: Incomplete | None = ...): ...
    def getGroup(self, current: Incomplete | None = ...): ...
    def setGroup(self, theGroup, current: Incomplete | None = ...): ...
    def getCreationEvent(self, current: Incomplete | None = ...): ...
    def setCreationEvent(self, theCreationEvent, current: Incomplete | None = ...): ...
    def getUpdateEvent(self, current: Incomplete | None = ...): ...
    def setUpdateEvent(self, theUpdateEvent, current: Incomplete | None = ...): ...
    def getPermissions(self, current: Incomplete | None = ...): ...
    def setPermissions(self, thePermissions, current: Incomplete | None = ...): ...
    def getExternalInfo(self, current: Incomplete | None = ...): ...
    def setExternalInfo(self, theExternalInfo, current: Incomplete | None = ...): ...

class DetailsPrx(IcePy.ObjectPrx):
    def getOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getOwner(self, _r): ...
    def setOwner(self, theOwner, _ctx: Incomplete | None = ...): ...
    def begin_setOwner(self, theOwner, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setOwner(self, _r): ...
    def getGroup(self, _ctx: Incomplete | None = ...): ...
    def begin_getGroup(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGroup(self, _r): ...
    def setGroup(self, theGroup, _ctx: Incomplete | None = ...): ...
    def begin_setGroup(self, theGroup, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGroup(self, _r): ...
    def getCreationEvent(self, _ctx: Incomplete | None = ...): ...
    def begin_getCreationEvent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCreationEvent(self, _r): ...
    def setCreationEvent(self, theCreationEvent, _ctx: Incomplete | None = ...): ...
    def begin_setCreationEvent(self, theCreationEvent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCreationEvent(self, _r): ...
    def getUpdateEvent(self, _ctx: Incomplete | None = ...): ...
    def begin_getUpdateEvent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUpdateEvent(self, _r): ...
    def setUpdateEvent(self, theUpdateEvent, _ctx: Incomplete | None = ...): ...
    def begin_setUpdateEvent(self, theUpdateEvent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUpdateEvent(self, _r): ...
    def getPermissions(self, _ctx: Incomplete | None = ...): ...
    def begin_getPermissions(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPermissions(self, _r): ...
    def setPermissions(self, thePermissions, _ctx: Incomplete | None = ...): ...
    def begin_setPermissions(self, thePermissions, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPermissions(self, _r): ...
    def getExternalInfo(self, _ctx: Incomplete | None = ...): ...
    def begin_getExternalInfo(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExternalInfo(self, _r): ...
    def setExternalInfo(self, theExternalInfo, _ctx: Incomplete | None = ...): ...
    def begin_setExternalInfo(self, theExternalInfo, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setExternalInfo(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DetailsI(Details):
    def __init__(self, client: Incomplete | None = ...) -> None: ...
    def getClient(self): ...
    def getSession(self): ...
    def getEventContext(self): ...
    def getCallContext(self): ...
    def getOwner(self): ...
    def setOwner(self, value): ...
    def getGroup(self): ...
    def setGroup(self, value): ...
    def getCreationEvent(self): ...
    def setCreationEvent(self, value): ...
    def getUpdateEvent(self): ...
    def setUpdateEvent(self, value): ...
    def getPermissions(self): ...
    def setPermissions(self, value): ...
    def getExternalInfo(self): ...
    def setExternalInfo(self, value): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, value): ...

class IObject(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getId: ClassVar[IcePy.Operation] = ...
    _op_setId: ClassVar[IcePy.Operation] = ...
    _op_getDetails: ClassVar[IcePy.Operation] = ...
    _op_proxy: ClassVar[IcePy.Operation] = ...
    _op_shallowCopy: ClassVar[IcePy.Operation] = ...
    _op_unload: ClassVar[IcePy.Operation] = ...
    _op_unloadCollections: ClassVar[IcePy.Operation] = ...
    _op_unloadDetails: ClassVar[IcePy.Operation] = ...
    _op_isLoaded: ClassVar[IcePy.Operation] = ...
    _op_isGlobal: ClassVar[IcePy.Operation] = ...
    _op_isLink: ClassVar[IcePy.Operation] = ...
    _op_isMutable: ClassVar[IcePy.Operation] = ...
    _op_isAnnotated: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, id, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def unload(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...

class IObjectPrx(IcePy.ObjectPrx):
    def getId(self, _ctx: Incomplete | None = ...): ...
    def begin_getId(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getId(self, _r): ...
    def setId(self, id, _ctx: Incomplete | None = ...): ...
    def begin_setId(self, id, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setId(self, _r): ...
    def getDetails(self, _ctx: Incomplete | None = ...): ...
    def begin_getDetails(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDetails(self, _r): ...
    def proxy(self, _ctx: Incomplete | None = ...): ...
    def begin_proxy(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_proxy(self, _r): ...
    def shallowCopy(self, _ctx: Incomplete | None = ...): ...
    def begin_shallowCopy(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_shallowCopy(self, _r): ...
    def unload(self, _ctx: Incomplete | None = ...): ...
    def begin_unload(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unload(self, _r): ...
    def unloadCollections(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadCollections(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadCollections(self, _r): ...
    def unloadDetails(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadDetails(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadDetails(self, _r): ...
    def isLoaded(self, _ctx: Incomplete | None = ...): ...
    def begin_isLoaded(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isLoaded(self, _r): ...
    def isGlobal(self, _ctx: Incomplete | None = ...): ...
    def begin_isGlobal(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isGlobal(self, _r): ...
    def isLink(self, _ctx: Incomplete | None = ...): ...
    def begin_isLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isLink(self, _r): ...
    def isMutable(self, _ctx: Incomplete | None = ...): ...
    def begin_isMutable(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isMutable(self, _r): ...
    def isAnnotated(self, _ctx: Incomplete | None = ...): ...
    def begin_isAnnotated(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isAnnotated(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class AcquisitionMode(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class AcquisitionModePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class AcquisitionModeI(AcquisitionMode):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class AdminPrivilege(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class AdminPrivilegePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class AdminPrivilegeI(AdminPrivilege):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class AffineTransform(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getA00: ClassVar[IcePy.Operation] = ...
    _op_setA00: ClassVar[IcePy.Operation] = ...
    _op_getA10: ClassVar[IcePy.Operation] = ...
    _op_setA10: ClassVar[IcePy.Operation] = ...
    _op_getA01: ClassVar[IcePy.Operation] = ...
    _op_setA01: ClassVar[IcePy.Operation] = ...
    _op_getA11: ClassVar[IcePy.Operation] = ...
    _op_setA11: ClassVar[IcePy.Operation] = ...
    _op_getA02: ClassVar[IcePy.Operation] = ...
    _op_setA02: ClassVar[IcePy.Operation] = ...
    _op_getA12: ClassVar[IcePy.Operation] = ...
    _op_setA12: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _a00: Incomplete | None = ..., _a10: Incomplete | None = ..., _a01: Incomplete | None = ..., _a11: Incomplete | None = ..., _a02: Incomplete | None = ..., _a12: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getA00(self, current: Incomplete | None = ...): ...
    def setA00(self, theA00, current: Incomplete | None = ...): ...
    def getA10(self, current: Incomplete | None = ...): ...
    def setA10(self, theA10, current: Incomplete | None = ...): ...
    def getA01(self, current: Incomplete | None = ...): ...
    def setA01(self, theA01, current: Incomplete | None = ...): ...
    def getA11(self, current: Incomplete | None = ...): ...
    def setA11(self, theA11, current: Incomplete | None = ...): ...
    def getA02(self, current: Incomplete | None = ...): ...
    def setA02(self, theA02, current: Incomplete | None = ...): ...
    def getA12(self, current: Incomplete | None = ...): ...
    def setA12(self, theA12, current: Incomplete | None = ...): ...

class AffineTransformPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getA00(self, _ctx: Incomplete | None = ...): ...
    def begin_getA00(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getA00(self, _r): ...
    def setA00(self, theA00, _ctx: Incomplete | None = ...): ...
    def begin_setA00(self, theA00, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setA00(self, _r): ...
    def getA10(self, _ctx: Incomplete | None = ...): ...
    def begin_getA10(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getA10(self, _r): ...
    def setA10(self, theA10, _ctx: Incomplete | None = ...): ...
    def begin_setA10(self, theA10, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setA10(self, _r): ...
    def getA01(self, _ctx: Incomplete | None = ...): ...
    def begin_getA01(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getA01(self, _r): ...
    def setA01(self, theA01, _ctx: Incomplete | None = ...): ...
    def begin_setA01(self, theA01, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setA01(self, _r): ...
    def getA11(self, _ctx: Incomplete | None = ...): ...
    def begin_getA11(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getA11(self, _r): ...
    def setA11(self, theA11, _ctx: Incomplete | None = ...): ...
    def begin_setA11(self, theA11, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setA11(self, _r): ...
    def getA02(self, _ctx: Incomplete | None = ...): ...
    def begin_getA02(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getA02(self, _r): ...
    def setA02(self, theA02, _ctx: Incomplete | None = ...): ...
    def begin_setA02(self, theA02, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setA02(self, _r): ...
    def getA12(self, _ctx: Incomplete | None = ...): ...
    def begin_getA12(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getA12(self, _r): ...
    def setA12(self, theA12, _ctx: Incomplete | None = ...): ...
    def begin_setA12(self, theA12, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setA12(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class AffineTransformI(AffineTransform):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        a00: Incomplete
        a10: Incomplete
        a01: Incomplete
        a11: Incomplete
        a02: Incomplete
        a12: Incomplete
        details: Incomplete
        def __init__(self, _cls, a00, a10, a01, a11, a02, a12, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    A00: ClassVar[str] = ...
    A10: ClassVar[str] = ...
    A01: ClassVar[str] = ...
    A11: ClassVar[str] = ...
    A02: ClassVar[str] = ...
    A12: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadA00(self): ...
    def getA00(self, current: Incomplete | None = ...): ...
    def setA00(self, _a00, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadA10(self): ...
    def getA10(self, current: Incomplete | None = ...): ...
    def setA10(self, _a10, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadA01(self): ...
    def getA01(self, current: Incomplete | None = ...): ...
    def setA01(self, _a01, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadA11(self): ...
    def getA11(self, current: Incomplete | None = ...): ...
    def setA11(self, _a11, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadA02(self): ...
    def getA02(self, current: Incomplete | None = ...): ...
    def setA02(self, _a02, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadA12(self): ...
    def getA12(self, current: Incomplete | None = ...): ...
    def setA12(self, _a12, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class AnnotationAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class AnnotationAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class AnnotationAnnotationLinkI(AnnotationAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LightSource(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getManufacturer: ClassVar[IcePy.Operation] = ...
    _op_setManufacturer: ClassVar[IcePy.Operation] = ...
    _op_getModel: ClassVar[IcePy.Operation] = ...
    _op_setModel: ClassVar[IcePy.Operation] = ...
    _op_getPower: ClassVar[IcePy.Operation] = ...
    _op_setPower: ClassVar[IcePy.Operation] = ...
    _op_getLotNumber: ClassVar[IcePy.Operation] = ...
    _op_setLotNumber: ClassVar[IcePy.Operation] = ...
    _op_getSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_setSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_getInstrument: ClassVar[IcePy.Operation] = ...
    _op_setInstrument: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addLightSourceAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllLightSourceAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeLightSourceAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllLightSourceAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addLightSourceAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findLightSourceAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeLightSourceAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _power: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _instrument: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, theModel, current: Incomplete | None = ...): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, thePower, current: Incomplete | None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findLightSourceAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class LightSourcePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def begin_getManufacturer(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getManufacturer(self, _r): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def begin_setManufacturer(self, theManufacturer, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setManufacturer(self, _r): ...
    def getModel(self, _ctx: Incomplete | None = ...): ...
    def begin_getModel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getModel(self, _r): ...
    def setModel(self, theModel, _ctx: Incomplete | None = ...): ...
    def begin_setModel(self, theModel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setModel(self, _r): ...
    def getPower(self, _ctx: Incomplete | None = ...): ...
    def begin_getPower(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPower(self, _r): ...
    def setPower(self, thePower, _ctx: Incomplete | None = ...): ...
    def begin_setPower(self, thePower, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPower(self, _r): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getLotNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLotNumber(self, _r): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def begin_setLotNumber(self, theLotNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLotNumber(self, _r): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getSerialNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSerialNumber(self, _r): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def begin_setSerialNumber(self, theSerialNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSerialNumber(self, _r): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def begin_getInstrument(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInstrument(self, _r): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def begin_setInstrument(self, theInstrument, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInstrument(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addLightSourceAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addLightSourceAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addLightSourceAnnotationLink(self, _r): ...
    def addAllLightSourceAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllLightSourceAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllLightSourceAnnotationLinkSet(self, _r): ...
    def removeLightSourceAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeLightSourceAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeLightSourceAnnotationLink(self, _r): ...
    def removeAllLightSourceAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllLightSourceAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllLightSourceAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addLightSourceAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addLightSourceAnnotationLinkToBoth(self, _r): ...
    def findLightSourceAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findLightSourceAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findLightSourceAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeLightSourceAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeLightSourceAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeLightSourceAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class Arc(LightSource):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _power: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _instrument: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _type: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...

class ArcPrx(LightSourcePrx):
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ArcI(Arc):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        type: Incomplete
        manufacturer: Incomplete
        model: Incomplete
        power: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        instrument: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, type, manufacturer, model, power, lotNumber, serialNumber, instrument, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TYPE: ClassVar[str] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    POWER: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPower(self): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, _power, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightSourceAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ArcType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class ArcTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ArcTypeI(ArcType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Binning(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class BinningPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class BinningI(Binning):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Annotation(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getNs: ClassVar[IcePy.Operation] = ...
    _op_setNs: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addAnnotationAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllAnnotationAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeAnnotationAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllAnnotationAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addAnnotationAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findAnnotationAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeAnnotationAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, theNs, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class AnnotationPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getNs(self, _ctx: Incomplete | None = ...): ...
    def begin_getNs(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getNs(self, _r): ...
    def setNs(self, theNs, _ctx: Incomplete | None = ...): ...
    def begin_setNs(self, theNs, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setNs(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addAnnotationAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addAnnotationAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAnnotationAnnotationLink(self, _r): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllAnnotationAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllAnnotationAnnotationLinkSet(self, _r): ...
    def removeAnnotationAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeAnnotationAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAnnotationAnnotationLink(self, _r): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllAnnotationAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllAnnotationAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addAnnotationAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAnnotationAnnotationLinkToBoth(self, _r): ...
    def findAnnotationAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findAnnotationAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findAnnotationAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAnnotationAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class BasicAnnotation(Annotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class BasicAnnotationPrx(AnnotationPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class BooleanAnnotation(BasicAnnotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getBoolValue: ClassVar[IcePy.Operation] = ...
    _op_setBoolValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _boolValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getBoolValue(self, current: Incomplete | None = ...): ...
    def setBoolValue(self, theBoolValue, current: Incomplete | None = ...): ...

class BooleanAnnotationPrx(BasicAnnotationPrx):
    def getBoolValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getBoolValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getBoolValue(self, _r): ...
    def setBoolValue(self, theBoolValue, _ctx: Incomplete | None = ...): ...
    def begin_setBoolValue(self, theBoolValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setBoolValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class BooleanAnnotationI(BooleanAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        boolValue: Incomplete
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, boolValue, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    BOOLVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadBoolValue(self): ...
    def getBoolValue(self, current: Incomplete | None = ...): ...
    def setBoolValue(self, _boolValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Channel(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getStatsInfo: ClassVar[IcePy.Operation] = ...
    _op_setStatsInfo: ClassVar[IcePy.Operation] = ...
    _op_getRed: ClassVar[IcePy.Operation] = ...
    _op_setRed: ClassVar[IcePy.Operation] = ...
    _op_getGreen: ClassVar[IcePy.Operation] = ...
    _op_setGreen: ClassVar[IcePy.Operation] = ...
    _op_getBlue: ClassVar[IcePy.Operation] = ...
    _op_setBlue: ClassVar[IcePy.Operation] = ...
    _op_getAlpha: ClassVar[IcePy.Operation] = ...
    _op_setAlpha: ClassVar[IcePy.Operation] = ...
    _op_getLookupTable: ClassVar[IcePy.Operation] = ...
    _op_setLookupTable: ClassVar[IcePy.Operation] = ...
    _op_getLogicalChannel: ClassVar[IcePy.Operation] = ...
    _op_setLogicalChannel: ClassVar[IcePy.Operation] = ...
    _op_getPixels: ClassVar[IcePy.Operation] = ...
    _op_setPixels: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addChannelAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllChannelAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeChannelAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllChannelAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addChannelAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findChannelAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeChannelAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _statsInfo: Incomplete | None = ..., _red: Incomplete | None = ..., _green: Incomplete | None = ..., _blue: Incomplete | None = ..., _alpha: Incomplete | None = ..., _lookupTable: Incomplete | None = ..., _logicalChannel: Incomplete | None = ..., _pixels: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getStatsInfo(self, current: Incomplete | None = ...): ...
    def setStatsInfo(self, theStatsInfo, current: Incomplete | None = ...): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, theRed, current: Incomplete | None = ...): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, theGreen, current: Incomplete | None = ...): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, theBlue, current: Incomplete | None = ...): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, theAlpha, current: Incomplete | None = ...): ...
    def getLookupTable(self, current: Incomplete | None = ...): ...
    def setLookupTable(self, theLookupTable, current: Incomplete | None = ...): ...
    def getLogicalChannel(self, current: Incomplete | None = ...): ...
    def setLogicalChannel(self, theLogicalChannel, current: Incomplete | None = ...): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, thePixels, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addChannelAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllChannelAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannelAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllChannelAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addChannelAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findChannelAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeChannelAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ChannelPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getStatsInfo(self, _ctx: Incomplete | None = ...): ...
    def begin_getStatsInfo(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStatsInfo(self, _r): ...
    def setStatsInfo(self, theStatsInfo, _ctx: Incomplete | None = ...): ...
    def begin_setStatsInfo(self, theStatsInfo, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStatsInfo(self, _r): ...
    def getRed(self, _ctx: Incomplete | None = ...): ...
    def begin_getRed(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRed(self, _r): ...
    def setRed(self, theRed, _ctx: Incomplete | None = ...): ...
    def begin_setRed(self, theRed, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRed(self, _r): ...
    def getGreen(self, _ctx: Incomplete | None = ...): ...
    def begin_getGreen(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGreen(self, _r): ...
    def setGreen(self, theGreen, _ctx: Incomplete | None = ...): ...
    def begin_setGreen(self, theGreen, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGreen(self, _r): ...
    def getBlue(self, _ctx: Incomplete | None = ...): ...
    def begin_getBlue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getBlue(self, _r): ...
    def setBlue(self, theBlue, _ctx: Incomplete | None = ...): ...
    def begin_setBlue(self, theBlue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setBlue(self, _r): ...
    def getAlpha(self, _ctx: Incomplete | None = ...): ...
    def begin_getAlpha(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAlpha(self, _r): ...
    def setAlpha(self, theAlpha, _ctx: Incomplete | None = ...): ...
    def begin_setAlpha(self, theAlpha, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setAlpha(self, _r): ...
    def getLookupTable(self, _ctx: Incomplete | None = ...): ...
    def begin_getLookupTable(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLookupTable(self, _r): ...
    def setLookupTable(self, theLookupTable, _ctx: Incomplete | None = ...): ...
    def begin_setLookupTable(self, theLookupTable, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLookupTable(self, _r): ...
    def getLogicalChannel(self, _ctx: Incomplete | None = ...): ...
    def begin_getLogicalChannel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLogicalChannel(self, _r): ...
    def setLogicalChannel(self, theLogicalChannel, _ctx: Incomplete | None = ...): ...
    def begin_setLogicalChannel(self, theLogicalChannel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLogicalChannel(self, _r): ...
    def getPixels(self, _ctx: Incomplete | None = ...): ...
    def begin_getPixels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPixels(self, _r): ...
    def setPixels(self, thePixels, _ctx: Incomplete | None = ...): ...
    def begin_setPixels(self, thePixels, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPixels(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addChannelAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addChannelAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addChannelAnnotationLink(self, _r): ...
    def addAllChannelAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllChannelAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllChannelAnnotationLinkSet(self, _r): ...
    def removeChannelAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeChannelAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeChannelAnnotationLink(self, _r): ...
    def removeAllChannelAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllChannelAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllChannelAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addChannelAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addChannelAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addChannelAnnotationLinkToBoth(self, _r): ...
    def findChannelAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findChannelAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findChannelAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeChannelAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeChannelAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeChannelAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ChannelI(Channel):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        statsInfo: Incomplete
        red: Incomplete
        green: Incomplete
        blue: Incomplete
        alpha: Incomplete
        lookupTable: Incomplete
        logicalChannel: Incomplete
        pixels: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, statsInfo, red, green, blue, alpha, lookupTable, logicalChannel, pixels, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    STATSINFO: ClassVar[str] = ...
    RED: ClassVar[str] = ...
    GREEN: ClassVar[str] = ...
    BLUE: ClassVar[str] = ...
    ALPHA: ClassVar[str] = ...
    LOOKUPTABLE: ClassVar[str] = ...
    LOGICALCHANNEL: ClassVar[str] = ...
    PIXELS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadStatsInfo(self): ...
    def getStatsInfo(self, current: Incomplete | None = ...): ...
    def setStatsInfo(self, _statsInfo, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRed(self): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, _red, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGreen(self): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, _green, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBlue(self): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, _blue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAlpha(self): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, _alpha, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLookupTable(self): ...
    def getLookupTable(self, current: Incomplete | None = ...): ...
    def setLookupTable(self, _lookupTable, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLogicalChannel(self): ...
    def getLogicalChannel(self, current: Incomplete | None = ...): ...
    def setLogicalChannel(self, _logicalChannel, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPixels(self): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, _pixels, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addChannelAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllChannelAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannelAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllChannelAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addChannelAnnotationLinkToBoth(self, link, bothSides): ...
    def findChannelAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeChannelAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ChannelAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ChannelAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ChannelAnnotationLinkI(ChannelAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ChannelBinding(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getRenderingDef: ClassVar[IcePy.Operation] = ...
    _op_setRenderingDef: ClassVar[IcePy.Operation] = ...
    _op_getFamily: ClassVar[IcePy.Operation] = ...
    _op_setFamily: ClassVar[IcePy.Operation] = ...
    _op_getCoefficient: ClassVar[IcePy.Operation] = ...
    _op_setCoefficient: ClassVar[IcePy.Operation] = ...
    _op_getInputStart: ClassVar[IcePy.Operation] = ...
    _op_setInputStart: ClassVar[IcePy.Operation] = ...
    _op_getInputEnd: ClassVar[IcePy.Operation] = ...
    _op_setInputEnd: ClassVar[IcePy.Operation] = ...
    _op_getActive: ClassVar[IcePy.Operation] = ...
    _op_setActive: ClassVar[IcePy.Operation] = ...
    _op_getNoiseReduction: ClassVar[IcePy.Operation] = ...
    _op_setNoiseReduction: ClassVar[IcePy.Operation] = ...
    _op_getRed: ClassVar[IcePy.Operation] = ...
    _op_setRed: ClassVar[IcePy.Operation] = ...
    _op_getGreen: ClassVar[IcePy.Operation] = ...
    _op_setGreen: ClassVar[IcePy.Operation] = ...
    _op_getBlue: ClassVar[IcePy.Operation] = ...
    _op_setBlue: ClassVar[IcePy.Operation] = ...
    _op_getAlpha: ClassVar[IcePy.Operation] = ...
    _op_setAlpha: ClassVar[IcePy.Operation] = ...
    _op_getLookupTable: ClassVar[IcePy.Operation] = ...
    _op_setLookupTable: ClassVar[IcePy.Operation] = ...
    _op_unloadSpatialDomainEnhancement: ClassVar[IcePy.Operation] = ...
    _op_sizeOfSpatialDomainEnhancement: ClassVar[IcePy.Operation] = ...
    _op_copySpatialDomainEnhancement: ClassVar[IcePy.Operation] = ...
    _op_addCodomainMapContext: ClassVar[IcePy.Operation] = ...
    _op_addAllCodomainMapContextSet: ClassVar[IcePy.Operation] = ...
    _op_removeCodomainMapContext: ClassVar[IcePy.Operation] = ...
    _op_removeAllCodomainMapContextSet: ClassVar[IcePy.Operation] = ...
    _op_clearSpatialDomainEnhancement: ClassVar[IcePy.Operation] = ...
    _op_reloadSpatialDomainEnhancement: ClassVar[IcePy.Operation] = ...
    _op_getCodomainMapContext: ClassVar[IcePy.Operation] = ...
    _op_setCodomainMapContext: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryCodomainMapContext: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryCodomainMapContext: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _renderingDef: Incomplete | None = ..., _family: Incomplete | None = ..., _coefficient: Incomplete | None = ..., _inputStart: Incomplete | None = ..., _inputEnd: Incomplete | None = ..., _active: Incomplete | None = ..., _noiseReduction: Incomplete | None = ..., _red: Incomplete | None = ..., _green: Incomplete | None = ..., _blue: Incomplete | None = ..., _alpha: Incomplete | None = ..., _lookupTable: Incomplete | None = ..., _spatialDomainEnhancementSeq: Incomplete | None = ..., _spatialDomainEnhancementLoaded: bool = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getRenderingDef(self, current: Incomplete | None = ...): ...
    def setRenderingDef(self, theRenderingDef, current: Incomplete | None = ...): ...
    def getFamily(self, current: Incomplete | None = ...): ...
    def setFamily(self, theFamily, current: Incomplete | None = ...): ...
    def getCoefficient(self, current: Incomplete | None = ...): ...
    def setCoefficient(self, theCoefficient, current: Incomplete | None = ...): ...
    def getInputStart(self, current: Incomplete | None = ...): ...
    def setInputStart(self, theInputStart, current: Incomplete | None = ...): ...
    def getInputEnd(self, current: Incomplete | None = ...): ...
    def setInputEnd(self, theInputEnd, current: Incomplete | None = ...): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(self, theActive, current: Incomplete | None = ...): ...
    def getNoiseReduction(self, current: Incomplete | None = ...): ...
    def setNoiseReduction(self, theNoiseReduction, current: Incomplete | None = ...): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, theRed, current: Incomplete | None = ...): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, theGreen, current: Incomplete | None = ...): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, theBlue, current: Incomplete | None = ...): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, theAlpha, current: Incomplete | None = ...): ...
    def getLookupTable(self, current: Incomplete | None = ...): ...
    def setLookupTable(self, theLookupTable, current: Incomplete | None = ...): ...
    def unloadSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def sizeOfSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def copySpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def addCodomainMapContext(self, target, current: Incomplete | None = ...): ...
    def addAllCodomainMapContextSet(self, targets, current: Incomplete | None = ...): ...
    def removeCodomainMapContext(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllCodomainMapContextSet(self, targets, current: Incomplete | None = ...): ...
    def clearSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def reloadSpatialDomainEnhancement(self, toCopy, current: Incomplete | None = ...): ...
    def getCodomainMapContext(self, index, current: Incomplete | None = ...): ...
    def setCodomainMapContext(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryCodomainMapContext(self, current: Incomplete | None = ...): ...
    def setPrimaryCodomainMapContext(self, theElement, current: Incomplete | None = ...): ...

class ChannelBindingPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getRenderingDef(self, _ctx: Incomplete | None = ...): ...
    def begin_getRenderingDef(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRenderingDef(self, _r): ...
    def setRenderingDef(self, theRenderingDef, _ctx: Incomplete | None = ...): ...
    def begin_setRenderingDef(self, theRenderingDef, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRenderingDef(self, _r): ...
    def getFamily(self, _ctx: Incomplete | None = ...): ...
    def begin_getFamily(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFamily(self, _r): ...
    def setFamily(self, theFamily, _ctx: Incomplete | None = ...): ...
    def begin_setFamily(self, theFamily, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFamily(self, _r): ...
    def getCoefficient(self, _ctx: Incomplete | None = ...): ...
    def begin_getCoefficient(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCoefficient(self, _r): ...
    def setCoefficient(self, theCoefficient, _ctx: Incomplete | None = ...): ...
    def begin_setCoefficient(self, theCoefficient, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCoefficient(self, _r): ...
    def getInputStart(self, _ctx: Incomplete | None = ...): ...
    def begin_getInputStart(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInputStart(self, _r): ...
    def setInputStart(self, theInputStart, _ctx: Incomplete | None = ...): ...
    def begin_setInputStart(self, theInputStart, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInputStart(self, _r): ...
    def getInputEnd(self, _ctx: Incomplete | None = ...): ...
    def begin_getInputEnd(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInputEnd(self, _r): ...
    def setInputEnd(self, theInputEnd, _ctx: Incomplete | None = ...): ...
    def begin_setInputEnd(self, theInputEnd, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInputEnd(self, _r): ...
    def getActive(self, _ctx: Incomplete | None = ...): ...
    def begin_getActive(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getActive(self, _r): ...
    def setActive(self, theActive, _ctx: Incomplete | None = ...): ...
    def begin_setActive(self, theActive, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setActive(self, _r): ...
    def getNoiseReduction(self, _ctx: Incomplete | None = ...): ...
    def begin_getNoiseReduction(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getNoiseReduction(self, _r): ...
    def setNoiseReduction(self, theNoiseReduction, _ctx: Incomplete | None = ...): ...
    def begin_setNoiseReduction(self, theNoiseReduction, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setNoiseReduction(self, _r): ...
    def getRed(self, _ctx: Incomplete | None = ...): ...
    def begin_getRed(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRed(self, _r): ...
    def setRed(self, theRed, _ctx: Incomplete | None = ...): ...
    def begin_setRed(self, theRed, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRed(self, _r): ...
    def getGreen(self, _ctx: Incomplete | None = ...): ...
    def begin_getGreen(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGreen(self, _r): ...
    def setGreen(self, theGreen, _ctx: Incomplete | None = ...): ...
    def begin_setGreen(self, theGreen, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGreen(self, _r): ...
    def getBlue(self, _ctx: Incomplete | None = ...): ...
    def begin_getBlue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getBlue(self, _r): ...
    def setBlue(self, theBlue, _ctx: Incomplete | None = ...): ...
    def begin_setBlue(self, theBlue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setBlue(self, _r): ...
    def getAlpha(self, _ctx: Incomplete | None = ...): ...
    def begin_getAlpha(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAlpha(self, _r): ...
    def setAlpha(self, theAlpha, _ctx: Incomplete | None = ...): ...
    def begin_setAlpha(self, theAlpha, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setAlpha(self, _r): ...
    def getLookupTable(self, _ctx: Incomplete | None = ...): ...
    def begin_getLookupTable(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLookupTable(self, _r): ...
    def setLookupTable(self, theLookupTable, _ctx: Incomplete | None = ...): ...
    def begin_setLookupTable(self, theLookupTable, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLookupTable(self, _r): ...
    def unloadSpatialDomainEnhancement(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadSpatialDomainEnhancement(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadSpatialDomainEnhancement(self, _r): ...
    def sizeOfSpatialDomainEnhancement(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfSpatialDomainEnhancement(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfSpatialDomainEnhancement(self, _r): ...
    def copySpatialDomainEnhancement(self, _ctx: Incomplete | None = ...): ...
    def begin_copySpatialDomainEnhancement(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copySpatialDomainEnhancement(self, _r): ...
    def addCodomainMapContext(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addCodomainMapContext(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addCodomainMapContext(self, _r): ...
    def addAllCodomainMapContextSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllCodomainMapContextSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllCodomainMapContextSet(self, _r): ...
    def removeCodomainMapContext(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeCodomainMapContext(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeCodomainMapContext(self, _r): ...
    def removeAllCodomainMapContextSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllCodomainMapContextSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllCodomainMapContextSet(self, _r): ...
    def clearSpatialDomainEnhancement(self, _ctx: Incomplete | None = ...): ...
    def begin_clearSpatialDomainEnhancement(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearSpatialDomainEnhancement(self, _r): ...
    def reloadSpatialDomainEnhancement(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadSpatialDomainEnhancement(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadSpatialDomainEnhancement(self, _r): ...
    def getCodomainMapContext(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getCodomainMapContext(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCodomainMapContext(self, _r): ...
    def setCodomainMapContext(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setCodomainMapContext(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCodomainMapContext(self, _r): ...
    def getPrimaryCodomainMapContext(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryCodomainMapContext(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryCodomainMapContext(self, _r): ...
    def setPrimaryCodomainMapContext(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryCodomainMapContext(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryCodomainMapContext(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ChannelBindingI(ChannelBinding):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        renderingDef: Incomplete
        family: Incomplete
        coefficient: Incomplete
        inputStart: Incomplete
        inputEnd: Incomplete
        active: Incomplete
        noiseReduction: Incomplete
        red: Incomplete
        green: Incomplete
        blue: Incomplete
        alpha: Incomplete
        lookupTable: Incomplete
        spatialDomainEnhancement: Incomplete
        details: Incomplete
        def __init__(self, _cls, renderingDef, family, coefficient, inputStart, inputEnd, active, noiseReduction, red, green, blue, alpha, lookupTable, spatialDomainEnhancement, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    RENDERINGDEF: ClassVar[str] = ...
    FAMILY: ClassVar[str] = ...
    COEFFICIENT: ClassVar[str] = ...
    INPUTSTART: ClassVar[str] = ...
    INPUTEND: ClassVar[str] = ...
    ACTIVE: ClassVar[str] = ...
    NOISEREDUCTION: ClassVar[str] = ...
    RED: ClassVar[str] = ...
    GREEN: ClassVar[str] = ...
    BLUE: ClassVar[str] = ...
    ALPHA: ClassVar[str] = ...
    LOOKUPTABLE: ClassVar[str] = ...
    SPATIALDOMAINENHANCEMENT: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadRenderingDef(self): ...
    def getRenderingDef(self, current: Incomplete | None = ...): ...
    def setRenderingDef(self, _renderingDef, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFamily(self): ...
    def getFamily(self, current: Incomplete | None = ...): ...
    def setFamily(self, _family, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCoefficient(self): ...
    def getCoefficient(self, current: Incomplete | None = ...): ...
    def setCoefficient(self, _coefficient, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInputStart(self): ...
    def getInputStart(self, current: Incomplete | None = ...): ...
    def setInputStart(self, _inputStart, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInputEnd(self): ...
    def getInputEnd(self, current: Incomplete | None = ...): ...
    def setInputEnd(self, _inputEnd, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadActive(self): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(self, _active, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNoiseReduction(self): ...
    def getNoiseReduction(self, current: Incomplete | None = ...): ...
    def setNoiseReduction(self, _noiseReduction, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRed(self): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, _red, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGreen(self): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, _green, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBlue(self): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, _blue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAlpha(self): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, _alpha, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLookupTable(self): ...
    def getLookupTable(self, current: Incomplete | None = ...): ...
    def setLookupTable(self, _lookupTable, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def isSpatialDomainEnhancementLoaded(self): ...
    def sizeOfSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def copySpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def iterateSpatialDomainEnhancement(self): ...
    def addCodomainMapContext(self, target, current: Incomplete | None = ...): ...
    def addAllCodomainMapContextSet(self, targets, current: Incomplete | None = ...): ...
    def removeCodomainMapContext(self, target, current: Incomplete | None = ...): ...
    def removeAllCodomainMapContextSet(self, targets, current: Incomplete | None = ...): ...
    def clearSpatialDomainEnhancement(self, current: Incomplete | None = ...): ...
    def reloadSpatialDomainEnhancement(self, toCopy, current: Incomplete | None = ...): ...
    def getCodomainMapContext(self, index, current: Incomplete | None = ...): ...
    def setCodomainMapContext(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryCodomainMapContext(self, current: Incomplete | None = ...): ...
    def setPrimaryCodomainMapContext(self, element, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ChecksumAlgorithm(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class ChecksumAlgorithmPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ChecksumAlgorithmI(ChecksumAlgorithm):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class TextAnnotation(Annotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getTextValue: ClassVar[IcePy.Operation] = ...
    _op_setTextValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, theTextValue, current: Incomplete | None = ...): ...

class TextAnnotationPrx(AnnotationPrx):
    def getTextValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTextValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTextValue(self, _r): ...
    def setTextValue(self, theTextValue, _ctx: Incomplete | None = ...): ...
    def begin_setTextValue(self, theTextValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTextValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class CommentAnnotation(TextAnnotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class CommentAnnotationPrx(TextAnnotationPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class CommentAnnotationI(CommentAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        textValue: Incomplete
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, textValue, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TEXTVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ContrastMethod(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class ContrastMethodPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ContrastMethodI(ContrastMethod):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class CodomainMapContext(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getChannelBinding: ClassVar[IcePy.Operation] = ...
    _op_setChannelBinding: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _channelBinding: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getChannelBinding(self, current: Incomplete | None = ...): ...
    def setChannelBinding(self, theChannelBinding, current: Incomplete | None = ...): ...

class CodomainMapContextPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getChannelBinding(self, _ctx: Incomplete | None = ...): ...
    def begin_getChannelBinding(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChannelBinding(self, _r): ...
    def setChannelBinding(self, theChannelBinding, _ctx: Incomplete | None = ...): ...
    def begin_setChannelBinding(self, theChannelBinding, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChannelBinding(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ContrastStretchingContext(CodomainMapContext):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getXstart: ClassVar[IcePy.Operation] = ...
    _op_setXstart: ClassVar[IcePy.Operation] = ...
    _op_getYstart: ClassVar[IcePy.Operation] = ...
    _op_setYstart: ClassVar[IcePy.Operation] = ...
    _op_getXend: ClassVar[IcePy.Operation] = ...
    _op_setXend: ClassVar[IcePy.Operation] = ...
    _op_getYend: ClassVar[IcePy.Operation] = ...
    _op_setYend: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _channelBinding: Incomplete | None = ..., _xstart: Incomplete | None = ..., _ystart: Incomplete | None = ..., _xend: Incomplete | None = ..., _yend: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getXstart(self, current: Incomplete | None = ...): ...
    def setXstart(self, theXstart, current: Incomplete | None = ...): ...
    def getYstart(self, current: Incomplete | None = ...): ...
    def setYstart(self, theYstart, current: Incomplete | None = ...): ...
    def getXend(self, current: Incomplete | None = ...): ...
    def setXend(self, theXend, current: Incomplete | None = ...): ...
    def getYend(self, current: Incomplete | None = ...): ...
    def setYend(self, theYend, current: Incomplete | None = ...): ...

class ContrastStretchingContextPrx(CodomainMapContextPrx):
    def getXstart(self, _ctx: Incomplete | None = ...): ...
    def begin_getXstart(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getXstart(self, _r): ...
    def setXstart(self, theXstart, _ctx: Incomplete | None = ...): ...
    def begin_setXstart(self, theXstart, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setXstart(self, _r): ...
    def getYstart(self, _ctx: Incomplete | None = ...): ...
    def begin_getYstart(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getYstart(self, _r): ...
    def setYstart(self, theYstart, _ctx: Incomplete | None = ...): ...
    def begin_setYstart(self, theYstart, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setYstart(self, _r): ...
    def getXend(self, _ctx: Incomplete | None = ...): ...
    def begin_getXend(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getXend(self, _r): ...
    def setXend(self, theXend, _ctx: Incomplete | None = ...): ...
    def begin_setXend(self, theXend, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setXend(self, _r): ...
    def getYend(self, _ctx: Incomplete | None = ...): ...
    def begin_getYend(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getYend(self, _r): ...
    def setYend(self, theYend, _ctx: Incomplete | None = ...): ...
    def begin_setYend(self, theYend, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setYend(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ContrastStretchingContextI(ContrastStretchingContext):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        xstart: Incomplete
        ystart: Incomplete
        xend: Incomplete
        yend: Incomplete
        channelBinding: Incomplete
        details: Incomplete
        def __init__(self, _cls, xstart, ystart, xend, yend, channelBinding, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    XSTART: ClassVar[str] = ...
    YSTART: ClassVar[str] = ...
    XEND: ClassVar[str] = ...
    YEND: ClassVar[str] = ...
    CHANNELBINDING: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadXstart(self): ...
    def getXstart(self, current: Incomplete | None = ...): ...
    def setXstart(self, _xstart, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadYstart(self): ...
    def getYstart(self, current: Incomplete | None = ...): ...
    def setYstart(self, _ystart, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadXend(self): ...
    def getXend(self, current: Incomplete | None = ...): ...
    def setXend(self, _xend, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadYend(self): ...
    def getYend(self, current: Incomplete | None = ...): ...
    def setYend(self, _yend, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChannelBinding(self): ...
    def getChannelBinding(self, current: Incomplete | None = ...): ...
    def setChannelBinding(self, _channelBinding, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Correction(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class CorrectionPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class CorrectionI(Correction):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class DBPatch(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getCurrentVersion: ClassVar[IcePy.Operation] = ...
    _op_setCurrentVersion: ClassVar[IcePy.Operation] = ...
    _op_getCurrentPatch: ClassVar[IcePy.Operation] = ...
    _op_setCurrentPatch: ClassVar[IcePy.Operation] = ...
    _op_getPreviousVersion: ClassVar[IcePy.Operation] = ...
    _op_setPreviousVersion: ClassVar[IcePy.Operation] = ...
    _op_getPreviousPatch: ClassVar[IcePy.Operation] = ...
    _op_setPreviousPatch: ClassVar[IcePy.Operation] = ...
    _op_getFinished: ClassVar[IcePy.Operation] = ...
    _op_setFinished: ClassVar[IcePy.Operation] = ...
    _op_getMessage: ClassVar[IcePy.Operation] = ...
    _op_setMessage: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _currentVersion: Incomplete | None = ..., _currentPatch: Incomplete | None = ..., _previousVersion: Incomplete | None = ..., _previousPatch: Incomplete | None = ..., _finished: Incomplete | None = ..., _message: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getCurrentVersion(self, current: Incomplete | None = ...): ...
    def setCurrentVersion(self, theCurrentVersion, current: Incomplete | None = ...): ...
    def getCurrentPatch(self, current: Incomplete | None = ...): ...
    def setCurrentPatch(self, theCurrentPatch, current: Incomplete | None = ...): ...
    def getPreviousVersion(self, current: Incomplete | None = ...): ...
    def setPreviousVersion(self, thePreviousVersion, current: Incomplete | None = ...): ...
    def getPreviousPatch(self, current: Incomplete | None = ...): ...
    def setPreviousPatch(self, thePreviousPatch, current: Incomplete | None = ...): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, theFinished, current: Incomplete | None = ...): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, theMessage, current: Incomplete | None = ...): ...

class DBPatchPrx(IObjectPrx):
    def getCurrentVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getCurrentVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCurrentVersion(self, _r): ...
    def setCurrentVersion(self, theCurrentVersion, _ctx: Incomplete | None = ...): ...
    def begin_setCurrentVersion(self, theCurrentVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCurrentVersion(self, _r): ...
    def getCurrentPatch(self, _ctx: Incomplete | None = ...): ...
    def begin_getCurrentPatch(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCurrentPatch(self, _r): ...
    def setCurrentPatch(self, theCurrentPatch, _ctx: Incomplete | None = ...): ...
    def begin_setCurrentPatch(self, theCurrentPatch, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCurrentPatch(self, _r): ...
    def getPreviousVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getPreviousVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPreviousVersion(self, _r): ...
    def setPreviousVersion(self, thePreviousVersion, _ctx: Incomplete | None = ...): ...
    def begin_setPreviousVersion(self, thePreviousVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPreviousVersion(self, _r): ...
    def getPreviousPatch(self, _ctx: Incomplete | None = ...): ...
    def begin_getPreviousPatch(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPreviousPatch(self, _r): ...
    def setPreviousPatch(self, thePreviousPatch, _ctx: Incomplete | None = ...): ...
    def begin_setPreviousPatch(self, thePreviousPatch, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPreviousPatch(self, _r): ...
    def getFinished(self, _ctx: Incomplete | None = ...): ...
    def begin_getFinished(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFinished(self, _r): ...
    def setFinished(self, theFinished, _ctx: Incomplete | None = ...): ...
    def begin_setFinished(self, theFinished, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFinished(self, _r): ...
    def getMessage(self, _ctx: Incomplete | None = ...): ...
    def begin_getMessage(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMessage(self, _r): ...
    def setMessage(self, theMessage, _ctx: Incomplete | None = ...): ...
    def begin_setMessage(self, theMessage, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMessage(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DBPatchI(DBPatch):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        currentVersion: Incomplete
        currentPatch: Incomplete
        previousVersion: Incomplete
        previousPatch: Incomplete
        finished: Incomplete
        message: Incomplete
        details: Incomplete
        def __init__(self, _cls, currentVersion, currentPatch, previousVersion, previousPatch, finished, message, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    CURRENTVERSION: ClassVar[str] = ...
    CURRENTPATCH: ClassVar[str] = ...
    PREVIOUSVERSION: ClassVar[str] = ...
    PREVIOUSPATCH: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadCurrentVersion(self): ...
    def getCurrentVersion(self, current: Incomplete | None = ...): ...
    def setCurrentVersion(self, _currentVersion, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCurrentPatch(self): ...
    def getCurrentPatch(self, current: Incomplete | None = ...): ...
    def setCurrentPatch(self, _currentPatch, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPreviousVersion(self): ...
    def getPreviousVersion(self, current: Incomplete | None = ...): ...
    def setPreviousVersion(self, _previousVersion, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPreviousPatch(self): ...
    def getPreviousPatch(self, current: Incomplete | None = ...): ...
    def setPreviousPatch(self, _previousPatch, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, _finished, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Dataset(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_unloadProjectLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfProjectLinks: ClassVar[IcePy.Operation] = ...
    _op_copyProjectLinks: ClassVar[IcePy.Operation] = ...
    _op_addProjectDatasetLink: ClassVar[IcePy.Operation] = ...
    _op_addAllProjectDatasetLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeProjectDatasetLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllProjectDatasetLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearProjectLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadProjectLinks: ClassVar[IcePy.Operation] = ...
    _op_getProjectLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkProject: ClassVar[IcePy.Operation] = ...
    _op_addProjectDatasetLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findProjectDatasetLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkProject: ClassVar[IcePy.Operation] = ...
    _op_removeProjectDatasetLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedProjectList: ClassVar[IcePy.Operation] = ...
    _op_unloadImageLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfImageLinks: ClassVar[IcePy.Operation] = ...
    _op_copyImageLinks: ClassVar[IcePy.Operation] = ...
    _op_addDatasetImageLink: ClassVar[IcePy.Operation] = ...
    _op_addAllDatasetImageLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeDatasetImageLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllDatasetImageLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearImageLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadImageLinks: ClassVar[IcePy.Operation] = ...
    _op_getImageLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkImage: ClassVar[IcePy.Operation] = ...
    _op_addDatasetImageLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findDatasetImageLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkImage: ClassVar[IcePy.Operation] = ...
    _op_removeDatasetImageLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedImageList: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addDatasetAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllDatasetAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeDatasetAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllDatasetAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addDatasetAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findDatasetAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeDatasetAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _projectLinksSeq: Incomplete | None = ..., _projectLinksLoaded: bool = ..., _projectLinksCountPerOwner: Incomplete | None = ..., _imageLinksSeq: Incomplete | None = ..., _imageLinksLoaded: bool = ..., _imageLinksCountPerOwner: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def unloadProjectLinks(self, current: Incomplete | None = ...): ...
    def sizeOfProjectLinks(self, current: Incomplete | None = ...): ...
    def copyProjectLinks(self, current: Incomplete | None = ...): ...
    def addProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectDatasetLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeProjectDatasetLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllProjectDatasetLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearProjectLinks(self, current: Incomplete | None = ...): ...
    def reloadProjectLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getProjectLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkProject(self, addition, current: Incomplete | None = ...): ...
    def addProjectDatasetLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findProjectDatasetLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkProject(self, removal, current: Incomplete | None = ...): ...
    def removeProjectDatasetLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedProjectList(self, current: Incomplete | None = ...): ...
    def unloadImageLinks(self, current: Incomplete | None = ...): ...
    def sizeOfImageLinks(self, current: Incomplete | None = ...): ...
    def copyImageLinks(self, current: Incomplete | None = ...): ...
    def addDatasetImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDatasetImageLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearImageLinks(self, current: Incomplete | None = ...): ...
    def reloadImageLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getImageLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkImage(self, addition, current: Incomplete | None = ...): ...
    def addDatasetImageLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findDatasetImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkImage(self, removal, current: Incomplete | None = ...): ...
    def removeDatasetImageLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedImageList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addDatasetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDatasetAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDatasetAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDatasetAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addDatasetAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findDatasetAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDatasetAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class DatasetPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def unloadProjectLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadProjectLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadProjectLinks(self, _r): ...
    def sizeOfProjectLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfProjectLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfProjectLinks(self, _r): ...
    def copyProjectLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyProjectLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyProjectLinks(self, _r): ...
    def addProjectDatasetLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addProjectDatasetLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addProjectDatasetLink(self, _r): ...
    def addAllProjectDatasetLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllProjectDatasetLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllProjectDatasetLinkSet(self, _r): ...
    def removeProjectDatasetLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeProjectDatasetLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeProjectDatasetLink(self, _r): ...
    def removeAllProjectDatasetLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllProjectDatasetLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllProjectDatasetLinkSet(self, _r): ...
    def clearProjectLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearProjectLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearProjectLinks(self, _r): ...
    def reloadProjectLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadProjectLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadProjectLinks(self, _r): ...
    def getProjectLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getProjectLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getProjectLinksCountPerOwner(self, _r): ...
    def linkProject(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkProject(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkProject(self, _r): ...
    def addProjectDatasetLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addProjectDatasetLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addProjectDatasetLinkToBoth(self, _r): ...
    def findProjectDatasetLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findProjectDatasetLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findProjectDatasetLink(self, _r): ...
    def unlinkProject(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkProject(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkProject(self, _r): ...
    def removeProjectDatasetLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeProjectDatasetLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeProjectDatasetLinkFromBoth(self, _r): ...
    def linkedProjectList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedProjectList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedProjectList(self, _r): ...
    def unloadImageLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadImageLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadImageLinks(self, _r): ...
    def sizeOfImageLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfImageLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfImageLinks(self, _r): ...
    def copyImageLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyImageLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyImageLinks(self, _r): ...
    def addDatasetImageLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addDatasetImageLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDatasetImageLink(self, _r): ...
    def addAllDatasetImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllDatasetImageLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllDatasetImageLinkSet(self, _r): ...
    def removeDatasetImageLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeDatasetImageLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDatasetImageLink(self, _r): ...
    def removeAllDatasetImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllDatasetImageLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllDatasetImageLinkSet(self, _r): ...
    def clearImageLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearImageLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearImageLinks(self, _r): ...
    def reloadImageLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadImageLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadImageLinks(self, _r): ...
    def getImageLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getImageLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getImageLinksCountPerOwner(self, _r): ...
    def linkImage(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkImage(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkImage(self, _r): ...
    def addDatasetImageLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addDatasetImageLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDatasetImageLinkToBoth(self, _r): ...
    def findDatasetImageLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findDatasetImageLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findDatasetImageLink(self, _r): ...
    def unlinkImage(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkImage(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkImage(self, _r): ...
    def removeDatasetImageLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeDatasetImageLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDatasetImageLinkFromBoth(self, _r): ...
    def linkedImageList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedImageList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedImageList(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addDatasetAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addDatasetAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDatasetAnnotationLink(self, _r): ...
    def addAllDatasetAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllDatasetAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllDatasetAnnotationLinkSet(self, _r): ...
    def removeDatasetAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeDatasetAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDatasetAnnotationLink(self, _r): ...
    def removeAllDatasetAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllDatasetAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllDatasetAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addDatasetAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addDatasetAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDatasetAnnotationLinkToBoth(self, _r): ...
    def findDatasetAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findDatasetAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findDatasetAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeDatasetAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeDatasetAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDatasetAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DatasetI(Dataset):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        projectLinks: Incomplete
        imageLinks: Incomplete
        annotationLinks: Incomplete
        name: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, projectLinks, imageLinks, annotationLinks, name, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PROJECTLINKS: ClassVar[str] = ...
    IMAGELINKS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadProjectLinks(self, current: Incomplete | None = ...): ...
    def isProjectLinksLoaded(self): ...
    def sizeOfProjectLinks(self, current: Incomplete | None = ...): ...
    def copyProjectLinks(self, current: Incomplete | None = ...): ...
    def iterateProjectLinks(self): ...
    def addProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectDatasetLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def removeAllProjectDatasetLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearProjectLinks(self, current: Incomplete | None = ...): ...
    def reloadProjectLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getProjectLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkProject(self, addition, current: Incomplete | None = ...): ...
    def addProjectDatasetLinkToBoth(self, link, bothSides): ...
    def findProjectDatasetLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkProject(self, removal, current: Incomplete | None = ...): ...
    def removeProjectDatasetLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedProjectList(self, current: Incomplete | None = ...): ...
    def unloadImageLinks(self, current: Incomplete | None = ...): ...
    def isImageLinksLoaded(self): ...
    def sizeOfImageLinks(self, current: Incomplete | None = ...): ...
    def copyImageLinks(self, current: Incomplete | None = ...): ...
    def iterateImageLinks(self): ...
    def addDatasetImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDatasetImageLink(self, target, current: Incomplete | None = ...): ...
    def removeAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearImageLinks(self, current: Incomplete | None = ...): ...
    def reloadImageLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getImageLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkImage(self, addition, current: Incomplete | None = ...): ...
    def addDatasetImageLinkToBoth(self, link, bothSides): ...
    def findDatasetImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkImage(self, removal, current: Incomplete | None = ...): ...
    def removeDatasetImageLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedImageList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addDatasetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDatasetAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDatasetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllDatasetAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addDatasetAnnotationLinkToBoth(self, link, bothSides): ...
    def findDatasetAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDatasetAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class DatasetAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class DatasetAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DatasetAnnotationLinkI(DatasetAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class DatasetImageLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class DatasetImageLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DatasetImageLinkI(DatasetImageLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Detector(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getManufacturer: ClassVar[IcePy.Operation] = ...
    _op_setManufacturer: ClassVar[IcePy.Operation] = ...
    _op_getModel: ClassVar[IcePy.Operation] = ...
    _op_setModel: ClassVar[IcePy.Operation] = ...
    _op_getLotNumber: ClassVar[IcePy.Operation] = ...
    _op_setLotNumber: ClassVar[IcePy.Operation] = ...
    _op_getSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_setSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_getVoltage: ClassVar[IcePy.Operation] = ...
    _op_setVoltage: ClassVar[IcePy.Operation] = ...
    _op_getGain: ClassVar[IcePy.Operation] = ...
    _op_setGain: ClassVar[IcePy.Operation] = ...
    _op_getOffsetValue: ClassVar[IcePy.Operation] = ...
    _op_setOffsetValue: ClassVar[IcePy.Operation] = ...
    _op_getZoom: ClassVar[IcePy.Operation] = ...
    _op_setZoom: ClassVar[IcePy.Operation] = ...
    _op_getAmplificationGain: ClassVar[IcePy.Operation] = ...
    _op_setAmplificationGain: ClassVar[IcePy.Operation] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    _op_getInstrument: ClassVar[IcePy.Operation] = ...
    _op_setInstrument: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addDetectorAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllDetectorAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeDetectorAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllDetectorAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addDetectorAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findDetectorAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeDetectorAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _voltage: Incomplete | None = ..., _gain: Incomplete | None = ..., _offsetValue: Incomplete | None = ..., _zoom: Incomplete | None = ..., _amplificationGain: Incomplete | None = ..., _type: Incomplete | None = ..., _instrument: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, theModel, current: Incomplete | None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getVoltage(self, current: Incomplete | None = ...): ...
    def setVoltage(self, theVoltage, current: Incomplete | None = ...): ...
    def getGain(self, current: Incomplete | None = ...): ...
    def setGain(self, theGain, current: Incomplete | None = ...): ...
    def getOffsetValue(self, current: Incomplete | None = ...): ...
    def setOffsetValue(self, theOffsetValue, current: Incomplete | None = ...): ...
    def getZoom(self, current: Incomplete | None = ...): ...
    def setZoom(self, theZoom, current: Incomplete | None = ...): ...
    def getAmplificationGain(self, current: Incomplete | None = ...): ...
    def setAmplificationGain(self, theAmplificationGain, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addDetectorAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDetectorAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDetectorAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDetectorAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addDetectorAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findDetectorAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDetectorAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class DetectorPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def begin_getManufacturer(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getManufacturer(self, _r): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def begin_setManufacturer(self, theManufacturer, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setManufacturer(self, _r): ...
    def getModel(self, _ctx: Incomplete | None = ...): ...
    def begin_getModel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getModel(self, _r): ...
    def setModel(self, theModel, _ctx: Incomplete | None = ...): ...
    def begin_setModel(self, theModel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setModel(self, _r): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getLotNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLotNumber(self, _r): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def begin_setLotNumber(self, theLotNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLotNumber(self, _r): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getSerialNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSerialNumber(self, _r): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def begin_setSerialNumber(self, theSerialNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSerialNumber(self, _r): ...
    def getVoltage(self, _ctx: Incomplete | None = ...): ...
    def begin_getVoltage(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVoltage(self, _r): ...
    def setVoltage(self, theVoltage, _ctx: Incomplete | None = ...): ...
    def begin_setVoltage(self, theVoltage, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVoltage(self, _r): ...
    def getGain(self, _ctx: Incomplete | None = ...): ...
    def begin_getGain(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGain(self, _r): ...
    def setGain(self, theGain, _ctx: Incomplete | None = ...): ...
    def begin_setGain(self, theGain, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGain(self, _r): ...
    def getOffsetValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getOffsetValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getOffsetValue(self, _r): ...
    def setOffsetValue(self, theOffsetValue, _ctx: Incomplete | None = ...): ...
    def begin_setOffsetValue(self, theOffsetValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setOffsetValue(self, _r): ...
    def getZoom(self, _ctx: Incomplete | None = ...): ...
    def begin_getZoom(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getZoom(self, _r): ...
    def setZoom(self, theZoom, _ctx: Incomplete | None = ...): ...
    def begin_setZoom(self, theZoom, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setZoom(self, _r): ...
    def getAmplificationGain(self, _ctx: Incomplete | None = ...): ...
    def begin_getAmplificationGain(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAmplificationGain(self, _r): ...
    def setAmplificationGain(self, theAmplificationGain, _ctx: Incomplete | None = ...): ...
    def begin_setAmplificationGain(self, theAmplificationGain, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setAmplificationGain(self, _r): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def begin_getInstrument(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInstrument(self, _r): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def begin_setInstrument(self, theInstrument, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInstrument(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addDetectorAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addDetectorAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDetectorAnnotationLink(self, _r): ...
    def addAllDetectorAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllDetectorAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllDetectorAnnotationLinkSet(self, _r): ...
    def removeDetectorAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeDetectorAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDetectorAnnotationLink(self, _r): ...
    def removeAllDetectorAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllDetectorAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllDetectorAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addDetectorAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addDetectorAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDetectorAnnotationLinkToBoth(self, _r): ...
    def findDetectorAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findDetectorAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findDetectorAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeDetectorAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeDetectorAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDetectorAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DetectorI(Detector):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        manufacturer: Incomplete
        model: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        voltage: Incomplete
        gain: Incomplete
        offsetValue: Incomplete
        zoom: Incomplete
        amplificationGain: Incomplete
        type: Incomplete
        instrument: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, manufacturer, model, lotNumber, serialNumber, voltage, gain, offsetValue, zoom, amplificationGain, type, instrument, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    VOLTAGE: ClassVar[str] = ...
    GAIN: ClassVar[str] = ...
    OFFSETVALUE: ClassVar[str] = ...
    ZOOM: ClassVar[str] = ...
    AMPLIFICATIONGAIN: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadVoltage(self): ...
    def getVoltage(self, current: Incomplete | None = ...): ...
    def setVoltage(self, _voltage, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGain(self): ...
    def getGain(self, current: Incomplete | None = ...): ...
    def setGain(self, _gain, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOffsetValue(self): ...
    def getOffsetValue(self, current: Incomplete | None = ...): ...
    def setOffsetValue(self, _offsetValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadZoom(self): ...
    def getZoom(self, current: Incomplete | None = ...): ...
    def setZoom(self, _zoom, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAmplificationGain(self): ...
    def getAmplificationGain(self, current: Incomplete | None = ...): ...
    def setAmplificationGain(self, _amplificationGain, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addDetectorAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDetectorAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDetectorAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllDetectorAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addDetectorAnnotationLinkToBoth(self, link, bothSides): ...
    def findDetectorAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDetectorAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class DetectorAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class DetectorAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DetectorAnnotationLinkI(DetectorAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class DetectorSettings(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getVoltage: ClassVar[IcePy.Operation] = ...
    _op_setVoltage: ClassVar[IcePy.Operation] = ...
    _op_getGain: ClassVar[IcePy.Operation] = ...
    _op_setGain: ClassVar[IcePy.Operation] = ...
    _op_getOffsetValue: ClassVar[IcePy.Operation] = ...
    _op_setOffsetValue: ClassVar[IcePy.Operation] = ...
    _op_getReadOutRate: ClassVar[IcePy.Operation] = ...
    _op_setReadOutRate: ClassVar[IcePy.Operation] = ...
    _op_getBinning: ClassVar[IcePy.Operation] = ...
    _op_setBinning: ClassVar[IcePy.Operation] = ...
    _op_getIntegration: ClassVar[IcePy.Operation] = ...
    _op_setIntegration: ClassVar[IcePy.Operation] = ...
    _op_getZoom: ClassVar[IcePy.Operation] = ...
    _op_setZoom: ClassVar[IcePy.Operation] = ...
    _op_getDetector: ClassVar[IcePy.Operation] = ...
    _op_setDetector: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _voltage: Incomplete | None = ..., _gain: Incomplete | None = ..., _offsetValue: Incomplete | None = ..., _readOutRate: Incomplete | None = ..., _binning: Incomplete | None = ..., _integration: Incomplete | None = ..., _zoom: Incomplete | None = ..., _detector: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getVoltage(self, current: Incomplete | None = ...): ...
    def setVoltage(self, theVoltage, current: Incomplete | None = ...): ...
    def getGain(self, current: Incomplete | None = ...): ...
    def setGain(self, theGain, current: Incomplete | None = ...): ...
    def getOffsetValue(self, current: Incomplete | None = ...): ...
    def setOffsetValue(self, theOffsetValue, current: Incomplete | None = ...): ...
    def getReadOutRate(self, current: Incomplete | None = ...): ...
    def setReadOutRate(self, theReadOutRate, current: Incomplete | None = ...): ...
    def getBinning(self, current: Incomplete | None = ...): ...
    def setBinning(self, theBinning, current: Incomplete | None = ...): ...
    def getIntegration(self, current: Incomplete | None = ...): ...
    def setIntegration(self, theIntegration, current: Incomplete | None = ...): ...
    def getZoom(self, current: Incomplete | None = ...): ...
    def setZoom(self, theZoom, current: Incomplete | None = ...): ...
    def getDetector(self, current: Incomplete | None = ...): ...
    def setDetector(self, theDetector, current: Incomplete | None = ...): ...

class DetectorSettingsPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getVoltage(self, _ctx: Incomplete | None = ...): ...
    def begin_getVoltage(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVoltage(self, _r): ...
    def setVoltage(self, theVoltage, _ctx: Incomplete | None = ...): ...
    def begin_setVoltage(self, theVoltage, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVoltage(self, _r): ...
    def getGain(self, _ctx: Incomplete | None = ...): ...
    def begin_getGain(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGain(self, _r): ...
    def setGain(self, theGain, _ctx: Incomplete | None = ...): ...
    def begin_setGain(self, theGain, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGain(self, _r): ...
    def getOffsetValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getOffsetValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getOffsetValue(self, _r): ...
    def setOffsetValue(self, theOffsetValue, _ctx: Incomplete | None = ...): ...
    def begin_setOffsetValue(self, theOffsetValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setOffsetValue(self, _r): ...
    def getReadOutRate(self, _ctx: Incomplete | None = ...): ...
    def begin_getReadOutRate(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getReadOutRate(self, _r): ...
    def setReadOutRate(self, theReadOutRate, _ctx: Incomplete | None = ...): ...
    def begin_setReadOutRate(self, theReadOutRate, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setReadOutRate(self, _r): ...
    def getBinning(self, _ctx: Incomplete | None = ...): ...
    def begin_getBinning(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getBinning(self, _r): ...
    def setBinning(self, theBinning, _ctx: Incomplete | None = ...): ...
    def begin_setBinning(self, theBinning, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setBinning(self, _r): ...
    def getIntegration(self, _ctx: Incomplete | None = ...): ...
    def begin_getIntegration(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getIntegration(self, _r): ...
    def setIntegration(self, theIntegration, _ctx: Incomplete | None = ...): ...
    def begin_setIntegration(self, theIntegration, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setIntegration(self, _r): ...
    def getZoom(self, _ctx: Incomplete | None = ...): ...
    def begin_getZoom(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getZoom(self, _r): ...
    def setZoom(self, theZoom, _ctx: Incomplete | None = ...): ...
    def begin_setZoom(self, theZoom, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setZoom(self, _r): ...
    def getDetector(self, _ctx: Incomplete | None = ...): ...
    def begin_getDetector(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDetector(self, _r): ...
    def setDetector(self, theDetector, _ctx: Incomplete | None = ...): ...
    def begin_setDetector(self, theDetector, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDetector(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DetectorSettingsI(DetectorSettings):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        voltage: Incomplete
        gain: Incomplete
        offsetValue: Incomplete
        readOutRate: Incomplete
        binning: Incomplete
        integration: Incomplete
        zoom: Incomplete
        detector: Incomplete
        details: Incomplete
        def __init__(self, _cls, voltage, gain, offsetValue, readOutRate, binning, integration, zoom, detector, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VOLTAGE: ClassVar[str] = ...
    GAIN: ClassVar[str] = ...
    OFFSETVALUE: ClassVar[str] = ...
    READOUTRATE: ClassVar[str] = ...
    BINNING: ClassVar[str] = ...
    INTEGRATION: ClassVar[str] = ...
    ZOOM: ClassVar[str] = ...
    DETECTOR: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadVoltage(self): ...
    def getVoltage(self, current: Incomplete | None = ...): ...
    def setVoltage(self, _voltage, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGain(self): ...
    def getGain(self, current: Incomplete | None = ...): ...
    def setGain(self, _gain, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOffsetValue(self): ...
    def getOffsetValue(self, current: Incomplete | None = ...): ...
    def setOffsetValue(self, _offsetValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadReadOutRate(self): ...
    def getReadOutRate(self, current: Incomplete | None = ...): ...
    def setReadOutRate(self, _readOutRate, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBinning(self): ...
    def getBinning(self, current: Incomplete | None = ...): ...
    def setBinning(self, _binning, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadIntegration(self): ...
    def getIntegration(self, current: Incomplete | None = ...): ...
    def setIntegration(self, _integration, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadZoom(self): ...
    def getZoom(self, current: Incomplete | None = ...): ...
    def setZoom(self, _zoom, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDetector(self): ...
    def getDetector(self, current: Incomplete | None = ...): ...
    def setDetector(self, _detector, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class DetectorType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class DetectorTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DetectorTypeI(DetectorType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Dichroic(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getManufacturer: ClassVar[IcePy.Operation] = ...
    _op_setManufacturer: ClassVar[IcePy.Operation] = ...
    _op_getModel: ClassVar[IcePy.Operation] = ...
    _op_setModel: ClassVar[IcePy.Operation] = ...
    _op_getLotNumber: ClassVar[IcePy.Operation] = ...
    _op_setLotNumber: ClassVar[IcePy.Operation] = ...
    _op_getSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_setSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_getInstrument: ClassVar[IcePy.Operation] = ...
    _op_setInstrument: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addDichroicAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllDichroicAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeDichroicAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllDichroicAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addDichroicAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findDichroicAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeDichroicAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _instrument: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, theModel, current: Incomplete | None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addDichroicAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDichroicAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDichroicAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDichroicAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addDichroicAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findDichroicAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDichroicAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class DichroicPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def begin_getManufacturer(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getManufacturer(self, _r): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def begin_setManufacturer(self, theManufacturer, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setManufacturer(self, _r): ...
    def getModel(self, _ctx: Incomplete | None = ...): ...
    def begin_getModel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getModel(self, _r): ...
    def setModel(self, theModel, _ctx: Incomplete | None = ...): ...
    def begin_setModel(self, theModel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setModel(self, _r): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getLotNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLotNumber(self, _r): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def begin_setLotNumber(self, theLotNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLotNumber(self, _r): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getSerialNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSerialNumber(self, _r): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def begin_setSerialNumber(self, theSerialNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSerialNumber(self, _r): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def begin_getInstrument(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInstrument(self, _r): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def begin_setInstrument(self, theInstrument, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInstrument(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addDichroicAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addDichroicAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDichroicAnnotationLink(self, _r): ...
    def addAllDichroicAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllDichroicAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllDichroicAnnotationLinkSet(self, _r): ...
    def removeDichroicAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeDichroicAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDichroicAnnotationLink(self, _r): ...
    def removeAllDichroicAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllDichroicAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllDichroicAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addDichroicAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addDichroicAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDichroicAnnotationLinkToBoth(self, _r): ...
    def findDichroicAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findDichroicAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findDichroicAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeDichroicAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeDichroicAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDichroicAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DichroicI(Dichroic):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        manufacturer: Incomplete
        model: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        instrument: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, manufacturer, model, lotNumber, serialNumber, instrument, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addDichroicAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllDichroicAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDichroicAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllDichroicAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addDichroicAnnotationLinkToBoth(self, link, bothSides): ...
    def findDichroicAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeDichroicAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class DichroicAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class DichroicAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DichroicAnnotationLinkI(DichroicAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class DimensionOrder(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class DimensionOrderPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DimensionOrderI(DimensionOrder):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class NumericAnnotation(BasicAnnotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class NumericAnnotationPrx(BasicAnnotationPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DoubleAnnotation(NumericAnnotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getDoubleValue: ClassVar[IcePy.Operation] = ...
    _op_setDoubleValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _doubleValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getDoubleValue(self, current: Incomplete | None = ...): ...
    def setDoubleValue(self, theDoubleValue, current: Incomplete | None = ...): ...

class DoubleAnnotationPrx(NumericAnnotationPrx):
    def getDoubleValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getDoubleValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDoubleValue(self, _r): ...
    def setDoubleValue(self, theDoubleValue, _ctx: Incomplete | None = ...): ...
    def begin_setDoubleValue(self, theDoubleValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDoubleValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class DoubleAnnotationI(DoubleAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        doubleValue: Incomplete
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, doubleValue, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    DOUBLEVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadDoubleValue(self): ...
    def getDoubleValue(self, current: Incomplete | None = ...): ...
    def setDoubleValue(self, _doubleValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Shape(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getTheZ: ClassVar[IcePy.Operation] = ...
    _op_setTheZ: ClassVar[IcePy.Operation] = ...
    _op_getTheT: ClassVar[IcePy.Operation] = ...
    _op_setTheT: ClassVar[IcePy.Operation] = ...
    _op_getTheC: ClassVar[IcePy.Operation] = ...
    _op_setTheC: ClassVar[IcePy.Operation] = ...
    _op_getRoi: ClassVar[IcePy.Operation] = ...
    _op_setRoi: ClassVar[IcePy.Operation] = ...
    _op_getLocked: ClassVar[IcePy.Operation] = ...
    _op_setLocked: ClassVar[IcePy.Operation] = ...
    _op_getTransform: ClassVar[IcePy.Operation] = ...
    _op_setTransform: ClassVar[IcePy.Operation] = ...
    _op_getFillColor: ClassVar[IcePy.Operation] = ...
    _op_setFillColor: ClassVar[IcePy.Operation] = ...
    _op_getFillRule: ClassVar[IcePy.Operation] = ...
    _op_setFillRule: ClassVar[IcePy.Operation] = ...
    _op_getStrokeColor: ClassVar[IcePy.Operation] = ...
    _op_setStrokeColor: ClassVar[IcePy.Operation] = ...
    _op_getStrokeDashArray: ClassVar[IcePy.Operation] = ...
    _op_setStrokeDashArray: ClassVar[IcePy.Operation] = ...
    _op_getStrokeWidth: ClassVar[IcePy.Operation] = ...
    _op_setStrokeWidth: ClassVar[IcePy.Operation] = ...
    _op_getFontFamily: ClassVar[IcePy.Operation] = ...
    _op_setFontFamily: ClassVar[IcePy.Operation] = ...
    _op_getFontSize: ClassVar[IcePy.Operation] = ...
    _op_setFontSize: ClassVar[IcePy.Operation] = ...
    _op_getFontStyle: ClassVar[IcePy.Operation] = ...
    _op_setFontStyle: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addShapeAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllShapeAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeShapeAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllShapeAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addShapeAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findShapeAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeShapeAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theT: Incomplete | None = ..., _theC: Incomplete | None = ..., _roi: Incomplete | None = ..., _locked: Incomplete | None = ..., _transform: Incomplete | None = ..., _fillColor: Incomplete | None = ..., _fillRule: Incomplete | None = ..., _strokeColor: Incomplete | None = ..., _strokeDashArray: Incomplete | None = ..., _strokeWidth: Incomplete | None = ..., _fontFamily: Incomplete | None = ..., _fontSize: Incomplete | None = ..., _fontStyle: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, theTheZ, current: Incomplete | None = ...): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, theTheT, current: Incomplete | None = ...): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, theTheC, current: Incomplete | None = ...): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, theRoi, current: Incomplete | None = ...): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, theLocked, current: Incomplete | None = ...): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, theTransform, current: Incomplete | None = ...): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, theFillColor, current: Incomplete | None = ...): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, theFillRule, current: Incomplete | None = ...): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, theStrokeColor, current: Incomplete | None = ...): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(self, theStrokeDashArray, current: Incomplete | None = ...): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, theStrokeWidth, current: Incomplete | None = ...): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, theFontFamily, current: Incomplete | None = ...): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, theFontSize, current: Incomplete | None = ...): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, theFontStyle, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ShapePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getTheZ(self, _ctx: Incomplete | None = ...): ...
    def begin_getTheZ(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTheZ(self, _r): ...
    def setTheZ(self, theTheZ, _ctx: Incomplete | None = ...): ...
    def begin_setTheZ(self, theTheZ, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTheZ(self, _r): ...
    def getTheT(self, _ctx: Incomplete | None = ...): ...
    def begin_getTheT(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTheT(self, _r): ...
    def setTheT(self, theTheT, _ctx: Incomplete | None = ...): ...
    def begin_setTheT(self, theTheT, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTheT(self, _r): ...
    def getTheC(self, _ctx: Incomplete | None = ...): ...
    def begin_getTheC(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTheC(self, _r): ...
    def setTheC(self, theTheC, _ctx: Incomplete | None = ...): ...
    def begin_setTheC(self, theTheC, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTheC(self, _r): ...
    def getRoi(self, _ctx: Incomplete | None = ...): ...
    def begin_getRoi(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRoi(self, _r): ...
    def setRoi(self, theRoi, _ctx: Incomplete | None = ...): ...
    def begin_setRoi(self, theRoi, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRoi(self, _r): ...
    def getLocked(self, _ctx: Incomplete | None = ...): ...
    def begin_getLocked(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLocked(self, _r): ...
    def setLocked(self, theLocked, _ctx: Incomplete | None = ...): ...
    def begin_setLocked(self, theLocked, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLocked(self, _r): ...
    def getTransform(self, _ctx: Incomplete | None = ...): ...
    def begin_getTransform(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTransform(self, _r): ...
    def setTransform(self, theTransform, _ctx: Incomplete | None = ...): ...
    def begin_setTransform(self, theTransform, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTransform(self, _r): ...
    def getFillColor(self, _ctx: Incomplete | None = ...): ...
    def begin_getFillColor(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFillColor(self, _r): ...
    def setFillColor(self, theFillColor, _ctx: Incomplete | None = ...): ...
    def begin_setFillColor(self, theFillColor, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFillColor(self, _r): ...
    def getFillRule(self, _ctx: Incomplete | None = ...): ...
    def begin_getFillRule(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFillRule(self, _r): ...
    def setFillRule(self, theFillRule, _ctx: Incomplete | None = ...): ...
    def begin_setFillRule(self, theFillRule, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFillRule(self, _r): ...
    def getStrokeColor(self, _ctx: Incomplete | None = ...): ...
    def begin_getStrokeColor(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStrokeColor(self, _r): ...
    def setStrokeColor(self, theStrokeColor, _ctx: Incomplete | None = ...): ...
    def begin_setStrokeColor(self, theStrokeColor, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStrokeColor(self, _r): ...
    def getStrokeDashArray(self, _ctx: Incomplete | None = ...): ...
    def begin_getStrokeDashArray(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStrokeDashArray(self, _r): ...
    def setStrokeDashArray(self, theStrokeDashArray, _ctx: Incomplete | None = ...): ...
    def begin_setStrokeDashArray(self, theStrokeDashArray, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStrokeDashArray(self, _r): ...
    def getStrokeWidth(self, _ctx: Incomplete | None = ...): ...
    def begin_getStrokeWidth(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStrokeWidth(self, _r): ...
    def setStrokeWidth(self, theStrokeWidth, _ctx: Incomplete | None = ...): ...
    def begin_setStrokeWidth(self, theStrokeWidth, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStrokeWidth(self, _r): ...
    def getFontFamily(self, _ctx: Incomplete | None = ...): ...
    def begin_getFontFamily(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFontFamily(self, _r): ...
    def setFontFamily(self, theFontFamily, _ctx: Incomplete | None = ...): ...
    def begin_setFontFamily(self, theFontFamily, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFontFamily(self, _r): ...
    def getFontSize(self, _ctx: Incomplete | None = ...): ...
    def begin_getFontSize(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFontSize(self, _r): ...
    def setFontSize(self, theFontSize, _ctx: Incomplete | None = ...): ...
    def begin_setFontSize(self, theFontSize, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFontSize(self, _r): ...
    def getFontStyle(self, _ctx: Incomplete | None = ...): ...
    def begin_getFontStyle(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFontStyle(self, _r): ...
    def setFontStyle(self, theFontStyle, _ctx: Incomplete | None = ...): ...
    def begin_setFontStyle(self, theFontStyle, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFontStyle(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addShapeAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addShapeAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addShapeAnnotationLink(self, _r): ...
    def addAllShapeAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllShapeAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllShapeAnnotationLinkSet(self, _r): ...
    def removeShapeAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeShapeAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeShapeAnnotationLink(self, _r): ...
    def removeAllShapeAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllShapeAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllShapeAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addShapeAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addShapeAnnotationLinkToBoth(self, _r): ...
    def findShapeAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findShapeAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findShapeAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeShapeAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeShapeAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class Ellipse(Shape):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getX: ClassVar[IcePy.Operation] = ...
    _op_setX: ClassVar[IcePy.Operation] = ...
    _op_getY: ClassVar[IcePy.Operation] = ...
    _op_setY: ClassVar[IcePy.Operation] = ...
    _op_getRadiusX: ClassVar[IcePy.Operation] = ...
    _op_setRadiusX: ClassVar[IcePy.Operation] = ...
    _op_getRadiusY: ClassVar[IcePy.Operation] = ...
    _op_setRadiusY: ClassVar[IcePy.Operation] = ...
    _op_getTextValue: ClassVar[IcePy.Operation] = ...
    _op_setTextValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theT: Incomplete | None = ..., _theC: Incomplete | None = ..., _roi: Incomplete | None = ..., _locked: Incomplete | None = ..., _transform: Incomplete | None = ..., _fillColor: Incomplete | None = ..., _fillRule: Incomplete | None = ..., _strokeColor: Incomplete | None = ..., _strokeDashArray: Incomplete | None = ..., _strokeWidth: Incomplete | None = ..., _fontFamily: Incomplete | None = ..., _fontSize: Incomplete | None = ..., _fontStyle: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _x: Incomplete | None = ..., _y: Incomplete | None = ..., _radiusX: Incomplete | None = ..., _radiusY: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, theX, current: Incomplete | None = ...): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, theY, current: Incomplete | None = ...): ...
    def getRadiusX(self, current: Incomplete | None = ...): ...
    def setRadiusX(self, theRadiusX, current: Incomplete | None = ...): ...
    def getRadiusY(self, current: Incomplete | None = ...): ...
    def setRadiusY(self, theRadiusY, current: Incomplete | None = ...): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, theTextValue, current: Incomplete | None = ...): ...

class EllipsePrx(ShapePrx):
    def getX(self, _ctx: Incomplete | None = ...): ...
    def begin_getX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getX(self, _r): ...
    def setX(self, theX, _ctx: Incomplete | None = ...): ...
    def begin_setX(self, theX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setX(self, _r): ...
    def getY(self, _ctx: Incomplete | None = ...): ...
    def begin_getY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getY(self, _r): ...
    def setY(self, theY, _ctx: Incomplete | None = ...): ...
    def begin_setY(self, theY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setY(self, _r): ...
    def getRadiusX(self, _ctx: Incomplete | None = ...): ...
    def begin_getRadiusX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRadiusX(self, _r): ...
    def setRadiusX(self, theRadiusX, _ctx: Incomplete | None = ...): ...
    def begin_setRadiusX(self, theRadiusX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRadiusX(self, _r): ...
    def getRadiusY(self, _ctx: Incomplete | None = ...): ...
    def begin_getRadiusY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRadiusY(self, _r): ...
    def setRadiusY(self, theRadiusY, _ctx: Incomplete | None = ...): ...
    def begin_setRadiusY(self, theRadiusY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRadiusY(self, _r): ...
    def getTextValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTextValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTextValue(self, _r): ...
    def setTextValue(self, theTextValue, _ctx: Incomplete | None = ...): ...
    def begin_setTextValue(self, theTextValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTextValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class EllipseI(Ellipse):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        x: Incomplete
        y: Incomplete
        radiusX: Incomplete
        radiusY: Incomplete
        textValue: Incomplete
        theZ: Incomplete
        theT: Incomplete
        theC: Incomplete
        roi: Incomplete
        locked: Incomplete
        transform: Incomplete
        fillColor: Incomplete
        fillRule: Incomplete
        strokeColor: Incomplete
        strokeDashArray: Incomplete
        strokeWidth: Incomplete
        fontFamily: Incomplete
        fontSize: Incomplete
        fontStyle: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, x, y, radiusX, radiusY, textValue, theZ, theT, theC, roi, locked, transform, fillColor, fillRule, strokeColor, strokeDashArray, strokeWidth, fontFamily, fontSize, fontStyle, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    X: ClassVar[str] = ...
    Y: ClassVar[str] = ...
    RADIUSX: ClassVar[str] = ...
    RADIUSY: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadX(self): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, _x, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY(self): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, _y, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRadiusX(self): ...
    def getRadiusX(self, current: Incomplete | None = ...): ...
    def setRadiusX(self, _radiusX, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRadiusY(self): ...
    def getRadiusY(self, current: Incomplete | None = ...): ...
    def setRadiusY(self, _radiusY, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, _locked, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, _transform, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Event(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getStatus: ClassVar[IcePy.Operation] = ...
    _op_setStatus: ClassVar[IcePy.Operation] = ...
    _op_getTime: ClassVar[IcePy.Operation] = ...
    _op_setTime: ClassVar[IcePy.Operation] = ...
    _op_getExperimenter: ClassVar[IcePy.Operation] = ...
    _op_setExperimenter: ClassVar[IcePy.Operation] = ...
    _op_getExperimenterGroup: ClassVar[IcePy.Operation] = ...
    _op_setExperimenterGroup: ClassVar[IcePy.Operation] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    _op_getContainingEvent: ClassVar[IcePy.Operation] = ...
    _op_setContainingEvent: ClassVar[IcePy.Operation] = ...
    _op_unloadLogs: ClassVar[IcePy.Operation] = ...
    _op_sizeOfLogs: ClassVar[IcePy.Operation] = ...
    _op_copyLogs: ClassVar[IcePy.Operation] = ...
    _op_addEventLog: ClassVar[IcePy.Operation] = ...
    _op_addAllEventLogSet: ClassVar[IcePy.Operation] = ...
    _op_removeEventLog: ClassVar[IcePy.Operation] = ...
    _op_removeAllEventLogSet: ClassVar[IcePy.Operation] = ...
    _op_clearLogs: ClassVar[IcePy.Operation] = ...
    _op_reloadLogs: ClassVar[IcePy.Operation] = ...
    _op_getSession: ClassVar[IcePy.Operation] = ...
    _op_setSession: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _status: Incomplete | None = ..., _time: Incomplete | None = ..., _experimenter: Incomplete | None = ..., _experimenterGroup: Incomplete | None = ..., _type: Incomplete | None = ..., _containingEvent: Incomplete | None = ..., _logsSeq: Incomplete | None = ..., _logsLoaded: bool = ..., _session: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, theStatus, current: Incomplete | None = ...): ...
    def getTime(self, current: Incomplete | None = ...): ...
    def setTime(self, theTime, current: Incomplete | None = ...): ...
    def getExperimenter(self, current: Incomplete | None = ...): ...
    def setExperimenter(self, theExperimenter, current: Incomplete | None = ...): ...
    def getExperimenterGroup(self, current: Incomplete | None = ...): ...
    def setExperimenterGroup(self, theExperimenterGroup, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getContainingEvent(self, current: Incomplete | None = ...): ...
    def setContainingEvent(self, theContainingEvent, current: Incomplete | None = ...): ...
    def unloadLogs(self, current: Incomplete | None = ...): ...
    def sizeOfLogs(self, current: Incomplete | None = ...): ...
    def copyLogs(self, current: Incomplete | None = ...): ...
    def addEventLog(self, target, current: Incomplete | None = ...): ...
    def addAllEventLogSet(self, targets, current: Incomplete | None = ...): ...
    def removeEventLog(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllEventLogSet(self, targets, current: Incomplete | None = ...): ...
    def clearLogs(self, current: Incomplete | None = ...): ...
    def reloadLogs(self, toCopy, current: Incomplete | None = ...): ...
    def getSession(self, current: Incomplete | None = ...): ...
    def setSession(self, theSession, current: Incomplete | None = ...): ...

class EventPrx(IObjectPrx):
    def getStatus(self, _ctx: Incomplete | None = ...): ...
    def begin_getStatus(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStatus(self, _r): ...
    def setStatus(self, theStatus, _ctx: Incomplete | None = ...): ...
    def begin_setStatus(self, theStatus, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStatus(self, _r): ...
    def getTime(self, _ctx: Incomplete | None = ...): ...
    def begin_getTime(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTime(self, _r): ...
    def setTime(self, theTime, _ctx: Incomplete | None = ...): ...
    def begin_setTime(self, theTime, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTime(self, _r): ...
    def getExperimenter(self, _ctx: Incomplete | None = ...): ...
    def begin_getExperimenter(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExperimenter(self, _r): ...
    def setExperimenter(self, theExperimenter, _ctx: Incomplete | None = ...): ...
    def begin_setExperimenter(self, theExperimenter, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setExperimenter(self, _r): ...
    def getExperimenterGroup(self, _ctx: Incomplete | None = ...): ...
    def begin_getExperimenterGroup(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExperimenterGroup(self, _r): ...
    def setExperimenterGroup(self, theExperimenterGroup, _ctx: Incomplete | None = ...): ...
    def begin_setExperimenterGroup(self, theExperimenterGroup, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setExperimenterGroup(self, _r): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    def getContainingEvent(self, _ctx: Incomplete | None = ...): ...
    def begin_getContainingEvent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getContainingEvent(self, _r): ...
    def setContainingEvent(self, theContainingEvent, _ctx: Incomplete | None = ...): ...
    def begin_setContainingEvent(self, theContainingEvent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setContainingEvent(self, _r): ...
    def unloadLogs(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadLogs(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadLogs(self, _r): ...
    def sizeOfLogs(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfLogs(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfLogs(self, _r): ...
    def copyLogs(self, _ctx: Incomplete | None = ...): ...
    def begin_copyLogs(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyLogs(self, _r): ...
    def addEventLog(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addEventLog(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addEventLog(self, _r): ...
    def addAllEventLogSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllEventLogSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllEventLogSet(self, _r): ...
    def removeEventLog(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeEventLog(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeEventLog(self, _r): ...
    def removeAllEventLogSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllEventLogSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllEventLogSet(self, _r): ...
    def clearLogs(self, _ctx: Incomplete | None = ...): ...
    def begin_clearLogs(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearLogs(self, _r): ...
    def reloadLogs(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadLogs(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadLogs(self, _r): ...
    def getSession(self, _ctx: Incomplete | None = ...): ...
    def begin_getSession(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSession(self, _r): ...
    def setSession(self, theSession, _ctx: Incomplete | None = ...): ...
    def begin_setSession(self, theSession, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSession(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class EventI(Event):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        status: Incomplete
        time: Incomplete
        experimenter: Incomplete
        experimenterGroup: Incomplete
        type: Incomplete
        containingEvent: Incomplete
        logs: Incomplete
        session: Incomplete
        details: Incomplete
        def __init__(self, _cls, status, time, experimenter, experimenterGroup, type, containingEvent, logs, session, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    STATUS: ClassVar[str] = ...
    TIME: ClassVar[str] = ...
    EXPERIMENTER: ClassVar[str] = ...
    EXPERIMENTERGROUP: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    CONTAININGEVENT: ClassVar[str] = ...
    LOGS: ClassVar[str] = ...
    SESSION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTime(self): ...
    def getTime(self, current: Incomplete | None = ...): ...
    def setTime(self, _time, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadExperimenter(self): ...
    def getExperimenter(self, current: Incomplete | None = ...): ...
    def setExperimenter(self, _experimenter, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadExperimenterGroup(self): ...
    def getExperimenterGroup(self, current: Incomplete | None = ...): ...
    def setExperimenterGroup(self, _experimenterGroup, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadContainingEvent(self): ...
    def getContainingEvent(self, current: Incomplete | None = ...): ...
    def setContainingEvent(self, _containingEvent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLogs(self, current: Incomplete | None = ...): ...
    def isLogsLoaded(self): ...
    def sizeOfLogs(self, current: Incomplete | None = ...): ...
    def copyLogs(self, current: Incomplete | None = ...): ...
    def iterateLogs(self): ...
    def addEventLog(self, target, current: Incomplete | None = ...): ...
    def addAllEventLogSet(self, targets, current: Incomplete | None = ...): ...
    def removeEventLog(self, target, current: Incomplete | None = ...): ...
    def removeAllEventLogSet(self, targets, current: Incomplete | None = ...): ...
    def clearLogs(self, current: Incomplete | None = ...): ...
    def reloadLogs(self, toCopy, current: Incomplete | None = ...): ...
    def unloadSession(self): ...
    def getSession(self, current: Incomplete | None = ...): ...
    def setSession(self, _session, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class EventLog(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getEntityId: ClassVar[IcePy.Operation] = ...
    _op_setEntityId: ClassVar[IcePy.Operation] = ...
    _op_getEntityType: ClassVar[IcePy.Operation] = ...
    _op_setEntityType: ClassVar[IcePy.Operation] = ...
    _op_getAction: ClassVar[IcePy.Operation] = ...
    _op_setAction: ClassVar[IcePy.Operation] = ...
    _op_getEvent: ClassVar[IcePy.Operation] = ...
    _op_setEvent: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _entityId: Incomplete | None = ..., _entityType: Incomplete | None = ..., _action: Incomplete | None = ..., _event: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getEntityId(self, current: Incomplete | None = ...): ...
    def setEntityId(self, theEntityId, current: Incomplete | None = ...): ...
    def getEntityType(self, current: Incomplete | None = ...): ...
    def setEntityType(self, theEntityType, current: Incomplete | None = ...): ...
    def getAction(self, current: Incomplete | None = ...): ...
    def setAction(self, theAction, current: Incomplete | None = ...): ...
    def getEvent(self, current: Incomplete | None = ...): ...
    def setEvent(self, theEvent, current: Incomplete | None = ...): ...

class EventLogPrx(IObjectPrx):
    def getEntityId(self, _ctx: Incomplete | None = ...): ...
    def begin_getEntityId(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEntityId(self, _r): ...
    def setEntityId(self, theEntityId, _ctx: Incomplete | None = ...): ...
    def begin_setEntityId(self, theEntityId, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setEntityId(self, _r): ...
    def getEntityType(self, _ctx: Incomplete | None = ...): ...
    def begin_getEntityType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEntityType(self, _r): ...
    def setEntityType(self, theEntityType, _ctx: Incomplete | None = ...): ...
    def begin_setEntityType(self, theEntityType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setEntityType(self, _r): ...
    def getAction(self, _ctx: Incomplete | None = ...): ...
    def begin_getAction(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAction(self, _r): ...
    def setAction(self, theAction, _ctx: Incomplete | None = ...): ...
    def begin_setAction(self, theAction, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setAction(self, _r): ...
    def getEvent(self, _ctx: Incomplete | None = ...): ...
    def begin_getEvent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEvent(self, _r): ...
    def setEvent(self, theEvent, _ctx: Incomplete | None = ...): ...
    def begin_setEvent(self, theEvent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setEvent(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class EventLogI(EventLog):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        entityId: Incomplete
        entityType: Incomplete
        action: Incomplete
        event: Incomplete
        details: Incomplete
        def __init__(self, _cls, entityId, entityType, action, event, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    ENTITYID: ClassVar[str] = ...
    ENTITYTYPE: ClassVar[str] = ...
    ACTION: ClassVar[str] = ...
    EVENT: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadEntityId(self): ...
    def getEntityId(self, current: Incomplete | None = ...): ...
    def setEntityId(self, _entityId, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEntityType(self): ...
    def getEntityType(self, current: Incomplete | None = ...): ...
    def setEntityType(self, _entityType, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAction(self): ...
    def getAction(self, current: Incomplete | None = ...): ...
    def setAction(self, _action, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEvent(self): ...
    def getEvent(self, current: Incomplete | None = ...): ...
    def setEvent(self, _event, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class EventType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class EventTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class EventTypeI(EventType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Experiment(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    _op_unloadMicrobeamManipulation: ClassVar[IcePy.Operation] = ...
    _op_sizeOfMicrobeamManipulation: ClassVar[IcePy.Operation] = ...
    _op_copyMicrobeamManipulation: ClassVar[IcePy.Operation] = ...
    _op_addMicrobeamManipulation: ClassVar[IcePy.Operation] = ...
    _op_addAllMicrobeamManipulationSet: ClassVar[IcePy.Operation] = ...
    _op_removeMicrobeamManipulation: ClassVar[IcePy.Operation] = ...
    _op_removeAllMicrobeamManipulationSet: ClassVar[IcePy.Operation] = ...
    _op_clearMicrobeamManipulation: ClassVar[IcePy.Operation] = ...
    _op_reloadMicrobeamManipulation: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _type: Incomplete | None = ..., _microbeamManipulationSeq: Incomplete | None = ..., _microbeamManipulationLoaded: bool = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def unloadMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def sizeOfMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def copyMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def addMicrobeamManipulation(self, target, current: Incomplete | None = ...): ...
    def addAllMicrobeamManipulationSet(self, targets, current: Incomplete | None = ...): ...
    def removeMicrobeamManipulation(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllMicrobeamManipulationSet(self, targets, current: Incomplete | None = ...): ...
    def clearMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def reloadMicrobeamManipulation(self, toCopy, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class ExperimentPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    def unloadMicrobeamManipulation(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadMicrobeamManipulation(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadMicrobeamManipulation(self, _r): ...
    def sizeOfMicrobeamManipulation(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfMicrobeamManipulation(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfMicrobeamManipulation(self, _r): ...
    def copyMicrobeamManipulation(self, _ctx: Incomplete | None = ...): ...
    def begin_copyMicrobeamManipulation(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyMicrobeamManipulation(self, _r): ...
    def addMicrobeamManipulation(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addMicrobeamManipulation(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addMicrobeamManipulation(self, _r): ...
    def addAllMicrobeamManipulationSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllMicrobeamManipulationSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllMicrobeamManipulationSet(self, _r): ...
    def removeMicrobeamManipulation(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeMicrobeamManipulation(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeMicrobeamManipulation(self, _r): ...
    def removeAllMicrobeamManipulationSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllMicrobeamManipulationSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllMicrobeamManipulationSet(self, _r): ...
    def clearMicrobeamManipulation(self, _ctx: Incomplete | None = ...): ...
    def begin_clearMicrobeamManipulation(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearMicrobeamManipulation(self, _r): ...
    def reloadMicrobeamManipulation(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadMicrobeamManipulation(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadMicrobeamManipulation(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ExperimentI(Experiment):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        type: Incomplete
        microbeamManipulation: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, type, microbeamManipulation, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TYPE: ClassVar[str] = ...
    MICROBEAMMANIPULATION: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def isMicrobeamManipulationLoaded(self): ...
    def sizeOfMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def copyMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def iterateMicrobeamManipulation(self): ...
    def addMicrobeamManipulation(self, target, current: Incomplete | None = ...): ...
    def addAllMicrobeamManipulationSet(self, targets, current: Incomplete | None = ...): ...
    def removeMicrobeamManipulation(self, target, current: Incomplete | None = ...): ...
    def removeAllMicrobeamManipulationSet(self, targets, current: Incomplete | None = ...): ...
    def clearMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def reloadMicrobeamManipulation(self, toCopy, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ExperimentType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class ExperimentTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ExperimentTypeI(ExperimentType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Experimenter(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_unloadGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_sizeOfGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_copyGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_addGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_addAllGroupExperimenterMapSet: ClassVar[IcePy.Operation] = ...
    _op_removeGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_removeAllGroupExperimenterMapSet: ClassVar[IcePy.Operation] = ...
    _op_clearGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_reloadGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_getGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_setGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_linkExperimenterGroup: ClassVar[IcePy.Operation] = ...
    _op_addGroupExperimenterMapToBoth: ClassVar[IcePy.Operation] = ...
    _op_findGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_unlinkExperimenterGroup: ClassVar[IcePy.Operation] = ...
    _op_removeGroupExperimenterMapFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedExperimenterGroupList: ClassVar[IcePy.Operation] = ...
    _op_getOmeName: ClassVar[IcePy.Operation] = ...
    _op_setOmeName: ClassVar[IcePy.Operation] = ...
    _op_getFirstName: ClassVar[IcePy.Operation] = ...
    _op_setFirstName: ClassVar[IcePy.Operation] = ...
    _op_getMiddleName: ClassVar[IcePy.Operation] = ...
    _op_setMiddleName: ClassVar[IcePy.Operation] = ...
    _op_getLastName: ClassVar[IcePy.Operation] = ...
    _op_setLastName: ClassVar[IcePy.Operation] = ...
    _op_getInstitution: ClassVar[IcePy.Operation] = ...
    _op_setInstitution: ClassVar[IcePy.Operation] = ...
    _op_getLdap: ClassVar[IcePy.Operation] = ...
    _op_setLdap: ClassVar[IcePy.Operation] = ...
    _op_getEmail: ClassVar[IcePy.Operation] = ...
    _op_setEmail: ClassVar[IcePy.Operation] = ...
    _op_getConfigAsMap: ClassVar[IcePy.Operation] = ...
    _op_getConfig: ClassVar[IcePy.Operation] = ...
    _op_setConfig: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addExperimenterAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllExperimenterAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeExperimenterAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllExperimenterAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addExperimenterAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findExperimenterAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeExperimenterAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _groupExperimenterMapSeq: Incomplete | None = ..., _groupExperimenterMapLoaded: bool = ..., _omeName: Incomplete | None = ..., _firstName: Incomplete | None = ..., _middleName: Incomplete | None = ..., _lastName: Incomplete | None = ..., _institution: Incomplete | None = ..., _ldap: Incomplete | None = ..., _email: Incomplete | None = ..., _config: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def unloadGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def sizeOfGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def copyGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def addGroupExperimenterMap(self, target, current: Incomplete | None = ...): ...
    def addAllGroupExperimenterMapSet(self, targets, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMap(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllGroupExperimenterMapSet(self, targets, current: Incomplete | None = ...): ...
    def clearGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def reloadGroupExperimenterMap(self, toCopy, current: Incomplete | None = ...): ...
    def getGroupExperimenterMap(self, index, current: Incomplete | None = ...): ...
    def setGroupExperimenterMap(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def setPrimaryGroupExperimenterMap(self, theElement, current: Incomplete | None = ...): ...
    def linkExperimenterGroup(self, addition, current: Incomplete | None = ...): ...
    def addGroupExperimenterMapToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findGroupExperimenterMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkExperimenterGroup(self, removal, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMapFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedExperimenterGroupList(self, current: Incomplete | None = ...): ...
    def getOmeName(self, current: Incomplete | None = ...): ...
    def setOmeName(self, theOmeName, current: Incomplete | None = ...): ...
    def getFirstName(self, current: Incomplete | None = ...): ...
    def setFirstName(self, theFirstName, current: Incomplete | None = ...): ...
    def getMiddleName(self, current: Incomplete | None = ...): ...
    def setMiddleName(self, theMiddleName, current: Incomplete | None = ...): ...
    def getLastName(self, current: Incomplete | None = ...): ...
    def setLastName(self, theLastName, current: Incomplete | None = ...): ...
    def getInstitution(self, current: Incomplete | None = ...): ...
    def setInstitution(self, theInstitution, current: Incomplete | None = ...): ...
    def getLdap(self, current: Incomplete | None = ...): ...
    def setLdap(self, theLdap, current: Incomplete | None = ...): ...
    def getEmail(self, current: Incomplete | None = ...): ...
    def setEmail(self, theEmail, current: Incomplete | None = ...): ...
    def getConfigAsMap(self, current: Incomplete | None = ...): ...
    def getConfig(self, current: Incomplete | None = ...): ...
    def setConfig(self, theConfig, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addExperimenterAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllExperimenterAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeExperimenterAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllExperimenterAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addExperimenterAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findExperimenterAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeExperimenterAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ExperimenterPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def unloadGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadGroupExperimenterMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadGroupExperimenterMap(self, _r): ...
    def sizeOfGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfGroupExperimenterMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfGroupExperimenterMap(self, _r): ...
    def copyGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def begin_copyGroupExperimenterMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyGroupExperimenterMap(self, _r): ...
    def addGroupExperimenterMap(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addGroupExperimenterMap(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addGroupExperimenterMap(self, _r): ...
    def addAllGroupExperimenterMapSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllGroupExperimenterMapSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllGroupExperimenterMapSet(self, _r): ...
    def removeGroupExperimenterMap(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeGroupExperimenterMap(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeGroupExperimenterMap(self, _r): ...
    def removeAllGroupExperimenterMapSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllGroupExperimenterMapSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllGroupExperimenterMapSet(self, _r): ...
    def clearGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def begin_clearGroupExperimenterMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearGroupExperimenterMap(self, _r): ...
    def reloadGroupExperimenterMap(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadGroupExperimenterMap(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadGroupExperimenterMap(self, _r): ...
    def getGroupExperimenterMap(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getGroupExperimenterMap(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGroupExperimenterMap(self, _r): ...
    def setGroupExperimenterMap(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setGroupExperimenterMap(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGroupExperimenterMap(self, _r): ...
    def getPrimaryGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryGroupExperimenterMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryGroupExperimenterMap(self, _r): ...
    def setPrimaryGroupExperimenterMap(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryGroupExperimenterMap(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryGroupExperimenterMap(self, _r): ...
    def linkExperimenterGroup(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkExperimenterGroup(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkExperimenterGroup(self, _r): ...
    def addGroupExperimenterMapToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addGroupExperimenterMapToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addGroupExperimenterMapToBoth(self, _r): ...
    def findGroupExperimenterMap(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findGroupExperimenterMap(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findGroupExperimenterMap(self, _r): ...
    def unlinkExperimenterGroup(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkExperimenterGroup(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkExperimenterGroup(self, _r): ...
    def removeGroupExperimenterMapFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeGroupExperimenterMapFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeGroupExperimenterMapFromBoth(self, _r): ...
    def linkedExperimenterGroupList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedExperimenterGroupList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedExperimenterGroupList(self, _r): ...
    def getOmeName(self, _ctx: Incomplete | None = ...): ...
    def begin_getOmeName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getOmeName(self, _r): ...
    def setOmeName(self, theOmeName, _ctx: Incomplete | None = ...): ...
    def begin_setOmeName(self, theOmeName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setOmeName(self, _r): ...
    def getFirstName(self, _ctx: Incomplete | None = ...): ...
    def begin_getFirstName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFirstName(self, _r): ...
    def setFirstName(self, theFirstName, _ctx: Incomplete | None = ...): ...
    def begin_setFirstName(self, theFirstName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFirstName(self, _r): ...
    def getMiddleName(self, _ctx: Incomplete | None = ...): ...
    def begin_getMiddleName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMiddleName(self, _r): ...
    def setMiddleName(self, theMiddleName, _ctx: Incomplete | None = ...): ...
    def begin_setMiddleName(self, theMiddleName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMiddleName(self, _r): ...
    def getLastName(self, _ctx: Incomplete | None = ...): ...
    def begin_getLastName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLastName(self, _r): ...
    def setLastName(self, theLastName, _ctx: Incomplete | None = ...): ...
    def begin_setLastName(self, theLastName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLastName(self, _r): ...
    def getInstitution(self, _ctx: Incomplete | None = ...): ...
    def begin_getInstitution(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInstitution(self, _r): ...
    def setInstitution(self, theInstitution, _ctx: Incomplete | None = ...): ...
    def begin_setInstitution(self, theInstitution, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInstitution(self, _r): ...
    def getLdap(self, _ctx: Incomplete | None = ...): ...
    def begin_getLdap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLdap(self, _r): ...
    def setLdap(self, theLdap, _ctx: Incomplete | None = ...): ...
    def begin_setLdap(self, theLdap, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLdap(self, _r): ...
    def getEmail(self, _ctx: Incomplete | None = ...): ...
    def begin_getEmail(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEmail(self, _r): ...
    def setEmail(self, theEmail, _ctx: Incomplete | None = ...): ...
    def begin_setEmail(self, theEmail, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setEmail(self, _r): ...
    def getConfigAsMap(self, _ctx: Incomplete | None = ...): ...
    def begin_getConfigAsMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getConfigAsMap(self, _r): ...
    def getConfig(self, _ctx: Incomplete | None = ...): ...
    def begin_getConfig(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getConfig(self, _r): ...
    def setConfig(self, theConfig, _ctx: Incomplete | None = ...): ...
    def begin_setConfig(self, theConfig, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setConfig(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addExperimenterAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addExperimenterAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addExperimenterAnnotationLink(self, _r): ...
    def addAllExperimenterAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllExperimenterAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllExperimenterAnnotationLinkSet(self, _r): ...
    def removeExperimenterAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeExperimenterAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeExperimenterAnnotationLink(self, _r): ...
    def removeAllExperimenterAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllExperimenterAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllExperimenterAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addExperimenterAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addExperimenterAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addExperimenterAnnotationLinkToBoth(self, _r): ...
    def findExperimenterAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findExperimenterAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findExperimenterAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeExperimenterAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeExperimenterAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeExperimenterAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ExperimenterI(Experimenter):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        groupExperimenterMap: Incomplete
        omeName: Incomplete
        firstName: Incomplete
        middleName: Incomplete
        lastName: Incomplete
        institution: Incomplete
        ldap: Incomplete
        email: Incomplete
        config: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, groupExperimenterMap, omeName, firstName, middleName, lastName, institution, ldap, email, config, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    GROUPEXPERIMENTERMAP: ClassVar[str] = ...
    OMENAME: ClassVar[str] = ...
    FIRSTNAME: ClassVar[str] = ...
    MIDDLENAME: ClassVar[str] = ...
    LASTNAME: ClassVar[str] = ...
    INSTITUTION: ClassVar[str] = ...
    LDAP: ClassVar[str] = ...
    EMAIL: ClassVar[str] = ...
    CONFIG: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def isGroupExperimenterMapLoaded(self): ...
    def sizeOfGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def copyGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def iterateGroupExperimenterMap(self): ...
    def addGroupExperimenterMap(self, target, current: Incomplete | None = ...): ...
    def addAllGroupExperimenterMapSet(self, targets, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMap(self, target, current: Incomplete | None = ...): ...
    def removeAllGroupExperimenterMapSet(self, targets, current: Incomplete | None = ...): ...
    def clearGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def reloadGroupExperimenterMap(self, toCopy, current: Incomplete | None = ...): ...
    def getGroupExperimenterMap(self, index, current: Incomplete | None = ...): ...
    def setGroupExperimenterMap(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def setPrimaryGroupExperimenterMap(self, element, current: Incomplete | None = ...): ...
    def linkExperimenterGroup(self, addition, current: Incomplete | None = ...): ...
    def addGroupExperimenterMapToBoth(self, link, bothSides): ...
    def findGroupExperimenterMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkExperimenterGroup(self, removal, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMapFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedExperimenterGroupList(self, current: Incomplete | None = ...): ...
    def unloadOmeName(self): ...
    def getOmeName(self, current: Incomplete | None = ...): ...
    def setOmeName(self, _omeName, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFirstName(self): ...
    def getFirstName(self, current: Incomplete | None = ...): ...
    def setFirstName(self, _firstName, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMiddleName(self): ...
    def getMiddleName(self, current: Incomplete | None = ...): ...
    def setMiddleName(self, _middleName, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLastName(self): ...
    def getLastName(self, current: Incomplete | None = ...): ...
    def setLastName(self, _lastName, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstitution(self): ...
    def getInstitution(self, current: Incomplete | None = ...): ...
    def setInstitution(self, _institution, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLdap(self): ...
    def getLdap(self, current: Incomplete | None = ...): ...
    def setLdap(self, _ldap, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEmail(self): ...
    def getEmail(self, current: Incomplete | None = ...): ...
    def setEmail(self, _email, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadConfig(self): ...
    def getConfig(self, current: Incomplete | None = ...): ...
    def setConfig(self, _config, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getConfigAsMap(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addExperimenterAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllExperimenterAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeExperimenterAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllExperimenterAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addExperimenterAnnotationLinkToBoth(self, link, bothSides): ...
    def findExperimenterAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeExperimenterAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ExperimenterAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ExperimenterAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ExperimenterAnnotationLinkI(ExperimenterAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ExperimenterGroup(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getLdap: ClassVar[IcePy.Operation] = ...
    _op_setLdap: ClassVar[IcePy.Operation] = ...
    _op_unloadGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_sizeOfGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_copyGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_addGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_addAllGroupExperimenterMapSet: ClassVar[IcePy.Operation] = ...
    _op_removeGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_removeAllGroupExperimenterMapSet: ClassVar[IcePy.Operation] = ...
    _op_clearGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_reloadGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_linkExperimenter: ClassVar[IcePy.Operation] = ...
    _op_addGroupExperimenterMapToBoth: ClassVar[IcePy.Operation] = ...
    _op_findGroupExperimenterMap: ClassVar[IcePy.Operation] = ...
    _op_unlinkExperimenter: ClassVar[IcePy.Operation] = ...
    _op_removeGroupExperimenterMapFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedExperimenterList: ClassVar[IcePy.Operation] = ...
    _op_getConfigAsMap: ClassVar[IcePy.Operation] = ...
    _op_getConfig: ClassVar[IcePy.Operation] = ...
    _op_setConfig: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addExperimenterGroupAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllExperimenterGroupAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeExperimenterGroupAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllExperimenterGroupAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addExperimenterGroupAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findExperimenterGroupAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeExperimenterGroupAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _name: Incomplete | None = ..., _ldap: Incomplete | None = ..., _groupExperimenterMapSeq: Incomplete | None = ..., _groupExperimenterMapLoaded: bool = ..., _config: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getLdap(self, current: Incomplete | None = ...): ...
    def setLdap(self, theLdap, current: Incomplete | None = ...): ...
    def unloadGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def sizeOfGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def copyGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def addGroupExperimenterMap(self, target, current: Incomplete | None = ...): ...
    def addAllGroupExperimenterMapSet(self, targets, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMap(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllGroupExperimenterMapSet(self, targets, current: Incomplete | None = ...): ...
    def clearGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def reloadGroupExperimenterMap(self, toCopy, current: Incomplete | None = ...): ...
    def linkExperimenter(self, addition, current: Incomplete | None = ...): ...
    def addGroupExperimenterMapToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findGroupExperimenterMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkExperimenter(self, removal, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMapFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedExperimenterList(self, current: Incomplete | None = ...): ...
    def getConfigAsMap(self, current: Incomplete | None = ...): ...
    def getConfig(self, current: Incomplete | None = ...): ...
    def setConfig(self, theConfig, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addExperimenterGroupAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllExperimenterGroupAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeExperimenterGroupAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllExperimenterGroupAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addExperimenterGroupAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findExperimenterGroupAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeExperimenterGroupAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class ExperimenterGroupPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getLdap(self, _ctx: Incomplete | None = ...): ...
    def begin_getLdap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLdap(self, _r): ...
    def setLdap(self, theLdap, _ctx: Incomplete | None = ...): ...
    def begin_setLdap(self, theLdap, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLdap(self, _r): ...
    def unloadGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadGroupExperimenterMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadGroupExperimenterMap(self, _r): ...
    def sizeOfGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfGroupExperimenterMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfGroupExperimenterMap(self, _r): ...
    def copyGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def begin_copyGroupExperimenterMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyGroupExperimenterMap(self, _r): ...
    def addGroupExperimenterMap(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addGroupExperimenterMap(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addGroupExperimenterMap(self, _r): ...
    def addAllGroupExperimenterMapSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllGroupExperimenterMapSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllGroupExperimenterMapSet(self, _r): ...
    def removeGroupExperimenterMap(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeGroupExperimenterMap(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeGroupExperimenterMap(self, _r): ...
    def removeAllGroupExperimenterMapSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllGroupExperimenterMapSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllGroupExperimenterMapSet(self, _r): ...
    def clearGroupExperimenterMap(self, _ctx: Incomplete | None = ...): ...
    def begin_clearGroupExperimenterMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearGroupExperimenterMap(self, _r): ...
    def reloadGroupExperimenterMap(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadGroupExperimenterMap(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadGroupExperimenterMap(self, _r): ...
    def linkExperimenter(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkExperimenter(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkExperimenter(self, _r): ...
    def addGroupExperimenterMapToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addGroupExperimenterMapToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addGroupExperimenterMapToBoth(self, _r): ...
    def findGroupExperimenterMap(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findGroupExperimenterMap(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findGroupExperimenterMap(self, _r): ...
    def unlinkExperimenter(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkExperimenter(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkExperimenter(self, _r): ...
    def removeGroupExperimenterMapFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeGroupExperimenterMapFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeGroupExperimenterMapFromBoth(self, _r): ...
    def linkedExperimenterList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedExperimenterList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedExperimenterList(self, _r): ...
    def getConfigAsMap(self, _ctx: Incomplete | None = ...): ...
    def begin_getConfigAsMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getConfigAsMap(self, _r): ...
    def getConfig(self, _ctx: Incomplete | None = ...): ...
    def begin_getConfig(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getConfig(self, _r): ...
    def setConfig(self, theConfig, _ctx: Incomplete | None = ...): ...
    def begin_setConfig(self, theConfig, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setConfig(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addExperimenterGroupAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addExperimenterGroupAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addExperimenterGroupAnnotationLink(self, _r): ...
    def addAllExperimenterGroupAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllExperimenterGroupAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllExperimenterGroupAnnotationLinkSet(self, _r): ...
    def removeExperimenterGroupAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeExperimenterGroupAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeExperimenterGroupAnnotationLink(self, _r): ...
    def removeAllExperimenterGroupAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllExperimenterGroupAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllExperimenterGroupAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addExperimenterGroupAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addExperimenterGroupAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addExperimenterGroupAnnotationLinkToBoth(self, _r): ...
    def findExperimenterGroupAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findExperimenterGroupAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findExperimenterGroupAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeExperimenterGroupAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeExperimenterGroupAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeExperimenterGroupAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ExperimenterGroupI(ExperimenterGroup):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        name: Incomplete
        ldap: Incomplete
        groupExperimenterMap: Incomplete
        config: Incomplete
        annotationLinks: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, name, ldap, groupExperimenterMap, config, annotationLinks, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    NAME: ClassVar[str] = ...
    LDAP: ClassVar[str] = ...
    GROUPEXPERIMENTERMAP: ClassVar[str] = ...
    CONFIG: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLdap(self): ...
    def getLdap(self, current: Incomplete | None = ...): ...
    def setLdap(self, _ldap, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def isGroupExperimenterMapLoaded(self): ...
    def sizeOfGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def copyGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def iterateGroupExperimenterMap(self): ...
    def addGroupExperimenterMap(self, target, current: Incomplete | None = ...): ...
    def addAllGroupExperimenterMapSet(self, targets, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMap(self, target, current: Incomplete | None = ...): ...
    def removeAllGroupExperimenterMapSet(self, targets, current: Incomplete | None = ...): ...
    def clearGroupExperimenterMap(self, current: Incomplete | None = ...): ...
    def reloadGroupExperimenterMap(self, toCopy, current: Incomplete | None = ...): ...
    def linkExperimenter(self, addition, current: Incomplete | None = ...): ...
    def addGroupExperimenterMapToBoth(self, link, bothSides): ...
    def findGroupExperimenterMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkExperimenter(self, removal, current: Incomplete | None = ...): ...
    def removeGroupExperimenterMapFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedExperimenterList(self, current: Incomplete | None = ...): ...
    def unloadConfig(self): ...
    def getConfig(self, current: Incomplete | None = ...): ...
    def setConfig(self, _config, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getConfigAsMap(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addExperimenterGroupAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllExperimenterGroupAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeExperimenterGroupAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllExperimenterGroupAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addExperimenterGroupAnnotationLinkToBoth(self, link, bothSides): ...
    def findExperimenterGroupAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeExperimenterGroupAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ExperimenterGroupAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ExperimenterGroupAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ExperimenterGroupAnnotationLinkI(ExperimenterGroupAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ExternalInfo(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getEntityId: ClassVar[IcePy.Operation] = ...
    _op_setEntityId: ClassVar[IcePy.Operation] = ...
    _op_getEntityType: ClassVar[IcePy.Operation] = ...
    _op_setEntityType: ClassVar[IcePy.Operation] = ...
    _op_getLsid: ClassVar[IcePy.Operation] = ...
    _op_setLsid: ClassVar[IcePy.Operation] = ...
    _op_getUuid: ClassVar[IcePy.Operation] = ...
    _op_setUuid: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _entityId: Incomplete | None = ..., _entityType: Incomplete | None = ..., _lsid: Incomplete | None = ..., _uuid: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getEntityId(self, current: Incomplete | None = ...): ...
    def setEntityId(self, theEntityId, current: Incomplete | None = ...): ...
    def getEntityType(self, current: Incomplete | None = ...): ...
    def setEntityType(self, theEntityType, current: Incomplete | None = ...): ...
    def getLsid(self, current: Incomplete | None = ...): ...
    def setLsid(self, theLsid, current: Incomplete | None = ...): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, theUuid, current: Incomplete | None = ...): ...

class ExternalInfoPrx(IObjectPrx):
    def getEntityId(self, _ctx: Incomplete | None = ...): ...
    def begin_getEntityId(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEntityId(self, _r): ...
    def setEntityId(self, theEntityId, _ctx: Incomplete | None = ...): ...
    def begin_setEntityId(self, theEntityId, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setEntityId(self, _r): ...
    def getEntityType(self, _ctx: Incomplete | None = ...): ...
    def begin_getEntityType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEntityType(self, _r): ...
    def setEntityType(self, theEntityType, _ctx: Incomplete | None = ...): ...
    def begin_setEntityType(self, theEntityType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setEntityType(self, _r): ...
    def getLsid(self, _ctx: Incomplete | None = ...): ...
    def begin_getLsid(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLsid(self, _r): ...
    def setLsid(self, theLsid, _ctx: Incomplete | None = ...): ...
    def begin_setLsid(self, theLsid, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLsid(self, _r): ...
    def getUuid(self, _ctx: Incomplete | None = ...): ...
    def begin_getUuid(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUuid(self, _r): ...
    def setUuid(self, theUuid, _ctx: Incomplete | None = ...): ...
    def begin_setUuid(self, theUuid, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUuid(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ExternalInfoI(ExternalInfo):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        entityId: Incomplete
        entityType: Incomplete
        lsid: Incomplete
        uuid: Incomplete
        details: Incomplete
        def __init__(self, _cls, entityId, entityType, lsid, uuid, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    ENTITYID: ClassVar[str] = ...
    ENTITYTYPE: ClassVar[str] = ...
    LSID: ClassVar[str] = ...
    UUID: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadEntityId(self): ...
    def getEntityId(self, current: Incomplete | None = ...): ...
    def setEntityId(self, _entityId, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEntityType(self): ...
    def getEntityType(self, current: Incomplete | None = ...): ...
    def setEntityType(self, _entityType, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLsid(self): ...
    def getLsid(self, current: Incomplete | None = ...): ...
    def setLsid(self, _lsid, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUuid(self): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, _uuid, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Family(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class FamilyPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FamilyI(Family):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Filament(LightSource):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _power: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _instrument: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _type: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...

class FilamentPrx(LightSourcePrx):
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilamentI(Filament):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        type: Incomplete
        manufacturer: Incomplete
        model: Incomplete
        power: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        instrument: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, type, manufacturer, model, power, lotNumber, serialNumber, instrument, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TYPE: ClassVar[str] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    POWER: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPower(self): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, _power, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightSourceAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FilamentType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class FilamentTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilamentTypeI(FilamentType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class TypeAnnotation(Annotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class TypeAnnotationPrx(AnnotationPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FileAnnotation(TypeAnnotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getFile: ClassVar[IcePy.Operation] = ...
    _op_setFile: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _file: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getFile(self, current: Incomplete | None = ...): ...
    def setFile(self, theFile, current: Incomplete | None = ...): ...

class FileAnnotationPrx(TypeAnnotationPrx):
    def getFile(self, _ctx: Incomplete | None = ...): ...
    def begin_getFile(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFile(self, _r): ...
    def setFile(self, theFile, _ctx: Incomplete | None = ...): ...
    def begin_setFile(self, theFile, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFile(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FileAnnotationI(FileAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        file: Incomplete
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, file, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    FILE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadFile(self): ...
    def getFile(self, current: Incomplete | None = ...): ...
    def setFile(self, _file, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Fileset(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_unloadUsedFiles: ClassVar[IcePy.Operation] = ...
    _op_sizeOfUsedFiles: ClassVar[IcePy.Operation] = ...
    _op_copyUsedFiles: ClassVar[IcePy.Operation] = ...
    _op_addFilesetEntry: ClassVar[IcePy.Operation] = ...
    _op_addAllFilesetEntrySet: ClassVar[IcePy.Operation] = ...
    _op_removeFilesetEntry: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilesetEntrySet: ClassVar[IcePy.Operation] = ...
    _op_clearUsedFiles: ClassVar[IcePy.Operation] = ...
    _op_reloadUsedFiles: ClassVar[IcePy.Operation] = ...
    _op_getFilesetEntry: ClassVar[IcePy.Operation] = ...
    _op_setFilesetEntry: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryFilesetEntry: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryFilesetEntry: ClassVar[IcePy.Operation] = ...
    _op_unloadImages: ClassVar[IcePy.Operation] = ...
    _op_sizeOfImages: ClassVar[IcePy.Operation] = ...
    _op_copyImages: ClassVar[IcePy.Operation] = ...
    _op_addImage: ClassVar[IcePy.Operation] = ...
    _op_addAllImageSet: ClassVar[IcePy.Operation] = ...
    _op_removeImage: ClassVar[IcePy.Operation] = ...
    _op_removeAllImageSet: ClassVar[IcePy.Operation] = ...
    _op_clearImages: ClassVar[IcePy.Operation] = ...
    _op_reloadImages: ClassVar[IcePy.Operation] = ...
    _op_unloadJobLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfJobLinks: ClassVar[IcePy.Operation] = ...
    _op_copyJobLinks: ClassVar[IcePy.Operation] = ...
    _op_addFilesetJobLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFilesetJobLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFilesetJobLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilesetJobLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearJobLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadJobLinks: ClassVar[IcePy.Operation] = ...
    _op_getFilesetJobLink: ClassVar[IcePy.Operation] = ...
    _op_setFilesetJobLink: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryFilesetJobLink: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryFilesetJobLink: ClassVar[IcePy.Operation] = ...
    _op_getJobLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkJob: ClassVar[IcePy.Operation] = ...
    _op_addFilesetJobLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFilesetJobLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkJob: ClassVar[IcePy.Operation] = ...
    _op_removeFilesetJobLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedJobList: ClassVar[IcePy.Operation] = ...
    _op_getTemplatePrefix: ClassVar[IcePy.Operation] = ...
    _op_setTemplatePrefix: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addFilesetAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFilesetAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFilesetAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilesetAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addFilesetAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFilesetAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeFilesetAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _usedFilesSeq: Incomplete | None = ..., _usedFilesLoaded: bool = ..., _imagesSeq: Incomplete | None = ..., _imagesLoaded: bool = ..., _jobLinksSeq: Incomplete | None = ..., _jobLinksLoaded: bool = ..., _jobLinksCountPerOwner: Incomplete | None = ..., _templatePrefix: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def unloadUsedFiles(self, current: Incomplete | None = ...): ...
    def sizeOfUsedFiles(self, current: Incomplete | None = ...): ...
    def copyUsedFiles(self, current: Incomplete | None = ...): ...
    def addFilesetEntry(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetEntry(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def clearUsedFiles(self, current: Incomplete | None = ...): ...
    def reloadUsedFiles(self, toCopy, current: Incomplete | None = ...): ...
    def getFilesetEntry(self, index, current: Incomplete | None = ...): ...
    def setFilesetEntry(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryFilesetEntry(self, current: Incomplete | None = ...): ...
    def setPrimaryFilesetEntry(self, theElement, current: Incomplete | None = ...): ...
    def unloadImages(self, current: Incomplete | None = ...): ...
    def sizeOfImages(self, current: Incomplete | None = ...): ...
    def copyImages(self, current: Incomplete | None = ...): ...
    def addImage(self, target, current: Incomplete | None = ...): ...
    def addAllImageSet(self, targets, current: Incomplete | None = ...): ...
    def removeImage(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllImageSet(self, targets, current: Incomplete | None = ...): ...
    def clearImages(self, current: Incomplete | None = ...): ...
    def reloadImages(self, toCopy, current: Incomplete | None = ...): ...
    def unloadJobLinks(self, current: Incomplete | None = ...): ...
    def sizeOfJobLinks(self, current: Incomplete | None = ...): ...
    def copyJobLinks(self, current: Incomplete | None = ...): ...
    def addFilesetJobLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetJobLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetJobLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilesetJobLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearJobLinks(self, current: Incomplete | None = ...): ...
    def reloadJobLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFilesetJobLink(self, index, current: Incomplete | None = ...): ...
    def setFilesetJobLink(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryFilesetJobLink(self, current: Incomplete | None = ...): ...
    def setPrimaryFilesetJobLink(self, theElement, current: Incomplete | None = ...): ...
    def getJobLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkJob(self, addition, current: Incomplete | None = ...): ...
    def addFilesetJobLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFilesetJobLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkJob(self, removal, current: Incomplete | None = ...): ...
    def removeFilesetJobLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedJobList(self, current: Incomplete | None = ...): ...
    def getTemplatePrefix(self, current: Incomplete | None = ...): ...
    def setTemplatePrefix(self, theTemplatePrefix, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addFilesetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilesetAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addFilesetAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFilesetAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFilesetAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class FilesetPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def unloadUsedFiles(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadUsedFiles(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadUsedFiles(self, _r): ...
    def sizeOfUsedFiles(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfUsedFiles(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfUsedFiles(self, _r): ...
    def copyUsedFiles(self, _ctx: Incomplete | None = ...): ...
    def begin_copyUsedFiles(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyUsedFiles(self, _r): ...
    def addFilesetEntry(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilesetEntry(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilesetEntry(self, _r): ...
    def addAllFilesetEntrySet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilesetEntrySet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilesetEntrySet(self, _r): ...
    def removeFilesetEntry(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilesetEntry(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilesetEntry(self, _r): ...
    def removeAllFilesetEntrySet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilesetEntrySet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilesetEntrySet(self, _r): ...
    def clearUsedFiles(self, _ctx: Incomplete | None = ...): ...
    def begin_clearUsedFiles(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearUsedFiles(self, _r): ...
    def reloadUsedFiles(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadUsedFiles(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadUsedFiles(self, _r): ...
    def getFilesetEntry(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getFilesetEntry(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFilesetEntry(self, _r): ...
    def setFilesetEntry(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setFilesetEntry(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFilesetEntry(self, _r): ...
    def getPrimaryFilesetEntry(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryFilesetEntry(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryFilesetEntry(self, _r): ...
    def setPrimaryFilesetEntry(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryFilesetEntry(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryFilesetEntry(self, _r): ...
    def unloadImages(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadImages(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadImages(self, _r): ...
    def sizeOfImages(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfImages(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfImages(self, _r): ...
    def copyImages(self, _ctx: Incomplete | None = ...): ...
    def begin_copyImages(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyImages(self, _r): ...
    def addImage(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addImage(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addImage(self, _r): ...
    def addAllImageSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllImageSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllImageSet(self, _r): ...
    def removeImage(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeImage(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeImage(self, _r): ...
    def removeAllImageSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllImageSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllImageSet(self, _r): ...
    def clearImages(self, _ctx: Incomplete | None = ...): ...
    def begin_clearImages(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearImages(self, _r): ...
    def reloadImages(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadImages(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadImages(self, _r): ...
    def unloadJobLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadJobLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadJobLinks(self, _r): ...
    def sizeOfJobLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfJobLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfJobLinks(self, _r): ...
    def copyJobLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyJobLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyJobLinks(self, _r): ...
    def addFilesetJobLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilesetJobLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilesetJobLink(self, _r): ...
    def addAllFilesetJobLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilesetJobLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilesetJobLinkSet(self, _r): ...
    def removeFilesetJobLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilesetJobLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilesetJobLink(self, _r): ...
    def removeAllFilesetJobLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilesetJobLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilesetJobLinkSet(self, _r): ...
    def clearJobLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearJobLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearJobLinks(self, _r): ...
    def reloadJobLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadJobLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadJobLinks(self, _r): ...
    def getFilesetJobLink(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getFilesetJobLink(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFilesetJobLink(self, _r): ...
    def setFilesetJobLink(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setFilesetJobLink(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFilesetJobLink(self, _r): ...
    def getPrimaryFilesetJobLink(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryFilesetJobLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryFilesetJobLink(self, _r): ...
    def setPrimaryFilesetJobLink(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryFilesetJobLink(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryFilesetJobLink(self, _r): ...
    def getJobLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getJobLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getJobLinksCountPerOwner(self, _r): ...
    def linkJob(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkJob(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkJob(self, _r): ...
    def addFilesetJobLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFilesetJobLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilesetJobLinkToBoth(self, _r): ...
    def findFilesetJobLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFilesetJobLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFilesetJobLink(self, _r): ...
    def unlinkJob(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkJob(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkJob(self, _r): ...
    def removeFilesetJobLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFilesetJobLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilesetJobLinkFromBoth(self, _r): ...
    def linkedJobList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedJobList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedJobList(self, _r): ...
    def getTemplatePrefix(self, _ctx: Incomplete | None = ...): ...
    def begin_getTemplatePrefix(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTemplatePrefix(self, _r): ...
    def setTemplatePrefix(self, theTemplatePrefix, _ctx: Incomplete | None = ...): ...
    def begin_setTemplatePrefix(self, theTemplatePrefix, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTemplatePrefix(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addFilesetAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilesetAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilesetAnnotationLink(self, _r): ...
    def addAllFilesetAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilesetAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilesetAnnotationLinkSet(self, _r): ...
    def removeFilesetAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilesetAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilesetAnnotationLink(self, _r): ...
    def removeAllFilesetAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilesetAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilesetAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addFilesetAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFilesetAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilesetAnnotationLinkToBoth(self, _r): ...
    def findFilesetAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFilesetAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFilesetAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeFilesetAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFilesetAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilesetAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilesetI(Fileset):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        usedFiles: Incomplete
        images: Incomplete
        jobLinks: Incomplete
        templatePrefix: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, usedFiles, images, jobLinks, templatePrefix, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    USEDFILES: ClassVar[str] = ...
    IMAGES: ClassVar[str] = ...
    JOBLINKS: ClassVar[str] = ...
    TEMPLATEPREFIX: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadUsedFiles(self, current: Incomplete | None = ...): ...
    def isUsedFilesLoaded(self): ...
    def sizeOfUsedFiles(self, current: Incomplete | None = ...): ...
    def copyUsedFiles(self, current: Incomplete | None = ...): ...
    def iterateUsedFiles(self): ...
    def addFilesetEntry(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetEntry(self, target, current: Incomplete | None = ...): ...
    def removeAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def clearUsedFiles(self, current: Incomplete | None = ...): ...
    def reloadUsedFiles(self, toCopy, current: Incomplete | None = ...): ...
    def getFilesetEntry(self, index, current: Incomplete | None = ...): ...
    def setFilesetEntry(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryFilesetEntry(self, current: Incomplete | None = ...): ...
    def setPrimaryFilesetEntry(self, element, current: Incomplete | None = ...): ...
    def unloadImages(self, current: Incomplete | None = ...): ...
    def isImagesLoaded(self): ...
    def sizeOfImages(self, current: Incomplete | None = ...): ...
    def copyImages(self, current: Incomplete | None = ...): ...
    def iterateImages(self): ...
    def addImage(self, target, current: Incomplete | None = ...): ...
    def addAllImageSet(self, targets, current: Incomplete | None = ...): ...
    def removeImage(self, target, current: Incomplete | None = ...): ...
    def removeAllImageSet(self, targets, current: Incomplete | None = ...): ...
    def clearImages(self, current: Incomplete | None = ...): ...
    def reloadImages(self, toCopy, current: Incomplete | None = ...): ...
    def unloadJobLinks(self, current: Incomplete | None = ...): ...
    def isJobLinksLoaded(self): ...
    def sizeOfJobLinks(self, current: Incomplete | None = ...): ...
    def copyJobLinks(self, current: Incomplete | None = ...): ...
    def iterateJobLinks(self): ...
    def addFilesetJobLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetJobLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetJobLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFilesetJobLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearJobLinks(self, current: Incomplete | None = ...): ...
    def reloadJobLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFilesetJobLink(self, index, current: Incomplete | None = ...): ...
    def setFilesetJobLink(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryFilesetJobLink(self, current: Incomplete | None = ...): ...
    def setPrimaryFilesetJobLink(self, element, current: Incomplete | None = ...): ...
    def getJobLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkJob(self, addition, current: Incomplete | None = ...): ...
    def addFilesetJobLinkToBoth(self, link, bothSides): ...
    def findFilesetJobLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkJob(self, removal, current: Incomplete | None = ...): ...
    def removeFilesetJobLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedJobList(self, current: Incomplete | None = ...): ...
    def unloadTemplatePrefix(self): ...
    def getTemplatePrefix(self, current: Incomplete | None = ...): ...
    def setTemplatePrefix(self, _templatePrefix, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addFilesetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFilesetAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addFilesetAnnotationLinkToBoth(self, link, bothSides): ...
    def findFilesetAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFilesetAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FilesetAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class FilesetAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilesetAnnotationLinkI(FilesetAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FilesetEntry(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getFileset: ClassVar[IcePy.Operation] = ...
    _op_setFileset: ClassVar[IcePy.Operation] = ...
    _op_getOriginalFile: ClassVar[IcePy.Operation] = ...
    _op_setOriginalFile: ClassVar[IcePy.Operation] = ...
    _op_getClientPath: ClassVar[IcePy.Operation] = ...
    _op_setClientPath: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _fileset: Incomplete | None = ..., _originalFile: Incomplete | None = ..., _clientPath: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getFileset(self, current: Incomplete | None = ...): ...
    def setFileset(self, theFileset, current: Incomplete | None = ...): ...
    def getOriginalFile(self, current: Incomplete | None = ...): ...
    def setOriginalFile(self, theOriginalFile, current: Incomplete | None = ...): ...
    def getClientPath(self, current: Incomplete | None = ...): ...
    def setClientPath(self, theClientPath, current: Incomplete | None = ...): ...

class FilesetEntryPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getFileset(self, _ctx: Incomplete | None = ...): ...
    def begin_getFileset(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFileset(self, _r): ...
    def setFileset(self, theFileset, _ctx: Incomplete | None = ...): ...
    def begin_setFileset(self, theFileset, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFileset(self, _r): ...
    def getOriginalFile(self, _ctx: Incomplete | None = ...): ...
    def begin_getOriginalFile(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getOriginalFile(self, _r): ...
    def setOriginalFile(self, theOriginalFile, _ctx: Incomplete | None = ...): ...
    def begin_setOriginalFile(self, theOriginalFile, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setOriginalFile(self, _r): ...
    def getClientPath(self, _ctx: Incomplete | None = ...): ...
    def begin_getClientPath(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getClientPath(self, _r): ...
    def setClientPath(self, theClientPath, _ctx: Incomplete | None = ...): ...
    def begin_setClientPath(self, theClientPath, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setClientPath(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilesetEntryI(FilesetEntry):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        fileset: Incomplete
        originalFile: Incomplete
        clientPath: Incomplete
        details: Incomplete
        def __init__(self, _cls, fileset, originalFile, clientPath, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    FILESET: ClassVar[str] = ...
    ORIGINALFILE: ClassVar[str] = ...
    CLIENTPATH: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadFileset(self): ...
    def getFileset(self, current: Incomplete | None = ...): ...
    def setFileset(self, _fileset, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOriginalFile(self): ...
    def getOriginalFile(self, current: Incomplete | None = ...): ...
    def setOriginalFile(self, _originalFile, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadClientPath(self): ...
    def getClientPath(self, current: Incomplete | None = ...): ...
    def setClientPath(self, _clientPath, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FilesetJobLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class FilesetJobLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilesetJobLinkI(FilesetJobLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Filter(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getManufacturer: ClassVar[IcePy.Operation] = ...
    _op_setManufacturer: ClassVar[IcePy.Operation] = ...
    _op_getModel: ClassVar[IcePy.Operation] = ...
    _op_setModel: ClassVar[IcePy.Operation] = ...
    _op_getLotNumber: ClassVar[IcePy.Operation] = ...
    _op_setLotNumber: ClassVar[IcePy.Operation] = ...
    _op_getSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_setSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_getFilterWheel: ClassVar[IcePy.Operation] = ...
    _op_setFilterWheel: ClassVar[IcePy.Operation] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    _op_getTransmittanceRange: ClassVar[IcePy.Operation] = ...
    _op_setTransmittanceRange: ClassVar[IcePy.Operation] = ...
    _op_getInstrument: ClassVar[IcePy.Operation] = ...
    _op_setInstrument: ClassVar[IcePy.Operation] = ...
    _op_unloadExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_sizeOfExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_copyExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addFilterSetExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFilterSetExcitationFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFilterSetExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilterSetExcitationFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_reloadExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_getExcitationFilterLinkCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkExcitationFilter: ClassVar[IcePy.Operation] = ...
    _op_addFilterSetExcitationFilterLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFilterSetExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkExcitationFilter: ClassVar[IcePy.Operation] = ...
    _op_removeFilterSetExcitationFilterLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedExcitationFilterList: ClassVar[IcePy.Operation] = ...
    _op_unloadEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_sizeOfEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_copyEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addFilterSetEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFilterSetEmissionFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFilterSetEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilterSetEmissionFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_reloadEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_getEmissionFilterLinkCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkEmissionFilter: ClassVar[IcePy.Operation] = ...
    _op_addFilterSetEmissionFilterLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFilterSetEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkEmissionFilter: ClassVar[IcePy.Operation] = ...
    _op_removeFilterSetEmissionFilterLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedEmissionFilterList: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addFilterAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFilterAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFilterAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilterAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addFilterAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFilterAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeFilterAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _filterWheel: Incomplete | None = ..., _type: Incomplete | None = ..., _transmittanceRange: Incomplete | None = ..., _instrument: Incomplete | None = ..., _excitationFilterLinkSeq: Incomplete | None = ..., _excitationFilterLinkLoaded: bool = ..., _excitationFilterLinkCountPerOwner: Incomplete | None = ..., _emissionFilterLinkSeq: Incomplete | None = ..., _emissionFilterLinkLoaded: bool = ..., _emissionFilterLinkCountPerOwner: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, theModel, current: Incomplete | None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getFilterWheel(self, current: Incomplete | None = ...): ...
    def setFilterWheel(self, theFilterWheel, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getTransmittanceRange(self, current: Incomplete | None = ...): ...
    def setTransmittanceRange(self, theTransmittanceRange, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilterSetExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFilterSetExcitationFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilterSetEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFilterSetEmissionFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addFilterAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilterAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addFilterAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFilterAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFilterAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class FilterPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def begin_getManufacturer(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getManufacturer(self, _r): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def begin_setManufacturer(self, theManufacturer, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setManufacturer(self, _r): ...
    def getModel(self, _ctx: Incomplete | None = ...): ...
    def begin_getModel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getModel(self, _r): ...
    def setModel(self, theModel, _ctx: Incomplete | None = ...): ...
    def begin_setModel(self, theModel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setModel(self, _r): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getLotNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLotNumber(self, _r): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def begin_setLotNumber(self, theLotNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLotNumber(self, _r): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getSerialNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSerialNumber(self, _r): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def begin_setSerialNumber(self, theSerialNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSerialNumber(self, _r): ...
    def getFilterWheel(self, _ctx: Incomplete | None = ...): ...
    def begin_getFilterWheel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFilterWheel(self, _r): ...
    def setFilterWheel(self, theFilterWheel, _ctx: Incomplete | None = ...): ...
    def begin_setFilterWheel(self, theFilterWheel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFilterWheel(self, _r): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    def getTransmittanceRange(self, _ctx: Incomplete | None = ...): ...
    def begin_getTransmittanceRange(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTransmittanceRange(self, _r): ...
    def setTransmittanceRange(self, theTransmittanceRange, _ctx: Incomplete | None = ...): ...
    def begin_setTransmittanceRange(self, theTransmittanceRange, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTransmittanceRange(self, _r): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def begin_getInstrument(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInstrument(self, _r): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def begin_setInstrument(self, theInstrument, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInstrument(self, _r): ...
    def unloadExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadExcitationFilterLink(self, _r): ...
    def sizeOfExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfExcitationFilterLink(self, _r): ...
    def copyExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_copyExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyExcitationFilterLink(self, _r): ...
    def addFilterSetExcitationFilterLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilterSetExcitationFilterLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterSetExcitationFilterLink(self, _r): ...
    def addAllFilterSetExcitationFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilterSetExcitationFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilterSetExcitationFilterLinkSet(self, _r): ...
    def removeFilterSetExcitationFilterLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterSetExcitationFilterLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterSetExcitationFilterLink(self, _r): ...
    def removeAllFilterSetExcitationFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilterSetExcitationFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilterSetExcitationFilterLinkSet(self, _r): ...
    def clearExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_clearExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearExcitationFilterLink(self, _r): ...
    def reloadExcitationFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadExcitationFilterLink(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadExcitationFilterLink(self, _r): ...
    def getExcitationFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getExcitationFilterLinkCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExcitationFilterLinkCountPerOwner(self, _r): ...
    def linkExcitationFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkExcitationFilter(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkExcitationFilter(self, _r): ...
    def addFilterSetExcitationFilterLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFilterSetExcitationFilterLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterSetExcitationFilterLinkToBoth(self, _r): ...
    def findFilterSetExcitationFilterLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFilterSetExcitationFilterLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFilterSetExcitationFilterLink(self, _r): ...
    def unlinkExcitationFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkExcitationFilter(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkExcitationFilter(self, _r): ...
    def removeFilterSetExcitationFilterLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterSetExcitationFilterLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterSetExcitationFilterLinkFromBoth(self, _r): ...
    def linkedExcitationFilterList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedExcitationFilterList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedExcitationFilterList(self, _r): ...
    def unloadEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadEmissionFilterLink(self, _r): ...
    def sizeOfEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfEmissionFilterLink(self, _r): ...
    def copyEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_copyEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyEmissionFilterLink(self, _r): ...
    def addFilterSetEmissionFilterLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilterSetEmissionFilterLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterSetEmissionFilterLink(self, _r): ...
    def addAllFilterSetEmissionFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilterSetEmissionFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilterSetEmissionFilterLinkSet(self, _r): ...
    def removeFilterSetEmissionFilterLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterSetEmissionFilterLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterSetEmissionFilterLink(self, _r): ...
    def removeAllFilterSetEmissionFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilterSetEmissionFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilterSetEmissionFilterLinkSet(self, _r): ...
    def clearEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_clearEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearEmissionFilterLink(self, _r): ...
    def reloadEmissionFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadEmissionFilterLink(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadEmissionFilterLink(self, _r): ...
    def getEmissionFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getEmissionFilterLinkCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEmissionFilterLinkCountPerOwner(self, _r): ...
    def linkEmissionFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkEmissionFilter(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkEmissionFilter(self, _r): ...
    def addFilterSetEmissionFilterLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFilterSetEmissionFilterLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterSetEmissionFilterLinkToBoth(self, _r): ...
    def findFilterSetEmissionFilterLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFilterSetEmissionFilterLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFilterSetEmissionFilterLink(self, _r): ...
    def unlinkEmissionFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkEmissionFilter(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkEmissionFilter(self, _r): ...
    def removeFilterSetEmissionFilterLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterSetEmissionFilterLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterSetEmissionFilterLinkFromBoth(self, _r): ...
    def linkedEmissionFilterList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedEmissionFilterList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedEmissionFilterList(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addFilterAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilterAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterAnnotationLink(self, _r): ...
    def addAllFilterAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilterAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilterAnnotationLinkSet(self, _r): ...
    def removeFilterAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterAnnotationLink(self, _r): ...
    def removeAllFilterAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilterAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilterAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addFilterAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFilterAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterAnnotationLinkToBoth(self, _r): ...
    def findFilterAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFilterAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFilterAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeFilterAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilterI(Filter):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        manufacturer: Incomplete
        model: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        filterWheel: Incomplete
        type: Incomplete
        transmittanceRange: Incomplete
        instrument: Incomplete
        excitationFilterLink: Incomplete
        emissionFilterLink: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, manufacturer, model, lotNumber, serialNumber, filterWheel, type, transmittanceRange, instrument, excitationFilterLink, emissionFilterLink, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    FILTERWHEEL: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    TRANSMITTANCERANGE: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    EXCITATIONFILTERLINK: ClassVar[str] = ...
    EMISSIONFILTERLINK: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFilterWheel(self): ...
    def getFilterWheel(self, current: Incomplete | None = ...): ...
    def setFilterWheel(self, _filterWheel, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransmittanceRange(self): ...
    def getTransmittanceRange(self, current: Incomplete | None = ...): ...
    def setTransmittanceRange(self, _transmittanceRange, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def isExcitationFilterLinkLoaded(self): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def iterateExcitationFilterLink(self): ...
    def addFilterSetExcitationFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFilterSetExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLinkToBoth(self, link, bothSides): ...
    def findFilterSetExcitationFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def isEmissionFilterLinkLoaded(self): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def iterateEmissionFilterLink(self): ...
    def addFilterSetEmissionFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFilterSetEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLinkToBoth(self, link, bothSides): ...
    def findFilterSetEmissionFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addFilterAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFilterAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addFilterAnnotationLinkToBoth(self, link, bothSides): ...
    def findFilterAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFilterAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FilterAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class FilterAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilterAnnotationLinkI(FilterAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FilterSet(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getManufacturer: ClassVar[IcePy.Operation] = ...
    _op_setManufacturer: ClassVar[IcePy.Operation] = ...
    _op_getModel: ClassVar[IcePy.Operation] = ...
    _op_setModel: ClassVar[IcePy.Operation] = ...
    _op_getLotNumber: ClassVar[IcePy.Operation] = ...
    _op_setLotNumber: ClassVar[IcePy.Operation] = ...
    _op_getSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_setSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_getInstrument: ClassVar[IcePy.Operation] = ...
    _op_setInstrument: ClassVar[IcePy.Operation] = ...
    _op_unloadExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_sizeOfExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_copyExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addFilterSetExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFilterSetExcitationFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFilterSetExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilterSetExcitationFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_reloadExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_getExcitationFilterLinkCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkExcitationFilter: ClassVar[IcePy.Operation] = ...
    _op_addFilterSetExcitationFilterLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFilterSetExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkExcitationFilter: ClassVar[IcePy.Operation] = ...
    _op_removeFilterSetExcitationFilterLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedExcitationFilterList: ClassVar[IcePy.Operation] = ...
    _op_getDichroic: ClassVar[IcePy.Operation] = ...
    _op_setDichroic: ClassVar[IcePy.Operation] = ...
    _op_unloadEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_sizeOfEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_copyEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addFilterSetEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFilterSetEmissionFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFilterSetEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilterSetEmissionFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_reloadEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_getEmissionFilterLinkCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkEmissionFilter: ClassVar[IcePy.Operation] = ...
    _op_addFilterSetEmissionFilterLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFilterSetEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkEmissionFilter: ClassVar[IcePy.Operation] = ...
    _op_removeFilterSetEmissionFilterLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedEmissionFilterList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _instrument: Incomplete | None = ..., _excitationFilterLinkSeq: Incomplete | None = ..., _excitationFilterLinkLoaded: bool = ..., _excitationFilterLinkCountPerOwner: Incomplete | None = ..., _dichroic: Incomplete | None = ..., _emissionFilterLinkSeq: Incomplete | None = ..., _emissionFilterLinkLoaded: bool = ..., _emissionFilterLinkCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, theModel, current: Incomplete | None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilterSetExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFilterSetExcitationFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def getDichroic(self, current: Incomplete | None = ...): ...
    def setDichroic(self, theDichroic, current: Incomplete | None = ...): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilterSetEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFilterSetEmissionFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...

class FilterSetPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def begin_getManufacturer(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getManufacturer(self, _r): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def begin_setManufacturer(self, theManufacturer, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setManufacturer(self, _r): ...
    def getModel(self, _ctx: Incomplete | None = ...): ...
    def begin_getModel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getModel(self, _r): ...
    def setModel(self, theModel, _ctx: Incomplete | None = ...): ...
    def begin_setModel(self, theModel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setModel(self, _r): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getLotNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLotNumber(self, _r): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def begin_setLotNumber(self, theLotNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLotNumber(self, _r): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getSerialNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSerialNumber(self, _r): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def begin_setSerialNumber(self, theSerialNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSerialNumber(self, _r): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def begin_getInstrument(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInstrument(self, _r): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def begin_setInstrument(self, theInstrument, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInstrument(self, _r): ...
    def unloadExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadExcitationFilterLink(self, _r): ...
    def sizeOfExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfExcitationFilterLink(self, _r): ...
    def copyExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_copyExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyExcitationFilterLink(self, _r): ...
    def addFilterSetExcitationFilterLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilterSetExcitationFilterLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterSetExcitationFilterLink(self, _r): ...
    def addAllFilterSetExcitationFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilterSetExcitationFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilterSetExcitationFilterLinkSet(self, _r): ...
    def removeFilterSetExcitationFilterLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterSetExcitationFilterLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterSetExcitationFilterLink(self, _r): ...
    def removeAllFilterSetExcitationFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilterSetExcitationFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilterSetExcitationFilterLinkSet(self, _r): ...
    def clearExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_clearExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearExcitationFilterLink(self, _r): ...
    def reloadExcitationFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadExcitationFilterLink(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadExcitationFilterLink(self, _r): ...
    def getExcitationFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getExcitationFilterLinkCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExcitationFilterLinkCountPerOwner(self, _r): ...
    def linkExcitationFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkExcitationFilter(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkExcitationFilter(self, _r): ...
    def addFilterSetExcitationFilterLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFilterSetExcitationFilterLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterSetExcitationFilterLinkToBoth(self, _r): ...
    def findFilterSetExcitationFilterLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFilterSetExcitationFilterLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFilterSetExcitationFilterLink(self, _r): ...
    def unlinkExcitationFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkExcitationFilter(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkExcitationFilter(self, _r): ...
    def removeFilterSetExcitationFilterLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterSetExcitationFilterLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterSetExcitationFilterLinkFromBoth(self, _r): ...
    def linkedExcitationFilterList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedExcitationFilterList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedExcitationFilterList(self, _r): ...
    def getDichroic(self, _ctx: Incomplete | None = ...): ...
    def begin_getDichroic(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDichroic(self, _r): ...
    def setDichroic(self, theDichroic, _ctx: Incomplete | None = ...): ...
    def begin_setDichroic(self, theDichroic, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDichroic(self, _r): ...
    def unloadEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadEmissionFilterLink(self, _r): ...
    def sizeOfEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfEmissionFilterLink(self, _r): ...
    def copyEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_copyEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyEmissionFilterLink(self, _r): ...
    def addFilterSetEmissionFilterLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilterSetEmissionFilterLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterSetEmissionFilterLink(self, _r): ...
    def addAllFilterSetEmissionFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilterSetEmissionFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilterSetEmissionFilterLinkSet(self, _r): ...
    def removeFilterSetEmissionFilterLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterSetEmissionFilterLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterSetEmissionFilterLink(self, _r): ...
    def removeAllFilterSetEmissionFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilterSetEmissionFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilterSetEmissionFilterLinkSet(self, _r): ...
    def clearEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_clearEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearEmissionFilterLink(self, _r): ...
    def reloadEmissionFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadEmissionFilterLink(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadEmissionFilterLink(self, _r): ...
    def getEmissionFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getEmissionFilterLinkCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEmissionFilterLinkCountPerOwner(self, _r): ...
    def linkEmissionFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkEmissionFilter(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkEmissionFilter(self, _r): ...
    def addFilterSetEmissionFilterLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFilterSetEmissionFilterLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterSetEmissionFilterLinkToBoth(self, _r): ...
    def findFilterSetEmissionFilterLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFilterSetEmissionFilterLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFilterSetEmissionFilterLink(self, _r): ...
    def unlinkEmissionFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkEmissionFilter(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkEmissionFilter(self, _r): ...
    def removeFilterSetEmissionFilterLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterSetEmissionFilterLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterSetEmissionFilterLinkFromBoth(self, _r): ...
    def linkedEmissionFilterList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedEmissionFilterList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedEmissionFilterList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilterSetI(FilterSet):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        manufacturer: Incomplete
        model: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        instrument: Incomplete
        excitationFilterLink: Incomplete
        dichroic: Incomplete
        emissionFilterLink: Incomplete
        details: Incomplete
        def __init__(self, _cls, manufacturer, model, lotNumber, serialNumber, instrument, excitationFilterLink, dichroic, emissionFilterLink, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    EXCITATIONFILTERLINK: ClassVar[str] = ...
    DICHROIC: ClassVar[str] = ...
    EMISSIONFILTERLINK: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def isExcitationFilterLinkLoaded(self): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def iterateExcitationFilterLink(self): ...
    def addFilterSetExcitationFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFilterSetExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetExcitationFilterLinkToBoth(self, link, bothSides): ...
    def findFilterSetExcitationFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetExcitationFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def unloadDichroic(self): ...
    def getDichroic(self, current: Incomplete | None = ...): ...
    def setDichroic(self, _dichroic, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def isEmissionFilterLinkLoaded(self): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def iterateEmissionFilterLink(self): ...
    def addFilterSetEmissionFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFilterSetEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addFilterSetEmissionFilterLinkToBoth(self, link, bothSides): ...
    def findFilterSetEmissionFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeFilterSetEmissionFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FilterSetEmissionFilterLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class FilterSetEmissionFilterLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilterSetEmissionFilterLinkI(FilterSetEmissionFilterLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FilterSetExcitationFilterLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class FilterSetExcitationFilterLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilterSetExcitationFilterLinkI(FilterSetExcitationFilterLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FilterType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class FilterTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FilterTypeI(FilterType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Folder(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_unloadChildFolders: ClassVar[IcePy.Operation] = ...
    _op_sizeOfChildFolders: ClassVar[IcePy.Operation] = ...
    _op_copyChildFolders: ClassVar[IcePy.Operation] = ...
    _op_addChildFolders: ClassVar[IcePy.Operation] = ...
    _op_addAllChildFoldersSet: ClassVar[IcePy.Operation] = ...
    _op_removeChildFolders: ClassVar[IcePy.Operation] = ...
    _op_removeAllChildFoldersSet: ClassVar[IcePy.Operation] = ...
    _op_clearChildFolders: ClassVar[IcePy.Operation] = ...
    _op_reloadChildFolders: ClassVar[IcePy.Operation] = ...
    _op_getParentFolder: ClassVar[IcePy.Operation] = ...
    _op_setParentFolder: ClassVar[IcePy.Operation] = ...
    _op_unloadImageLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfImageLinks: ClassVar[IcePy.Operation] = ...
    _op_copyImageLinks: ClassVar[IcePy.Operation] = ...
    _op_addFolderImageLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFolderImageLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFolderImageLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFolderImageLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearImageLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadImageLinks: ClassVar[IcePy.Operation] = ...
    _op_getImageLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkImage: ClassVar[IcePy.Operation] = ...
    _op_addFolderImageLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFolderImageLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkImage: ClassVar[IcePy.Operation] = ...
    _op_removeFolderImageLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedImageList: ClassVar[IcePy.Operation] = ...
    _op_unloadRoiLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfRoiLinks: ClassVar[IcePy.Operation] = ...
    _op_copyRoiLinks: ClassVar[IcePy.Operation] = ...
    _op_addFolderRoiLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFolderRoiLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFolderRoiLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFolderRoiLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearRoiLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadRoiLinks: ClassVar[IcePy.Operation] = ...
    _op_getRoiLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkRoi: ClassVar[IcePy.Operation] = ...
    _op_addFolderRoiLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFolderRoiLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkRoi: ClassVar[IcePy.Operation] = ...
    _op_removeFolderRoiLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedRoiList: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addFolderAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFolderAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFolderAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFolderAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addFolderAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFolderAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeFolderAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _childFoldersSeq: Incomplete | None = ..., _childFoldersLoaded: bool = ..., _parentFolder: Incomplete | None = ..., _imageLinksSeq: Incomplete | None = ..., _imageLinksLoaded: bool = ..., _imageLinksCountPerOwner: Incomplete | None = ..., _roiLinksSeq: Incomplete | None = ..., _roiLinksLoaded: bool = ..., _roiLinksCountPerOwner: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def unloadChildFolders(self, current: Incomplete | None = ...): ...
    def sizeOfChildFolders(self, current: Incomplete | None = ...): ...
    def copyChildFolders(self, current: Incomplete | None = ...): ...
    def addChildFolders(self, target, current: Incomplete | None = ...): ...
    def addAllChildFoldersSet(self, targets, current: Incomplete | None = ...): ...
    def removeChildFolders(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllChildFoldersSet(self, targets, current: Incomplete | None = ...): ...
    def clearChildFolders(self, current: Incomplete | None = ...): ...
    def reloadChildFolders(self, toCopy, current: Incomplete | None = ...): ...
    def getParentFolder(self, current: Incomplete | None = ...): ...
    def setParentFolder(self, theParentFolder, current: Incomplete | None = ...): ...
    def unloadImageLinks(self, current: Incomplete | None = ...): ...
    def sizeOfImageLinks(self, current: Incomplete | None = ...): ...
    def copyImageLinks(self, current: Incomplete | None = ...): ...
    def addFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderImageLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearImageLinks(self, current: Incomplete | None = ...): ...
    def reloadImageLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getImageLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkImage(self, addition, current: Incomplete | None = ...): ...
    def addFolderImageLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFolderImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkImage(self, removal, current: Incomplete | None = ...): ...
    def removeFolderImageLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedImageList(self, current: Incomplete | None = ...): ...
    def unloadRoiLinks(self, current: Incomplete | None = ...): ...
    def sizeOfRoiLinks(self, current: Incomplete | None = ...): ...
    def copyRoiLinks(self, current: Incomplete | None = ...): ...
    def addFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderRoiLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearRoiLinks(self, current: Incomplete | None = ...): ...
    def reloadRoiLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getRoiLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkRoi(self, addition, current: Incomplete | None = ...): ...
    def addFolderRoiLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFolderRoiLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkRoi(self, removal, current: Incomplete | None = ...): ...
    def removeFolderRoiLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedRoiList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addFolderAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFolderAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addFolderAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFolderAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFolderAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class FolderPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def unloadChildFolders(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadChildFolders(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadChildFolders(self, _r): ...
    def sizeOfChildFolders(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfChildFolders(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfChildFolders(self, _r): ...
    def copyChildFolders(self, _ctx: Incomplete | None = ...): ...
    def begin_copyChildFolders(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyChildFolders(self, _r): ...
    def addChildFolders(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addChildFolders(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addChildFolders(self, _r): ...
    def addAllChildFoldersSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllChildFoldersSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllChildFoldersSet(self, _r): ...
    def removeChildFolders(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeChildFolders(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeChildFolders(self, _r): ...
    def removeAllChildFoldersSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllChildFoldersSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllChildFoldersSet(self, _r): ...
    def clearChildFolders(self, _ctx: Incomplete | None = ...): ...
    def begin_clearChildFolders(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearChildFolders(self, _r): ...
    def reloadChildFolders(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadChildFolders(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadChildFolders(self, _r): ...
    def getParentFolder(self, _ctx: Incomplete | None = ...): ...
    def begin_getParentFolder(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParentFolder(self, _r): ...
    def setParentFolder(self, theParentFolder, _ctx: Incomplete | None = ...): ...
    def begin_setParentFolder(self, theParentFolder, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParentFolder(self, _r): ...
    def unloadImageLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadImageLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadImageLinks(self, _r): ...
    def sizeOfImageLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfImageLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfImageLinks(self, _r): ...
    def copyImageLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyImageLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyImageLinks(self, _r): ...
    def addFolderImageLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFolderImageLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFolderImageLink(self, _r): ...
    def addAllFolderImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFolderImageLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFolderImageLinkSet(self, _r): ...
    def removeFolderImageLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFolderImageLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFolderImageLink(self, _r): ...
    def removeAllFolderImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFolderImageLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFolderImageLinkSet(self, _r): ...
    def clearImageLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearImageLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearImageLinks(self, _r): ...
    def reloadImageLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadImageLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadImageLinks(self, _r): ...
    def getImageLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getImageLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getImageLinksCountPerOwner(self, _r): ...
    def linkImage(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkImage(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkImage(self, _r): ...
    def addFolderImageLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFolderImageLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFolderImageLinkToBoth(self, _r): ...
    def findFolderImageLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFolderImageLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFolderImageLink(self, _r): ...
    def unlinkImage(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkImage(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkImage(self, _r): ...
    def removeFolderImageLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFolderImageLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFolderImageLinkFromBoth(self, _r): ...
    def linkedImageList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedImageList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedImageList(self, _r): ...
    def unloadRoiLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadRoiLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadRoiLinks(self, _r): ...
    def sizeOfRoiLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfRoiLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfRoiLinks(self, _r): ...
    def copyRoiLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyRoiLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyRoiLinks(self, _r): ...
    def addFolderRoiLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFolderRoiLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFolderRoiLink(self, _r): ...
    def addAllFolderRoiLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFolderRoiLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFolderRoiLinkSet(self, _r): ...
    def removeFolderRoiLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFolderRoiLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFolderRoiLink(self, _r): ...
    def removeAllFolderRoiLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFolderRoiLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFolderRoiLinkSet(self, _r): ...
    def clearRoiLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearRoiLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearRoiLinks(self, _r): ...
    def reloadRoiLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadRoiLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadRoiLinks(self, _r): ...
    def getRoiLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getRoiLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRoiLinksCountPerOwner(self, _r): ...
    def linkRoi(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkRoi(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkRoi(self, _r): ...
    def addFolderRoiLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFolderRoiLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFolderRoiLinkToBoth(self, _r): ...
    def findFolderRoiLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFolderRoiLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFolderRoiLink(self, _r): ...
    def unlinkRoi(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkRoi(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkRoi(self, _r): ...
    def removeFolderRoiLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFolderRoiLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFolderRoiLinkFromBoth(self, _r): ...
    def linkedRoiList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedRoiList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedRoiList(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addFolderAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFolderAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFolderAnnotationLink(self, _r): ...
    def addAllFolderAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFolderAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFolderAnnotationLinkSet(self, _r): ...
    def removeFolderAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFolderAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFolderAnnotationLink(self, _r): ...
    def removeAllFolderAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFolderAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFolderAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addFolderAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFolderAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFolderAnnotationLinkToBoth(self, _r): ...
    def findFolderAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFolderAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFolderAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeFolderAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFolderAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFolderAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FolderI(Folder):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        childFolders: Incomplete
        parentFolder: Incomplete
        imageLinks: Incomplete
        roiLinks: Incomplete
        annotationLinks: Incomplete
        name: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, childFolders, parentFolder, imageLinks, roiLinks, annotationLinks, name, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    CHILDFOLDERS: ClassVar[str] = ...
    PARENTFOLDER: ClassVar[str] = ...
    IMAGELINKS: ClassVar[str] = ...
    ROILINKS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadChildFolders(self, current: Incomplete | None = ...): ...
    def isChildFoldersLoaded(self): ...
    def sizeOfChildFolders(self, current: Incomplete | None = ...): ...
    def copyChildFolders(self, current: Incomplete | None = ...): ...
    def iterateChildFolders(self): ...
    def addChildFolders(self, target, current: Incomplete | None = ...): ...
    def addAllChildFoldersSet(self, targets, current: Incomplete | None = ...): ...
    def removeChildFolders(self, target, current: Incomplete | None = ...): ...
    def removeAllChildFoldersSet(self, targets, current: Incomplete | None = ...): ...
    def clearChildFolders(self, current: Incomplete | None = ...): ...
    def reloadChildFolders(self, toCopy, current: Incomplete | None = ...): ...
    def unloadParentFolder(self): ...
    def getParentFolder(self, current: Incomplete | None = ...): ...
    def setParentFolder(self, _parentFolder, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadImageLinks(self, current: Incomplete | None = ...): ...
    def isImageLinksLoaded(self): ...
    def sizeOfImageLinks(self, current: Incomplete | None = ...): ...
    def copyImageLinks(self, current: Incomplete | None = ...): ...
    def iterateImageLinks(self): ...
    def addFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearImageLinks(self, current: Incomplete | None = ...): ...
    def reloadImageLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getImageLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkImage(self, addition, current: Incomplete | None = ...): ...
    def addFolderImageLinkToBoth(self, link, bothSides): ...
    def findFolderImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkImage(self, removal, current: Incomplete | None = ...): ...
    def removeFolderImageLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedImageList(self, current: Incomplete | None = ...): ...
    def unloadRoiLinks(self, current: Incomplete | None = ...): ...
    def isRoiLinksLoaded(self): ...
    def sizeOfRoiLinks(self, current: Incomplete | None = ...): ...
    def copyRoiLinks(self, current: Incomplete | None = ...): ...
    def iterateRoiLinks(self): ...
    def addFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearRoiLinks(self, current: Incomplete | None = ...): ...
    def reloadRoiLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getRoiLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkRoi(self, addition, current: Incomplete | None = ...): ...
    def addFolderRoiLinkToBoth(self, link, bothSides): ...
    def findFolderRoiLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkRoi(self, removal, current: Incomplete | None = ...): ...
    def removeFolderRoiLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedRoiList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addFolderAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFolderAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addFolderAnnotationLinkToBoth(self, link, bothSides): ...
    def findFolderAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeFolderAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FolderAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class FolderAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FolderAnnotationLinkI(FolderAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FolderImageLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class FolderImageLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FolderImageLinkI(FolderImageLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class FolderRoiLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class FolderRoiLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FolderRoiLinkI(FolderRoiLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Format(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class FormatPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FormatI(Format):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class GenericExcitationSource(LightSource):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getMapAsMap: ClassVar[IcePy.Operation] = ...
    _op_getMap: ClassVar[IcePy.Operation] = ...
    _op_setMap: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _power: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _instrument: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _map: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getMapAsMap(self, current: Incomplete | None = ...): ...
    def getMap(self, current: Incomplete | None = ...): ...
    def setMap(self, theMap, current: Incomplete | None = ...): ...

class GenericExcitationSourcePrx(LightSourcePrx):
    def getMapAsMap(self, _ctx: Incomplete | None = ...): ...
    def begin_getMapAsMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMapAsMap(self, _r): ...
    def getMap(self, _ctx: Incomplete | None = ...): ...
    def begin_getMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMap(self, _r): ...
    def setMap(self, theMap, _ctx: Incomplete | None = ...): ...
    def begin_setMap(self, theMap, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMap(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class GenericExcitationSourceI(GenericExcitationSource):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        map: Incomplete
        manufacturer: Incomplete
        model: Incomplete
        power: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        instrument: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, map, manufacturer, model, power, lotNumber, serialNumber, instrument, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    MAP: ClassVar[str] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    POWER: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadMap(self): ...
    def getMap(self, current: Incomplete | None = ...): ...
    def setMap(self, _map, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getMapAsMap(self, current: Incomplete | None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPower(self): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, _power, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightSourceAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class GroupExperimenterMap(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_getOwner: ClassVar[IcePy.Operation] = ...
    _op_setOwner: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ..., _owner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def getOwner(self, current: Incomplete | None = ...): ...
    def setOwner(self, theOwner, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class GroupExperimenterMapPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def getOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getOwner(self, _r): ...
    def setOwner(self, theOwner, _ctx: Incomplete | None = ...): ...
    def begin_setOwner(self, theOwner, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setOwner(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class GroupExperimenterMapI(GroupExperimenterMap):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        owner: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, owner, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    OWNER: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOwner(self): ...
    def getOwner(self, current: Incomplete | None = ...): ...
    def setOwner(self, _owner, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Illumination(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class IlluminationPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class IlluminationI(Illumination):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Image(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getSeries: ClassVar[IcePy.Operation] = ...
    _op_setSeries: ClassVar[IcePy.Operation] = ...
    _op_getAcquisitionDate: ClassVar[IcePy.Operation] = ...
    _op_setAcquisitionDate: ClassVar[IcePy.Operation] = ...
    _op_getArchived: ClassVar[IcePy.Operation] = ...
    _op_setArchived: ClassVar[IcePy.Operation] = ...
    _op_getPartial: ClassVar[IcePy.Operation] = ...
    _op_setPartial: ClassVar[IcePy.Operation] = ...
    _op_getFormat: ClassVar[IcePy.Operation] = ...
    _op_setFormat: ClassVar[IcePy.Operation] = ...
    _op_getImagingEnvironment: ClassVar[IcePy.Operation] = ...
    _op_setImagingEnvironment: ClassVar[IcePy.Operation] = ...
    _op_getObjectiveSettings: ClassVar[IcePy.Operation] = ...
    _op_setObjectiveSettings: ClassVar[IcePy.Operation] = ...
    _op_getInstrument: ClassVar[IcePy.Operation] = ...
    _op_setInstrument: ClassVar[IcePy.Operation] = ...
    _op_getStageLabel: ClassVar[IcePy.Operation] = ...
    _op_setStageLabel: ClassVar[IcePy.Operation] = ...
    _op_getExperiment: ClassVar[IcePy.Operation] = ...
    _op_setExperiment: ClassVar[IcePy.Operation] = ...
    _op_unloadPixels: ClassVar[IcePy.Operation] = ...
    _op_sizeOfPixels: ClassVar[IcePy.Operation] = ...
    _op_copyPixels: ClassVar[IcePy.Operation] = ...
    _op_addPixels: ClassVar[IcePy.Operation] = ...
    _op_addAllPixelsSet: ClassVar[IcePy.Operation] = ...
    _op_removePixels: ClassVar[IcePy.Operation] = ...
    _op_removeAllPixelsSet: ClassVar[IcePy.Operation] = ...
    _op_clearPixels: ClassVar[IcePy.Operation] = ...
    _op_reloadPixels: ClassVar[IcePy.Operation] = ...
    _op_getPixels: ClassVar[IcePy.Operation] = ...
    _op_setPixels: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryPixels: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryPixels: ClassVar[IcePy.Operation] = ...
    _op_unloadWellSamples: ClassVar[IcePy.Operation] = ...
    _op_sizeOfWellSamples: ClassVar[IcePy.Operation] = ...
    _op_copyWellSamples: ClassVar[IcePy.Operation] = ...
    _op_addWellSample: ClassVar[IcePy.Operation] = ...
    _op_addAllWellSampleSet: ClassVar[IcePy.Operation] = ...
    _op_removeWellSample: ClassVar[IcePy.Operation] = ...
    _op_removeAllWellSampleSet: ClassVar[IcePy.Operation] = ...
    _op_clearWellSamples: ClassVar[IcePy.Operation] = ...
    _op_reloadWellSamples: ClassVar[IcePy.Operation] = ...
    _op_unloadRois: ClassVar[IcePy.Operation] = ...
    _op_sizeOfRois: ClassVar[IcePy.Operation] = ...
    _op_copyRois: ClassVar[IcePy.Operation] = ...
    _op_addRoi: ClassVar[IcePy.Operation] = ...
    _op_addAllRoiSet: ClassVar[IcePy.Operation] = ...
    _op_removeRoi: ClassVar[IcePy.Operation] = ...
    _op_removeAllRoiSet: ClassVar[IcePy.Operation] = ...
    _op_clearRois: ClassVar[IcePy.Operation] = ...
    _op_reloadRois: ClassVar[IcePy.Operation] = ...
    _op_unloadDatasetLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfDatasetLinks: ClassVar[IcePy.Operation] = ...
    _op_copyDatasetLinks: ClassVar[IcePy.Operation] = ...
    _op_addDatasetImageLink: ClassVar[IcePy.Operation] = ...
    _op_addAllDatasetImageLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeDatasetImageLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllDatasetImageLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearDatasetLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadDatasetLinks: ClassVar[IcePy.Operation] = ...
    _op_getDatasetLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkDataset: ClassVar[IcePy.Operation] = ...
    _op_addDatasetImageLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findDatasetImageLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkDataset: ClassVar[IcePy.Operation] = ...
    _op_removeDatasetImageLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedDatasetList: ClassVar[IcePy.Operation] = ...
    _op_unloadFolderLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfFolderLinks: ClassVar[IcePy.Operation] = ...
    _op_copyFolderLinks: ClassVar[IcePy.Operation] = ...
    _op_addFolderImageLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFolderImageLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFolderImageLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFolderImageLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearFolderLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadFolderLinks: ClassVar[IcePy.Operation] = ...
    _op_getFolderLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkFolder: ClassVar[IcePy.Operation] = ...
    _op_addFolderImageLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFolderImageLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkFolder: ClassVar[IcePy.Operation] = ...
    _op_removeFolderImageLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedFolderList: ClassVar[IcePy.Operation] = ...
    _op_getFileset: ClassVar[IcePy.Operation] = ...
    _op_setFileset: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addImageAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllImageAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeImageAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllImageAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addImageAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findImageAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeImageAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _series: Incomplete | None = ..., _acquisitionDate: Incomplete | None = ..., _archived: Incomplete | None = ..., _partial: Incomplete | None = ..., _format: Incomplete | None = ..., _imagingEnvironment: Incomplete | None = ..., _objectiveSettings: Incomplete | None = ..., _instrument: Incomplete | None = ..., _stageLabel: Incomplete | None = ..., _experiment: Incomplete | None = ..., _pixelsSeq: Incomplete | None = ..., _pixelsLoaded: bool = ..., _wellSamplesSeq: Incomplete | None = ..., _wellSamplesLoaded: bool = ..., _roisSeq: Incomplete | None = ..., _roisLoaded: bool = ..., _datasetLinksSeq: Incomplete | None = ..., _datasetLinksLoaded: bool = ..., _datasetLinksCountPerOwner: Incomplete | None = ..., _folderLinksSeq: Incomplete | None = ..., _folderLinksLoaded: bool = ..., _folderLinksCountPerOwner: Incomplete | None = ..., _fileset: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getSeries(self, current: Incomplete | None = ...): ...
    def setSeries(self, theSeries, current: Incomplete | None = ...): ...
    def getAcquisitionDate(self, current: Incomplete | None = ...): ...
    def setAcquisitionDate(self, theAcquisitionDate, current: Incomplete | None = ...): ...
    def getArchived(self, current: Incomplete | None = ...): ...
    def setArchived(self, theArchived, current: Incomplete | None = ...): ...
    def getPartial(self, current: Incomplete | None = ...): ...
    def setPartial(self, thePartial, current: Incomplete | None = ...): ...
    def getFormat(self, current: Incomplete | None = ...): ...
    def setFormat(self, theFormat, current: Incomplete | None = ...): ...
    def getImagingEnvironment(self, current: Incomplete | None = ...): ...
    def setImagingEnvironment(self, theImagingEnvironment, current: Incomplete | None = ...): ...
    def getObjectiveSettings(self, current: Incomplete | None = ...): ...
    def setObjectiveSettings(self, theObjectiveSettings, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def getStageLabel(self, current: Incomplete | None = ...): ...
    def setStageLabel(self, theStageLabel, current: Incomplete | None = ...): ...
    def getExperiment(self, current: Incomplete | None = ...): ...
    def setExperiment(self, theExperiment, current: Incomplete | None = ...): ...
    def unloadPixels(self, current: Incomplete | None = ...): ...
    def sizeOfPixels(self, current: Incomplete | None = ...): ...
    def copyPixels(self, current: Incomplete | None = ...): ...
    def addPixels(self, target, current: Incomplete | None = ...): ...
    def addAllPixelsSet(self, targets, current: Incomplete | None = ...): ...
    def removePixels(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllPixelsSet(self, targets, current: Incomplete | None = ...): ...
    def clearPixels(self, current: Incomplete | None = ...): ...
    def reloadPixels(self, toCopy, current: Incomplete | None = ...): ...
    def getPixels(self, index, current: Incomplete | None = ...): ...
    def setPixels(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryPixels(self, current: Incomplete | None = ...): ...
    def setPrimaryPixels(self, theElement, current: Incomplete | None = ...): ...
    def unloadWellSamples(self, current: Incomplete | None = ...): ...
    def sizeOfWellSamples(self, current: Incomplete | None = ...): ...
    def copyWellSamples(self, current: Incomplete | None = ...): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSamples(self, current: Incomplete | None = ...): ...
    def reloadWellSamples(self, toCopy, current: Incomplete | None = ...): ...
    def unloadRois(self, current: Incomplete | None = ...): ...
    def sizeOfRois(self, current: Incomplete | None = ...): ...
    def copyRois(self, current: Incomplete | None = ...): ...
    def addRoi(self, target, current: Incomplete | None = ...): ...
    def addAllRoiSet(self, targets, current: Incomplete | None = ...): ...
    def removeRoi(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllRoiSet(self, targets, current: Incomplete | None = ...): ...
    def clearRois(self, current: Incomplete | None = ...): ...
    def reloadRois(self, toCopy, current: Incomplete | None = ...): ...
    def unloadDatasetLinks(self, current: Incomplete | None = ...): ...
    def sizeOfDatasetLinks(self, current: Incomplete | None = ...): ...
    def copyDatasetLinks(self, current: Incomplete | None = ...): ...
    def addDatasetImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDatasetImageLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearDatasetLinks(self, current: Incomplete | None = ...): ...
    def reloadDatasetLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getDatasetLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkDataset(self, addition, current: Incomplete | None = ...): ...
    def addDatasetImageLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findDatasetImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkDataset(self, removal, current: Incomplete | None = ...): ...
    def removeDatasetImageLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedDatasetList(self, current: Incomplete | None = ...): ...
    def unloadFolderLinks(self, current: Incomplete | None = ...): ...
    def sizeOfFolderLinks(self, current: Incomplete | None = ...): ...
    def copyFolderLinks(self, current: Incomplete | None = ...): ...
    def addFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderImageLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearFolderLinks(self, current: Incomplete | None = ...): ...
    def reloadFolderLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFolderLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkFolder(self, addition, current: Incomplete | None = ...): ...
    def addFolderImageLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFolderImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkFolder(self, removal, current: Incomplete | None = ...): ...
    def removeFolderImageLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedFolderList(self, current: Incomplete | None = ...): ...
    def getFileset(self, current: Incomplete | None = ...): ...
    def setFileset(self, theFileset, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addImageAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllImageAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeImageAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllImageAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addImageAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findImageAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeImageAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class ImagePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getSeries(self, _ctx: Incomplete | None = ...): ...
    def begin_getSeries(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSeries(self, _r): ...
    def setSeries(self, theSeries, _ctx: Incomplete | None = ...): ...
    def begin_setSeries(self, theSeries, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSeries(self, _r): ...
    def getAcquisitionDate(self, _ctx: Incomplete | None = ...): ...
    def begin_getAcquisitionDate(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAcquisitionDate(self, _r): ...
    def setAcquisitionDate(self, theAcquisitionDate, _ctx: Incomplete | None = ...): ...
    def begin_setAcquisitionDate(self, theAcquisitionDate, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setAcquisitionDate(self, _r): ...
    def getArchived(self, _ctx: Incomplete | None = ...): ...
    def begin_getArchived(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getArchived(self, _r): ...
    def setArchived(self, theArchived, _ctx: Incomplete | None = ...): ...
    def begin_setArchived(self, theArchived, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setArchived(self, _r): ...
    def getPartial(self, _ctx: Incomplete | None = ...): ...
    def begin_getPartial(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPartial(self, _r): ...
    def setPartial(self, thePartial, _ctx: Incomplete | None = ...): ...
    def begin_setPartial(self, thePartial, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPartial(self, _r): ...
    def getFormat(self, _ctx: Incomplete | None = ...): ...
    def begin_getFormat(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFormat(self, _r): ...
    def setFormat(self, theFormat, _ctx: Incomplete | None = ...): ...
    def begin_setFormat(self, theFormat, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFormat(self, _r): ...
    def getImagingEnvironment(self, _ctx: Incomplete | None = ...): ...
    def begin_getImagingEnvironment(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getImagingEnvironment(self, _r): ...
    def setImagingEnvironment(self, theImagingEnvironment, _ctx: Incomplete | None = ...): ...
    def begin_setImagingEnvironment(self, theImagingEnvironment, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setImagingEnvironment(self, _r): ...
    def getObjectiveSettings(self, _ctx: Incomplete | None = ...): ...
    def begin_getObjectiveSettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getObjectiveSettings(self, _r): ...
    def setObjectiveSettings(self, theObjectiveSettings, _ctx: Incomplete | None = ...): ...
    def begin_setObjectiveSettings(self, theObjectiveSettings, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setObjectiveSettings(self, _r): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def begin_getInstrument(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInstrument(self, _r): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def begin_setInstrument(self, theInstrument, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInstrument(self, _r): ...
    def getStageLabel(self, _ctx: Incomplete | None = ...): ...
    def begin_getStageLabel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStageLabel(self, _r): ...
    def setStageLabel(self, theStageLabel, _ctx: Incomplete | None = ...): ...
    def begin_setStageLabel(self, theStageLabel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStageLabel(self, _r): ...
    def getExperiment(self, _ctx: Incomplete | None = ...): ...
    def begin_getExperiment(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExperiment(self, _r): ...
    def setExperiment(self, theExperiment, _ctx: Incomplete | None = ...): ...
    def begin_setExperiment(self, theExperiment, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setExperiment(self, _r): ...
    def unloadPixels(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadPixels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadPixels(self, _r): ...
    def sizeOfPixels(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfPixels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfPixels(self, _r): ...
    def copyPixels(self, _ctx: Incomplete | None = ...): ...
    def begin_copyPixels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyPixels(self, _r): ...
    def addPixels(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addPixels(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPixels(self, _r): ...
    def addAllPixelsSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllPixelsSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllPixelsSet(self, _r): ...
    def removePixels(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removePixels(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePixels(self, _r): ...
    def removeAllPixelsSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllPixelsSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllPixelsSet(self, _r): ...
    def clearPixels(self, _ctx: Incomplete | None = ...): ...
    def begin_clearPixels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearPixels(self, _r): ...
    def reloadPixels(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadPixels(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadPixels(self, _r): ...
    def getPixels(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getPixels(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPixels(self, _r): ...
    def setPixels(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPixels(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPixels(self, _r): ...
    def getPrimaryPixels(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryPixels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryPixels(self, _r): ...
    def setPrimaryPixels(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryPixels(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryPixels(self, _r): ...
    def unloadWellSamples(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadWellSamples(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadWellSamples(self, _r): ...
    def sizeOfWellSamples(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfWellSamples(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfWellSamples(self, _r): ...
    def copyWellSamples(self, _ctx: Incomplete | None = ...): ...
    def begin_copyWellSamples(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyWellSamples(self, _r): ...
    def addWellSample(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addWellSample(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addWellSample(self, _r): ...
    def addAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllWellSampleSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllWellSampleSet(self, _r): ...
    def removeWellSample(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeWellSample(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeWellSample(self, _r): ...
    def removeAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllWellSampleSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllWellSampleSet(self, _r): ...
    def clearWellSamples(self, _ctx: Incomplete | None = ...): ...
    def begin_clearWellSamples(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearWellSamples(self, _r): ...
    def reloadWellSamples(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadWellSamples(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadWellSamples(self, _r): ...
    def unloadRois(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadRois(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadRois(self, _r): ...
    def sizeOfRois(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfRois(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfRois(self, _r): ...
    def copyRois(self, _ctx: Incomplete | None = ...): ...
    def begin_copyRois(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyRois(self, _r): ...
    def addRoi(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addRoi(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addRoi(self, _r): ...
    def addAllRoiSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllRoiSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllRoiSet(self, _r): ...
    def removeRoi(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeRoi(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeRoi(self, _r): ...
    def removeAllRoiSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllRoiSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllRoiSet(self, _r): ...
    def clearRois(self, _ctx: Incomplete | None = ...): ...
    def begin_clearRois(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearRois(self, _r): ...
    def reloadRois(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadRois(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadRois(self, _r): ...
    def unloadDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadDatasetLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadDatasetLinks(self, _r): ...
    def sizeOfDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfDatasetLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfDatasetLinks(self, _r): ...
    def copyDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyDatasetLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyDatasetLinks(self, _r): ...
    def addDatasetImageLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addDatasetImageLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDatasetImageLink(self, _r): ...
    def addAllDatasetImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllDatasetImageLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllDatasetImageLinkSet(self, _r): ...
    def removeDatasetImageLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeDatasetImageLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDatasetImageLink(self, _r): ...
    def removeAllDatasetImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllDatasetImageLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllDatasetImageLinkSet(self, _r): ...
    def clearDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearDatasetLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearDatasetLinks(self, _r): ...
    def reloadDatasetLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadDatasetLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadDatasetLinks(self, _r): ...
    def getDatasetLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getDatasetLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDatasetLinksCountPerOwner(self, _r): ...
    def linkDataset(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkDataset(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkDataset(self, _r): ...
    def addDatasetImageLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addDatasetImageLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDatasetImageLinkToBoth(self, _r): ...
    def findDatasetImageLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findDatasetImageLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findDatasetImageLink(self, _r): ...
    def unlinkDataset(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkDataset(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkDataset(self, _r): ...
    def removeDatasetImageLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeDatasetImageLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDatasetImageLinkFromBoth(self, _r): ...
    def linkedDatasetList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedDatasetList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedDatasetList(self, _r): ...
    def unloadFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadFolderLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadFolderLinks(self, _r): ...
    def sizeOfFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfFolderLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfFolderLinks(self, _r): ...
    def copyFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyFolderLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyFolderLinks(self, _r): ...
    def addFolderImageLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFolderImageLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFolderImageLink(self, _r): ...
    def addAllFolderImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFolderImageLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFolderImageLinkSet(self, _r): ...
    def removeFolderImageLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFolderImageLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFolderImageLink(self, _r): ...
    def removeAllFolderImageLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFolderImageLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFolderImageLinkSet(self, _r): ...
    def clearFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearFolderLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearFolderLinks(self, _r): ...
    def reloadFolderLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadFolderLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadFolderLinks(self, _r): ...
    def getFolderLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getFolderLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFolderLinksCountPerOwner(self, _r): ...
    def linkFolder(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkFolder(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkFolder(self, _r): ...
    def addFolderImageLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFolderImageLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFolderImageLinkToBoth(self, _r): ...
    def findFolderImageLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFolderImageLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFolderImageLink(self, _r): ...
    def unlinkFolder(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkFolder(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkFolder(self, _r): ...
    def removeFolderImageLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFolderImageLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFolderImageLinkFromBoth(self, _r): ...
    def linkedFolderList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedFolderList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedFolderList(self, _r): ...
    def getFileset(self, _ctx: Incomplete | None = ...): ...
    def begin_getFileset(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFileset(self, _r): ...
    def setFileset(self, theFileset, _ctx: Incomplete | None = ...): ...
    def begin_setFileset(self, theFileset, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFileset(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addImageAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addImageAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addImageAnnotationLink(self, _r): ...
    def addAllImageAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllImageAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllImageAnnotationLinkSet(self, _r): ...
    def removeImageAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeImageAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeImageAnnotationLink(self, _r): ...
    def removeAllImageAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllImageAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllImageAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addImageAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addImageAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addImageAnnotationLinkToBoth(self, _r): ...
    def findImageAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findImageAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findImageAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeImageAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeImageAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeImageAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ImageI(Image):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        series: Incomplete
        acquisitionDate: Incomplete
        archived: Incomplete
        partial: Incomplete
        format: Incomplete
        imagingEnvironment: Incomplete
        objectiveSettings: Incomplete
        instrument: Incomplete
        stageLabel: Incomplete
        experiment: Incomplete
        pixels: Incomplete
        wellSamples: Incomplete
        rois: Incomplete
        datasetLinks: Incomplete
        folderLinks: Incomplete
        fileset: Incomplete
        annotationLinks: Incomplete
        name: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, series, acquisitionDate, archived, partial, format, imagingEnvironment, objectiveSettings, instrument, stageLabel, experiment, pixels, wellSamples, rois, datasetLinks, folderLinks, fileset, annotationLinks, name, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    SERIES: ClassVar[str] = ...
    ACQUISITIONDATE: ClassVar[str] = ...
    ARCHIVED: ClassVar[str] = ...
    PARTIAL: ClassVar[str] = ...
    FORMAT: ClassVar[str] = ...
    IMAGINGENVIRONMENT: ClassVar[str] = ...
    OBJECTIVESETTINGS: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    STAGELABEL: ClassVar[str] = ...
    EXPERIMENT: ClassVar[str] = ...
    PIXELS: ClassVar[str] = ...
    WELLSAMPLES: ClassVar[str] = ...
    ROIS: ClassVar[str] = ...
    DATASETLINKS: ClassVar[str] = ...
    FOLDERLINKS: ClassVar[str] = ...
    FILESET: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadSeries(self): ...
    def getSeries(self, current: Incomplete | None = ...): ...
    def setSeries(self, _series, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAcquisitionDate(self): ...
    def getAcquisitionDate(self, current: Incomplete | None = ...): ...
    def setAcquisitionDate(self, _acquisitionDate, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadArchived(self): ...
    def getArchived(self, current: Incomplete | None = ...): ...
    def setArchived(self, _archived, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPartial(self): ...
    def getPartial(self, current: Incomplete | None = ...): ...
    def setPartial(self, _partial, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFormat(self): ...
    def getFormat(self, current: Incomplete | None = ...): ...
    def setFormat(self, _format, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadImagingEnvironment(self): ...
    def getImagingEnvironment(self, current: Incomplete | None = ...): ...
    def setImagingEnvironment(self, _imagingEnvironment, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadObjectiveSettings(self): ...
    def getObjectiveSettings(self, current: Incomplete | None = ...): ...
    def setObjectiveSettings(self, _objectiveSettings, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStageLabel(self): ...
    def getStageLabel(self, current: Incomplete | None = ...): ...
    def setStageLabel(self, _stageLabel, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadExperiment(self): ...
    def getExperiment(self, current: Incomplete | None = ...): ...
    def setExperiment(self, _experiment, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPixels(self, current: Incomplete | None = ...): ...
    def isPixelsLoaded(self): ...
    def sizeOfPixels(self, current: Incomplete | None = ...): ...
    def copyPixels(self, current: Incomplete | None = ...): ...
    def iteratePixels(self): ...
    def addPixels(self, target, current: Incomplete | None = ...): ...
    def addAllPixelsSet(self, targets, current: Incomplete | None = ...): ...
    def removePixels(self, target, current: Incomplete | None = ...): ...
    def removeAllPixelsSet(self, targets, current: Incomplete | None = ...): ...
    def clearPixels(self, current: Incomplete | None = ...): ...
    def reloadPixels(self, toCopy, current: Incomplete | None = ...): ...
    def getPixels(self, index, current: Incomplete | None = ...): ...
    def setPixels(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryPixels(self, current: Incomplete | None = ...): ...
    def setPrimaryPixels(self, element, current: Incomplete | None = ...): ...
    def unloadWellSamples(self, current: Incomplete | None = ...): ...
    def isWellSamplesLoaded(self): ...
    def sizeOfWellSamples(self, current: Incomplete | None = ...): ...
    def copyWellSamples(self, current: Incomplete | None = ...): ...
    def iterateWellSamples(self): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, target, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSamples(self, current: Incomplete | None = ...): ...
    def reloadWellSamples(self, toCopy, current: Incomplete | None = ...): ...
    def unloadRois(self, current: Incomplete | None = ...): ...
    def isRoisLoaded(self): ...
    def sizeOfRois(self, current: Incomplete | None = ...): ...
    def copyRois(self, current: Incomplete | None = ...): ...
    def iterateRois(self): ...
    def addRoi(self, target, current: Incomplete | None = ...): ...
    def addAllRoiSet(self, targets, current: Incomplete | None = ...): ...
    def removeRoi(self, target, current: Incomplete | None = ...): ...
    def removeAllRoiSet(self, targets, current: Incomplete | None = ...): ...
    def clearRois(self, current: Incomplete | None = ...): ...
    def reloadRois(self, toCopy, current: Incomplete | None = ...): ...
    def unloadDatasetLinks(self, current: Incomplete | None = ...): ...
    def isDatasetLinksLoaded(self): ...
    def sizeOfDatasetLinks(self, current: Incomplete | None = ...): ...
    def copyDatasetLinks(self, current: Incomplete | None = ...): ...
    def iterateDatasetLinks(self): ...
    def addDatasetImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeDatasetImageLink(self, target, current: Incomplete | None = ...): ...
    def removeAllDatasetImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearDatasetLinks(self, current: Incomplete | None = ...): ...
    def reloadDatasetLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getDatasetLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkDataset(self, addition, current: Incomplete | None = ...): ...
    def addDatasetImageLinkToBoth(self, link, bothSides): ...
    def findDatasetImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkDataset(self, removal, current: Incomplete | None = ...): ...
    def removeDatasetImageLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedDatasetList(self, current: Incomplete | None = ...): ...
    def unloadFolderLinks(self, current: Incomplete | None = ...): ...
    def isFolderLinksLoaded(self): ...
    def sizeOfFolderLinks(self, current: Incomplete | None = ...): ...
    def copyFolderLinks(self, current: Incomplete | None = ...): ...
    def iterateFolderLinks(self): ...
    def addFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderImageLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFolderImageLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearFolderLinks(self, current: Incomplete | None = ...): ...
    def reloadFolderLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFolderLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkFolder(self, addition, current: Incomplete | None = ...): ...
    def addFolderImageLinkToBoth(self, link, bothSides): ...
    def findFolderImageLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkFolder(self, removal, current: Incomplete | None = ...): ...
    def removeFolderImageLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedFolderList(self, current: Incomplete | None = ...): ...
    def unloadFileset(self): ...
    def getFileset(self, current: Incomplete | None = ...): ...
    def setFileset(self, _fileset, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addImageAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllImageAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeImageAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllImageAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addImageAnnotationLinkToBoth(self, link, bothSides): ...
    def findImageAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeImageAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ImageAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ImageAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ImageAnnotationLinkI(ImageAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ImagingEnvironment(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getTemperature: ClassVar[IcePy.Operation] = ...
    _op_setTemperature: ClassVar[IcePy.Operation] = ...
    _op_getAirPressure: ClassVar[IcePy.Operation] = ...
    _op_setAirPressure: ClassVar[IcePy.Operation] = ...
    _op_getHumidity: ClassVar[IcePy.Operation] = ...
    _op_setHumidity: ClassVar[IcePy.Operation] = ...
    _op_getCo2percent: ClassVar[IcePy.Operation] = ...
    _op_setCo2percent: ClassVar[IcePy.Operation] = ...
    _op_getMapAsMap: ClassVar[IcePy.Operation] = ...
    _op_getMap: ClassVar[IcePy.Operation] = ...
    _op_setMap: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _temperature: Incomplete | None = ..., _airPressure: Incomplete | None = ..., _humidity: Incomplete | None = ..., _co2percent: Incomplete | None = ..., _map: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getTemperature(self, current: Incomplete | None = ...): ...
    def setTemperature(self, theTemperature, current: Incomplete | None = ...): ...
    def getAirPressure(self, current: Incomplete | None = ...): ...
    def setAirPressure(self, theAirPressure, current: Incomplete | None = ...): ...
    def getHumidity(self, current: Incomplete | None = ...): ...
    def setHumidity(self, theHumidity, current: Incomplete | None = ...): ...
    def getCo2percent(self, current: Incomplete | None = ...): ...
    def setCo2percent(self, theCo2percent, current: Incomplete | None = ...): ...
    def getMapAsMap(self, current: Incomplete | None = ...): ...
    def getMap(self, current: Incomplete | None = ...): ...
    def setMap(self, theMap, current: Incomplete | None = ...): ...

class ImagingEnvironmentPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getTemperature(self, _ctx: Incomplete | None = ...): ...
    def begin_getTemperature(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTemperature(self, _r): ...
    def setTemperature(self, theTemperature, _ctx: Incomplete | None = ...): ...
    def begin_setTemperature(self, theTemperature, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTemperature(self, _r): ...
    def getAirPressure(self, _ctx: Incomplete | None = ...): ...
    def begin_getAirPressure(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAirPressure(self, _r): ...
    def setAirPressure(self, theAirPressure, _ctx: Incomplete | None = ...): ...
    def begin_setAirPressure(self, theAirPressure, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setAirPressure(self, _r): ...
    def getHumidity(self, _ctx: Incomplete | None = ...): ...
    def begin_getHumidity(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getHumidity(self, _r): ...
    def setHumidity(self, theHumidity, _ctx: Incomplete | None = ...): ...
    def begin_setHumidity(self, theHumidity, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setHumidity(self, _r): ...
    def getCo2percent(self, _ctx: Incomplete | None = ...): ...
    def begin_getCo2percent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCo2percent(self, _r): ...
    def setCo2percent(self, theCo2percent, _ctx: Incomplete | None = ...): ...
    def begin_setCo2percent(self, theCo2percent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCo2percent(self, _r): ...
    def getMapAsMap(self, _ctx: Incomplete | None = ...): ...
    def begin_getMapAsMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMapAsMap(self, _r): ...
    def getMap(self, _ctx: Incomplete | None = ...): ...
    def begin_getMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMap(self, _r): ...
    def setMap(self, theMap, _ctx: Incomplete | None = ...): ...
    def begin_setMap(self, theMap, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMap(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ImagingEnvironmentI(ImagingEnvironment):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        temperature: Incomplete
        airPressure: Incomplete
        humidity: Incomplete
        co2percent: Incomplete
        map: Incomplete
        details: Incomplete
        def __init__(self, _cls, temperature, airPressure, humidity, co2percent, map, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TEMPERATURE: ClassVar[str] = ...
    AIRPRESSURE: ClassVar[str] = ...
    HUMIDITY: ClassVar[str] = ...
    CO2PERCENT: ClassVar[str] = ...
    MAP: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadTemperature(self): ...
    def getTemperature(self, current: Incomplete | None = ...): ...
    def setTemperature(self, _temperature, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAirPressure(self): ...
    def getAirPressure(self, current: Incomplete | None = ...): ...
    def setAirPressure(self, _airPressure, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadHumidity(self): ...
    def getHumidity(self, current: Incomplete | None = ...): ...
    def setHumidity(self, _humidity, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCo2percent(self): ...
    def getCo2percent(self, current: Incomplete | None = ...): ...
    def setCo2percent(self, _co2percent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMap(self): ...
    def getMap(self, current: Incomplete | None = ...): ...
    def setMap(self, _map, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getMapAsMap(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Immersion(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class ImmersionPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ImmersionI(Immersion):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Job(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getUsername: ClassVar[IcePy.Operation] = ...
    _op_setUsername: ClassVar[IcePy.Operation] = ...
    _op_getGroupname: ClassVar[IcePy.Operation] = ...
    _op_setGroupname: ClassVar[IcePy.Operation] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    _op_getMessage: ClassVar[IcePy.Operation] = ...
    _op_setMessage: ClassVar[IcePy.Operation] = ...
    _op_getStatus: ClassVar[IcePy.Operation] = ...
    _op_setStatus: ClassVar[IcePy.Operation] = ...
    _op_getSubmitted: ClassVar[IcePy.Operation] = ...
    _op_setSubmitted: ClassVar[IcePy.Operation] = ...
    _op_getScheduledFor: ClassVar[IcePy.Operation] = ...
    _op_setScheduledFor: ClassVar[IcePy.Operation] = ...
    _op_getStarted: ClassVar[IcePy.Operation] = ...
    _op_setStarted: ClassVar[IcePy.Operation] = ...
    _op_getFinished: ClassVar[IcePy.Operation] = ...
    _op_setFinished: ClassVar[IcePy.Operation] = ...
    _op_unloadOriginalFileLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfOriginalFileLinks: ClassVar[IcePy.Operation] = ...
    _op_copyOriginalFileLinks: ClassVar[IcePy.Operation] = ...
    _op_addJobOriginalFileLink: ClassVar[IcePy.Operation] = ...
    _op_addAllJobOriginalFileLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeJobOriginalFileLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllJobOriginalFileLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearOriginalFileLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadOriginalFileLinks: ClassVar[IcePy.Operation] = ...
    _op_getOriginalFileLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkOriginalFile: ClassVar[IcePy.Operation] = ...
    _op_addJobOriginalFileLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findJobOriginalFileLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkOriginalFile: ClassVar[IcePy.Operation] = ...
    _op_removeJobOriginalFileLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedOriginalFileList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _username: Incomplete | None = ..., _groupname: Incomplete | None = ..., _type: Incomplete | None = ..., _message: Incomplete | None = ..., _status: Incomplete | None = ..., _submitted: Incomplete | None = ..., _scheduledFor: Incomplete | None = ..., _started: Incomplete | None = ..., _finished: Incomplete | None = ..., _originalFileLinksSeq: Incomplete | None = ..., _originalFileLinksLoaded: bool = ..., _originalFileLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, theUsername, current: Incomplete | None = ...): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, theGroupname, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, theMessage, current: Incomplete | None = ...): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, theStatus, current: Incomplete | None = ...): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, theSubmitted, current: Incomplete | None = ...): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, theScheduledFor, current: Incomplete | None = ...): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, theStarted, current: Incomplete | None = ...): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, theFinished, current: Incomplete | None = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def sizeOfOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...

class JobPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getUsername(self, _ctx: Incomplete | None = ...): ...
    def begin_getUsername(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUsername(self, _r): ...
    def setUsername(self, theUsername, _ctx: Incomplete | None = ...): ...
    def begin_setUsername(self, theUsername, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUsername(self, _r): ...
    def getGroupname(self, _ctx: Incomplete | None = ...): ...
    def begin_getGroupname(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGroupname(self, _r): ...
    def setGroupname(self, theGroupname, _ctx: Incomplete | None = ...): ...
    def begin_setGroupname(self, theGroupname, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGroupname(self, _r): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    def getMessage(self, _ctx: Incomplete | None = ...): ...
    def begin_getMessage(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMessage(self, _r): ...
    def setMessage(self, theMessage, _ctx: Incomplete | None = ...): ...
    def begin_setMessage(self, theMessage, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMessage(self, _r): ...
    def getStatus(self, _ctx: Incomplete | None = ...): ...
    def begin_getStatus(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStatus(self, _r): ...
    def setStatus(self, theStatus, _ctx: Incomplete | None = ...): ...
    def begin_setStatus(self, theStatus, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStatus(self, _r): ...
    def getSubmitted(self, _ctx: Incomplete | None = ...): ...
    def begin_getSubmitted(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSubmitted(self, _r): ...
    def setSubmitted(self, theSubmitted, _ctx: Incomplete | None = ...): ...
    def begin_setSubmitted(self, theSubmitted, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSubmitted(self, _r): ...
    def getScheduledFor(self, _ctx: Incomplete | None = ...): ...
    def begin_getScheduledFor(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getScheduledFor(self, _r): ...
    def setScheduledFor(self, theScheduledFor, _ctx: Incomplete | None = ...): ...
    def begin_setScheduledFor(self, theScheduledFor, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setScheduledFor(self, _r): ...
    def getStarted(self, _ctx: Incomplete | None = ...): ...
    def begin_getStarted(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStarted(self, _r): ...
    def setStarted(self, theStarted, _ctx: Incomplete | None = ...): ...
    def begin_setStarted(self, theStarted, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStarted(self, _r): ...
    def getFinished(self, _ctx: Incomplete | None = ...): ...
    def begin_getFinished(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFinished(self, _r): ...
    def setFinished(self, theFinished, _ctx: Incomplete | None = ...): ...
    def begin_setFinished(self, theFinished, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFinished(self, _r): ...
    def unloadOriginalFileLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadOriginalFileLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadOriginalFileLinks(self, _r): ...
    def sizeOfOriginalFileLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfOriginalFileLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfOriginalFileLinks(self, _r): ...
    def copyOriginalFileLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyOriginalFileLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyOriginalFileLinks(self, _r): ...
    def addJobOriginalFileLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addJobOriginalFileLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addJobOriginalFileLink(self, _r): ...
    def addAllJobOriginalFileLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllJobOriginalFileLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllJobOriginalFileLinkSet(self, _r): ...
    def removeJobOriginalFileLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeJobOriginalFileLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeJobOriginalFileLink(self, _r): ...
    def removeAllJobOriginalFileLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllJobOriginalFileLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllJobOriginalFileLinkSet(self, _r): ...
    def clearOriginalFileLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearOriginalFileLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearOriginalFileLinks(self, _r): ...
    def reloadOriginalFileLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadOriginalFileLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadOriginalFileLinks(self, _r): ...
    def getOriginalFileLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getOriginalFileLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getOriginalFileLinksCountPerOwner(self, _r): ...
    def linkOriginalFile(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkOriginalFile(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkOriginalFile(self, _r): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addJobOriginalFileLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addJobOriginalFileLinkToBoth(self, _r): ...
    def findJobOriginalFileLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findJobOriginalFileLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findJobOriginalFileLink(self, _r): ...
    def unlinkOriginalFile(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkOriginalFile(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkOriginalFile(self, _r): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeJobOriginalFileLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeJobOriginalFileLinkFromBoth(self, _r): ...
    def linkedOriginalFileList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedOriginalFileList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedOriginalFileList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ImportJob(Job):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getImageName: ClassVar[IcePy.Operation] = ...
    _op_setImageName: ClassVar[IcePy.Operation] = ...
    _op_getImageDescription: ClassVar[IcePy.Operation] = ...
    _op_setImageDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _username: Incomplete | None = ..., _groupname: Incomplete | None = ..., _type: Incomplete | None = ..., _message: Incomplete | None = ..., _status: Incomplete | None = ..., _submitted: Incomplete | None = ..., _scheduledFor: Incomplete | None = ..., _started: Incomplete | None = ..., _finished: Incomplete | None = ..., _originalFileLinksSeq: Incomplete | None = ..., _originalFileLinksLoaded: bool = ..., _originalFileLinksCountPerOwner: Incomplete | None = ..., _imageName: Incomplete | None = ..., _imageDescription: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getImageName(self, current: Incomplete | None = ...): ...
    def setImageName(self, theImageName, current: Incomplete | None = ...): ...
    def getImageDescription(self, current: Incomplete | None = ...): ...
    def setImageDescription(self, theImageDescription, current: Incomplete | None = ...): ...

class ImportJobPrx(JobPrx):
    def getImageName(self, _ctx: Incomplete | None = ...): ...
    def begin_getImageName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getImageName(self, _r): ...
    def setImageName(self, theImageName, _ctx: Incomplete | None = ...): ...
    def begin_setImageName(self, theImageName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setImageName(self, _r): ...
    def getImageDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getImageDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getImageDescription(self, _r): ...
    def setImageDescription(self, theImageDescription, _ctx: Incomplete | None = ...): ...
    def begin_setImageDescription(self, theImageDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setImageDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ImportJobI(ImportJob):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        imageName: Incomplete
        imageDescription: Incomplete
        username: Incomplete
        groupname: Incomplete
        type: Incomplete
        message: Incomplete
        status: Incomplete
        submitted: Incomplete
        scheduledFor: Incomplete
        started: Incomplete
        finished: Incomplete
        originalFileLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, imageName, imageDescription, username, groupname, type, message, status, submitted, scheduledFor, started, finished, originalFileLinks, details) -> None: ...
        def __getnewargs__(self): ...
    deprecations_warned: ClassVar[set] = ...
    _field_info: ClassVar[FieldInfo] = ...
    IMAGENAME: ClassVar[str] = ...
    IMAGEDESCRIPTION: ClassVar[str] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    @staticmethod
    def warn_of_deprecation(item): ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadImageName(self): ...
    def getImageName(self, current: Incomplete | None = ...): ...
    def setImageName(self, _imageName, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadImageDescription(self): ...
    def getImageDescription(self, current: Incomplete | None = ...): ...
    def setImageDescription(self, _imageDescription, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, _username, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, _groupname, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, _submitted, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, _scheduledFor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, _finished, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class IndexingJob(Job):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _username: Incomplete | None = ..., _groupname: Incomplete | None = ..., _type: Incomplete | None = ..., _message: Incomplete | None = ..., _status: Incomplete | None = ..., _submitted: Incomplete | None = ..., _scheduledFor: Incomplete | None = ..., _started: Incomplete | None = ..., _finished: Incomplete | None = ..., _originalFileLinksSeq: Incomplete | None = ..., _originalFileLinksLoaded: bool = ..., _originalFileLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class IndexingJobPrx(JobPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class IndexingJobI(IndexingJob):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        username: Incomplete
        groupname: Incomplete
        type: Incomplete
        message: Incomplete
        status: Incomplete
        submitted: Incomplete
        scheduledFor: Incomplete
        started: Incomplete
        finished: Incomplete
        originalFileLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, username, groupname, type, message, status, submitted, scheduledFor, started, finished, originalFileLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, _username, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, _groupname, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, _submitted, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, _scheduledFor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, _finished, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Instrument(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getMicroscope: ClassVar[IcePy.Operation] = ...
    _op_setMicroscope: ClassVar[IcePy.Operation] = ...
    _op_unloadDetector: ClassVar[IcePy.Operation] = ...
    _op_sizeOfDetector: ClassVar[IcePy.Operation] = ...
    _op_copyDetector: ClassVar[IcePy.Operation] = ...
    _op_addDetector: ClassVar[IcePy.Operation] = ...
    _op_addAllDetectorSet: ClassVar[IcePy.Operation] = ...
    _op_removeDetector: ClassVar[IcePy.Operation] = ...
    _op_removeAllDetectorSet: ClassVar[IcePy.Operation] = ...
    _op_clearDetector: ClassVar[IcePy.Operation] = ...
    _op_reloadDetector: ClassVar[IcePy.Operation] = ...
    _op_unloadObjective: ClassVar[IcePy.Operation] = ...
    _op_sizeOfObjective: ClassVar[IcePy.Operation] = ...
    _op_copyObjective: ClassVar[IcePy.Operation] = ...
    _op_addObjective: ClassVar[IcePy.Operation] = ...
    _op_addAllObjectiveSet: ClassVar[IcePy.Operation] = ...
    _op_removeObjective: ClassVar[IcePy.Operation] = ...
    _op_removeAllObjectiveSet: ClassVar[IcePy.Operation] = ...
    _op_clearObjective: ClassVar[IcePy.Operation] = ...
    _op_reloadObjective: ClassVar[IcePy.Operation] = ...
    _op_unloadLightSource: ClassVar[IcePy.Operation] = ...
    _op_sizeOfLightSource: ClassVar[IcePy.Operation] = ...
    _op_copyLightSource: ClassVar[IcePy.Operation] = ...
    _op_addLightSource: ClassVar[IcePy.Operation] = ...
    _op_addAllLightSourceSet: ClassVar[IcePy.Operation] = ...
    _op_removeLightSource: ClassVar[IcePy.Operation] = ...
    _op_removeAllLightSourceSet: ClassVar[IcePy.Operation] = ...
    _op_clearLightSource: ClassVar[IcePy.Operation] = ...
    _op_reloadLightSource: ClassVar[IcePy.Operation] = ...
    _op_unloadFilter: ClassVar[IcePy.Operation] = ...
    _op_sizeOfFilter: ClassVar[IcePy.Operation] = ...
    _op_copyFilter: ClassVar[IcePy.Operation] = ...
    _op_addFilter: ClassVar[IcePy.Operation] = ...
    _op_addAllFilterSet: ClassVar[IcePy.Operation] = ...
    _op_removeFilter: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilterSet: ClassVar[IcePy.Operation] = ...
    _op_clearFilter: ClassVar[IcePy.Operation] = ...
    _op_reloadFilter: ClassVar[IcePy.Operation] = ...
    _op_unloadDichroic: ClassVar[IcePy.Operation] = ...
    _op_sizeOfDichroic: ClassVar[IcePy.Operation] = ...
    _op_copyDichroic: ClassVar[IcePy.Operation] = ...
    _op_addDichroic: ClassVar[IcePy.Operation] = ...
    _op_addAllDichroicSet: ClassVar[IcePy.Operation] = ...
    _op_removeDichroic: ClassVar[IcePy.Operation] = ...
    _op_removeAllDichroicSet: ClassVar[IcePy.Operation] = ...
    _op_clearDichroic: ClassVar[IcePy.Operation] = ...
    _op_reloadDichroic: ClassVar[IcePy.Operation] = ...
    _op_unloadFilterSet: ClassVar[IcePy.Operation] = ...
    _op_sizeOfFilterSet: ClassVar[IcePy.Operation] = ...
    _op_copyFilterSet: ClassVar[IcePy.Operation] = ...
    _op_addFilterSet: ClassVar[IcePy.Operation] = ...
    _op_addAllFilterSetSet: ClassVar[IcePy.Operation] = ...
    _op_removeFilterSet: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilterSetSet: ClassVar[IcePy.Operation] = ...
    _op_clearFilterSet: ClassVar[IcePy.Operation] = ...
    _op_reloadFilterSet: ClassVar[IcePy.Operation] = ...
    _op_unloadOtf: ClassVar[IcePy.Operation] = ...
    _op_sizeOfOtf: ClassVar[IcePy.Operation] = ...
    _op_copyOtf: ClassVar[IcePy.Operation] = ...
    _op_addOTF: ClassVar[IcePy.Operation] = ...
    _op_addAllOTFSet: ClassVar[IcePy.Operation] = ...
    _op_removeOTF: ClassVar[IcePy.Operation] = ...
    _op_removeAllOTFSet: ClassVar[IcePy.Operation] = ...
    _op_clearOtf: ClassVar[IcePy.Operation] = ...
    _op_reloadOtf: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addInstrumentAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllInstrumentAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeInstrumentAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllInstrumentAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addInstrumentAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findInstrumentAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeInstrumentAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _microscope: Incomplete | None = ..., _detectorSeq: Incomplete | None = ..., _detectorLoaded: bool = ..., _objectiveSeq: Incomplete | None = ..., _objectiveLoaded: bool = ..., _lightSourceSeq: Incomplete | None = ..., _lightSourceLoaded: bool = ..., _filterSeq: Incomplete | None = ..., _filterLoaded: bool = ..., _dichroicSeq: Incomplete | None = ..., _dichroicLoaded: bool = ..., _filterSetSeq: Incomplete | None = ..., _filterSetLoaded: bool = ..., _otfSeq: Incomplete | None = ..., _otfLoaded: bool = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getMicroscope(self, current: Incomplete | None = ...): ...
    def setMicroscope(self, theMicroscope, current: Incomplete | None = ...): ...
    def unloadDetector(self, current: Incomplete | None = ...): ...
    def sizeOfDetector(self, current: Incomplete | None = ...): ...
    def copyDetector(self, current: Incomplete | None = ...): ...
    def addDetector(self, target, current: Incomplete | None = ...): ...
    def addAllDetectorSet(self, targets, current: Incomplete | None = ...): ...
    def removeDetector(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDetectorSet(self, targets, current: Incomplete | None = ...): ...
    def clearDetector(self, current: Incomplete | None = ...): ...
    def reloadDetector(self, toCopy, current: Incomplete | None = ...): ...
    def unloadObjective(self, current: Incomplete | None = ...): ...
    def sizeOfObjective(self, current: Incomplete | None = ...): ...
    def copyObjective(self, current: Incomplete | None = ...): ...
    def addObjective(self, target, current: Incomplete | None = ...): ...
    def addAllObjectiveSet(self, targets, current: Incomplete | None = ...): ...
    def removeObjective(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllObjectiveSet(self, targets, current: Incomplete | None = ...): ...
    def clearObjective(self, current: Incomplete | None = ...): ...
    def reloadObjective(self, toCopy, current: Incomplete | None = ...): ...
    def unloadLightSource(self, current: Incomplete | None = ...): ...
    def sizeOfLightSource(self, current: Incomplete | None = ...): ...
    def copyLightSource(self, current: Incomplete | None = ...): ...
    def addLightSource(self, target, current: Incomplete | None = ...): ...
    def addAllLightSourceSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSource(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllLightSourceSet(self, targets, current: Incomplete | None = ...): ...
    def clearLightSource(self, current: Incomplete | None = ...): ...
    def reloadLightSource(self, toCopy, current: Incomplete | None = ...): ...
    def unloadFilter(self, current: Incomplete | None = ...): ...
    def sizeOfFilter(self, current: Incomplete | None = ...): ...
    def copyFilter(self, current: Incomplete | None = ...): ...
    def addFilter(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilter(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilterSet(self, targets, current: Incomplete | None = ...): ...
    def clearFilter(self, current: Incomplete | None = ...): ...
    def reloadFilter(self, toCopy, current: Incomplete | None = ...): ...
    def unloadDichroic(self, current: Incomplete | None = ...): ...
    def sizeOfDichroic(self, current: Incomplete | None = ...): ...
    def copyDichroic(self, current: Incomplete | None = ...): ...
    def addDichroic(self, target, current: Incomplete | None = ...): ...
    def addAllDichroicSet(self, targets, current: Incomplete | None = ...): ...
    def removeDichroic(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllDichroicSet(self, targets, current: Incomplete | None = ...): ...
    def clearDichroic(self, current: Incomplete | None = ...): ...
    def reloadDichroic(self, toCopy, current: Incomplete | None = ...): ...
    def unloadFilterSet(self, current: Incomplete | None = ...): ...
    def sizeOfFilterSet(self, current: Incomplete | None = ...): ...
    def copyFilterSet(self, current: Incomplete | None = ...): ...
    def addFilterSet(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSet(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilterSetSet(self, targets, current: Incomplete | None = ...): ...
    def clearFilterSet(self, current: Incomplete | None = ...): ...
    def reloadFilterSet(self, toCopy, current: Incomplete | None = ...): ...
    def unloadOtf(self, current: Incomplete | None = ...): ...
    def sizeOfOtf(self, current: Incomplete | None = ...): ...
    def copyOtf(self, current: Incomplete | None = ...): ...
    def addOTF(self, target, current: Incomplete | None = ...): ...
    def addAllOTFSet(self, targets, current: Incomplete | None = ...): ...
    def removeOTF(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllOTFSet(self, targets, current: Incomplete | None = ...): ...
    def clearOtf(self, current: Incomplete | None = ...): ...
    def reloadOtf(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addInstrumentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllInstrumentAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeInstrumentAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllInstrumentAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addInstrumentAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findInstrumentAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeInstrumentAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class InstrumentPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getMicroscope(self, _ctx: Incomplete | None = ...): ...
    def begin_getMicroscope(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMicroscope(self, _r): ...
    def setMicroscope(self, theMicroscope, _ctx: Incomplete | None = ...): ...
    def begin_setMicroscope(self, theMicroscope, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMicroscope(self, _r): ...
    def unloadDetector(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadDetector(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadDetector(self, _r): ...
    def sizeOfDetector(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfDetector(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfDetector(self, _r): ...
    def copyDetector(self, _ctx: Incomplete | None = ...): ...
    def begin_copyDetector(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyDetector(self, _r): ...
    def addDetector(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addDetector(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDetector(self, _r): ...
    def addAllDetectorSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllDetectorSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllDetectorSet(self, _r): ...
    def removeDetector(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeDetector(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDetector(self, _r): ...
    def removeAllDetectorSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllDetectorSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllDetectorSet(self, _r): ...
    def clearDetector(self, _ctx: Incomplete | None = ...): ...
    def begin_clearDetector(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearDetector(self, _r): ...
    def reloadDetector(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadDetector(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadDetector(self, _r): ...
    def unloadObjective(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadObjective(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadObjective(self, _r): ...
    def sizeOfObjective(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfObjective(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfObjective(self, _r): ...
    def copyObjective(self, _ctx: Incomplete | None = ...): ...
    def begin_copyObjective(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyObjective(self, _r): ...
    def addObjective(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addObjective(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addObjective(self, _r): ...
    def addAllObjectiveSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllObjectiveSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllObjectiveSet(self, _r): ...
    def removeObjective(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeObjective(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeObjective(self, _r): ...
    def removeAllObjectiveSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllObjectiveSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllObjectiveSet(self, _r): ...
    def clearObjective(self, _ctx: Incomplete | None = ...): ...
    def begin_clearObjective(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearObjective(self, _r): ...
    def reloadObjective(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadObjective(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadObjective(self, _r): ...
    def unloadLightSource(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadLightSource(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadLightSource(self, _r): ...
    def sizeOfLightSource(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfLightSource(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfLightSource(self, _r): ...
    def copyLightSource(self, _ctx: Incomplete | None = ...): ...
    def begin_copyLightSource(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyLightSource(self, _r): ...
    def addLightSource(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addLightSource(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addLightSource(self, _r): ...
    def addAllLightSourceSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllLightSourceSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllLightSourceSet(self, _r): ...
    def removeLightSource(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeLightSource(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeLightSource(self, _r): ...
    def removeAllLightSourceSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllLightSourceSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllLightSourceSet(self, _r): ...
    def clearLightSource(self, _ctx: Incomplete | None = ...): ...
    def begin_clearLightSource(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearLightSource(self, _r): ...
    def reloadLightSource(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadLightSource(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadLightSource(self, _r): ...
    def unloadFilter(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadFilter(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadFilter(self, _r): ...
    def sizeOfFilter(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfFilter(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfFilter(self, _r): ...
    def copyFilter(self, _ctx: Incomplete | None = ...): ...
    def begin_copyFilter(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyFilter(self, _r): ...
    def addFilter(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilter(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilter(self, _r): ...
    def addAllFilterSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilterSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilterSet(self, _r): ...
    def removeFilter(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilter(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilter(self, _r): ...
    def removeAllFilterSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilterSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilterSet(self, _r): ...
    def clearFilter(self, _ctx: Incomplete | None = ...): ...
    def begin_clearFilter(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearFilter(self, _r): ...
    def reloadFilter(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadFilter(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadFilter(self, _r): ...
    def unloadDichroic(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadDichroic(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadDichroic(self, _r): ...
    def sizeOfDichroic(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfDichroic(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfDichroic(self, _r): ...
    def copyDichroic(self, _ctx: Incomplete | None = ...): ...
    def begin_copyDichroic(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyDichroic(self, _r): ...
    def addDichroic(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addDichroic(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addDichroic(self, _r): ...
    def addAllDichroicSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllDichroicSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllDichroicSet(self, _r): ...
    def removeDichroic(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeDichroic(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeDichroic(self, _r): ...
    def removeAllDichroicSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllDichroicSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllDichroicSet(self, _r): ...
    def clearDichroic(self, _ctx: Incomplete | None = ...): ...
    def begin_clearDichroic(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearDichroic(self, _r): ...
    def reloadDichroic(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadDichroic(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadDichroic(self, _r): ...
    def unloadFilterSet(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadFilterSet(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadFilterSet(self, _r): ...
    def sizeOfFilterSet(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfFilterSet(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfFilterSet(self, _r): ...
    def copyFilterSet(self, _ctx: Incomplete | None = ...): ...
    def begin_copyFilterSet(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyFilterSet(self, _r): ...
    def addFilterSet(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilterSet(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilterSet(self, _r): ...
    def addAllFilterSetSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilterSetSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilterSetSet(self, _r): ...
    def removeFilterSet(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilterSet(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilterSet(self, _r): ...
    def removeAllFilterSetSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilterSetSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilterSetSet(self, _r): ...
    def clearFilterSet(self, _ctx: Incomplete | None = ...): ...
    def begin_clearFilterSet(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearFilterSet(self, _r): ...
    def reloadFilterSet(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadFilterSet(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadFilterSet(self, _r): ...
    def unloadOtf(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadOtf(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadOtf(self, _r): ...
    def sizeOfOtf(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfOtf(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfOtf(self, _r): ...
    def copyOtf(self, _ctx: Incomplete | None = ...): ...
    def begin_copyOtf(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyOtf(self, _r): ...
    def addOTF(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addOTF(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addOTF(self, _r): ...
    def addAllOTFSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllOTFSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllOTFSet(self, _r): ...
    def removeOTF(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeOTF(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeOTF(self, _r): ...
    def removeAllOTFSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllOTFSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllOTFSet(self, _r): ...
    def clearOtf(self, _ctx: Incomplete | None = ...): ...
    def begin_clearOtf(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearOtf(self, _r): ...
    def reloadOtf(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadOtf(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadOtf(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addInstrumentAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addInstrumentAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addInstrumentAnnotationLink(self, _r): ...
    def addAllInstrumentAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllInstrumentAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllInstrumentAnnotationLinkSet(self, _r): ...
    def removeInstrumentAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeInstrumentAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeInstrumentAnnotationLink(self, _r): ...
    def removeAllInstrumentAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllInstrumentAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllInstrumentAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addInstrumentAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addInstrumentAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addInstrumentAnnotationLinkToBoth(self, _r): ...
    def findInstrumentAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findInstrumentAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findInstrumentAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeInstrumentAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeInstrumentAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeInstrumentAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class InstrumentI(Instrument):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        microscope: Incomplete
        detector: Incomplete
        objective: Incomplete
        lightSource: Incomplete
        filter: Incomplete
        dichroic: Incomplete
        filterSet: Incomplete
        otf: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, microscope, detector, objective, lightSource, filter, dichroic, filterSet, otf, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    MICROSCOPE: ClassVar[str] = ...
    DETECTOR: ClassVar[str] = ...
    OBJECTIVE: ClassVar[str] = ...
    LIGHTSOURCE: ClassVar[str] = ...
    FILTER: ClassVar[str] = ...
    DICHROIC: ClassVar[str] = ...
    FILTERSET: ClassVar[str] = ...
    OTF: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadMicroscope(self): ...
    def getMicroscope(self, current: Incomplete | None = ...): ...
    def setMicroscope(self, _microscope, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDetector(self, current: Incomplete | None = ...): ...
    def isDetectorLoaded(self): ...
    def sizeOfDetector(self, current: Incomplete | None = ...): ...
    def copyDetector(self, current: Incomplete | None = ...): ...
    def iterateDetector(self): ...
    def addDetector(self, target, current: Incomplete | None = ...): ...
    def addAllDetectorSet(self, targets, current: Incomplete | None = ...): ...
    def removeDetector(self, target, current: Incomplete | None = ...): ...
    def removeAllDetectorSet(self, targets, current: Incomplete | None = ...): ...
    def clearDetector(self, current: Incomplete | None = ...): ...
    def reloadDetector(self, toCopy, current: Incomplete | None = ...): ...
    def unloadObjective(self, current: Incomplete | None = ...): ...
    def isObjectiveLoaded(self): ...
    def sizeOfObjective(self, current: Incomplete | None = ...): ...
    def copyObjective(self, current: Incomplete | None = ...): ...
    def iterateObjective(self): ...
    def addObjective(self, target, current: Incomplete | None = ...): ...
    def addAllObjectiveSet(self, targets, current: Incomplete | None = ...): ...
    def removeObjective(self, target, current: Incomplete | None = ...): ...
    def removeAllObjectiveSet(self, targets, current: Incomplete | None = ...): ...
    def clearObjective(self, current: Incomplete | None = ...): ...
    def reloadObjective(self, toCopy, current: Incomplete | None = ...): ...
    def unloadLightSource(self, current: Incomplete | None = ...): ...
    def isLightSourceLoaded(self): ...
    def sizeOfLightSource(self, current: Incomplete | None = ...): ...
    def copyLightSource(self, current: Incomplete | None = ...): ...
    def iterateLightSource(self): ...
    def addLightSource(self, target, current: Incomplete | None = ...): ...
    def addAllLightSourceSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSource(self, target, current: Incomplete | None = ...): ...
    def removeAllLightSourceSet(self, targets, current: Incomplete | None = ...): ...
    def clearLightSource(self, current: Incomplete | None = ...): ...
    def reloadLightSource(self, toCopy, current: Incomplete | None = ...): ...
    def unloadFilter(self, current: Incomplete | None = ...): ...
    def isFilterLoaded(self): ...
    def sizeOfFilter(self, current: Incomplete | None = ...): ...
    def copyFilter(self, current: Incomplete | None = ...): ...
    def iterateFilter(self): ...
    def addFilter(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilter(self, target, current: Incomplete | None = ...): ...
    def removeAllFilterSet(self, targets, current: Incomplete | None = ...): ...
    def clearFilter(self, current: Incomplete | None = ...): ...
    def reloadFilter(self, toCopy, current: Incomplete | None = ...): ...
    def unloadDichroic(self, current: Incomplete | None = ...): ...
    def isDichroicLoaded(self): ...
    def sizeOfDichroic(self, current: Incomplete | None = ...): ...
    def copyDichroic(self, current: Incomplete | None = ...): ...
    def iterateDichroic(self): ...
    def addDichroic(self, target, current: Incomplete | None = ...): ...
    def addAllDichroicSet(self, targets, current: Incomplete | None = ...): ...
    def removeDichroic(self, target, current: Incomplete | None = ...): ...
    def removeAllDichroicSet(self, targets, current: Incomplete | None = ...): ...
    def clearDichroic(self, current: Incomplete | None = ...): ...
    def reloadDichroic(self, toCopy, current: Incomplete | None = ...): ...
    def unloadFilterSet(self, current: Incomplete | None = ...): ...
    def isFilterSetLoaded(self): ...
    def sizeOfFilterSet(self, current: Incomplete | None = ...): ...
    def copyFilterSet(self, current: Incomplete | None = ...): ...
    def iterateFilterSet(self): ...
    def addFilterSet(self, target, current: Incomplete | None = ...): ...
    def addAllFilterSetSet(self, targets, current: Incomplete | None = ...): ...
    def removeFilterSet(self, target, current: Incomplete | None = ...): ...
    def removeAllFilterSetSet(self, targets, current: Incomplete | None = ...): ...
    def clearFilterSet(self, current: Incomplete | None = ...): ...
    def reloadFilterSet(self, toCopy, current: Incomplete | None = ...): ...
    def unloadOtf(self, current: Incomplete | None = ...): ...
    def isOtfLoaded(self): ...
    def sizeOfOtf(self, current: Incomplete | None = ...): ...
    def copyOtf(self, current: Incomplete | None = ...): ...
    def iterateOtf(self): ...
    def addOTF(self, target, current: Incomplete | None = ...): ...
    def addAllOTFSet(self, targets, current: Incomplete | None = ...): ...
    def removeOTF(self, target, current: Incomplete | None = ...): ...
    def removeAllOTFSet(self, targets, current: Incomplete | None = ...): ...
    def clearOtf(self, current: Incomplete | None = ...): ...
    def reloadOtf(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addInstrumentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllInstrumentAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeInstrumentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllInstrumentAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addInstrumentAnnotationLinkToBoth(self, link, bothSides): ...
    def findInstrumentAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeInstrumentAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class InstrumentAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class InstrumentAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class InstrumentAnnotationLinkI(InstrumentAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class IntegrityCheckJob(Job):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _username: Incomplete | None = ..., _groupname: Incomplete | None = ..., _type: Incomplete | None = ..., _message: Incomplete | None = ..., _status: Incomplete | None = ..., _submitted: Incomplete | None = ..., _scheduledFor: Incomplete | None = ..., _started: Incomplete | None = ..., _finished: Incomplete | None = ..., _originalFileLinksSeq: Incomplete | None = ..., _originalFileLinksLoaded: bool = ..., _originalFileLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class IntegrityCheckJobPrx(JobPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class IntegrityCheckJobI(IntegrityCheckJob):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        username: Incomplete
        groupname: Incomplete
        type: Incomplete
        message: Incomplete
        status: Incomplete
        submitted: Incomplete
        scheduledFor: Incomplete
        started: Incomplete
        finished: Incomplete
        originalFileLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, username, groupname, type, message, status, submitted, scheduledFor, started, finished, originalFileLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, _username, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, _groupname, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, _submitted, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, _scheduledFor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, _finished, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class JobOriginalFileLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class JobOriginalFileLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class JobOriginalFileLinkI(JobOriginalFileLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class JobStatus(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class JobStatusPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class JobStatusI(JobStatus):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Label(Shape):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getX: ClassVar[IcePy.Operation] = ...
    _op_setX: ClassVar[IcePy.Operation] = ...
    _op_getY: ClassVar[IcePy.Operation] = ...
    _op_setY: ClassVar[IcePy.Operation] = ...
    _op_getTextValue: ClassVar[IcePy.Operation] = ...
    _op_setTextValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theT: Incomplete | None = ..., _theC: Incomplete | None = ..., _roi: Incomplete | None = ..., _locked: Incomplete | None = ..., _transform: Incomplete | None = ..., _fillColor: Incomplete | None = ..., _fillRule: Incomplete | None = ..., _strokeColor: Incomplete | None = ..., _strokeDashArray: Incomplete | None = ..., _strokeWidth: Incomplete | None = ..., _fontFamily: Incomplete | None = ..., _fontSize: Incomplete | None = ..., _fontStyle: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _x: Incomplete | None = ..., _y: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, theX, current: Incomplete | None = ...): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, theY, current: Incomplete | None = ...): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, theTextValue, current: Incomplete | None = ...): ...

class LabelPrx(ShapePrx):
    def getX(self, _ctx: Incomplete | None = ...): ...
    def begin_getX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getX(self, _r): ...
    def setX(self, theX, _ctx: Incomplete | None = ...): ...
    def begin_setX(self, theX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setX(self, _r): ...
    def getY(self, _ctx: Incomplete | None = ...): ...
    def begin_getY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getY(self, _r): ...
    def setY(self, theY, _ctx: Incomplete | None = ...): ...
    def begin_setY(self, theY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setY(self, _r): ...
    def getTextValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTextValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTextValue(self, _r): ...
    def setTextValue(self, theTextValue, _ctx: Incomplete | None = ...): ...
    def begin_setTextValue(self, theTextValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTextValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LabelI(Label):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        x: Incomplete
        y: Incomplete
        textValue: Incomplete
        theZ: Incomplete
        theT: Incomplete
        theC: Incomplete
        roi: Incomplete
        locked: Incomplete
        transform: Incomplete
        fillColor: Incomplete
        fillRule: Incomplete
        strokeColor: Incomplete
        strokeDashArray: Incomplete
        strokeWidth: Incomplete
        fontFamily: Incomplete
        fontSize: Incomplete
        fontStyle: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, x, y, textValue, theZ, theT, theC, roi, locked, transform, fillColor, fillRule, strokeColor, strokeDashArray, strokeWidth, fontFamily, fontSize, fontStyle, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    X: ClassVar[str] = ...
    Y: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadX(self): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, _x, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY(self): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, _y, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, _locked, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, _transform, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Laser(LightSource):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    _op_getLaserMedium: ClassVar[IcePy.Operation] = ...
    _op_setLaserMedium: ClassVar[IcePy.Operation] = ...
    _op_getFrequencyMultiplication: ClassVar[IcePy.Operation] = ...
    _op_setFrequencyMultiplication: ClassVar[IcePy.Operation] = ...
    _op_getTuneable: ClassVar[IcePy.Operation] = ...
    _op_setTuneable: ClassVar[IcePy.Operation] = ...
    _op_getPulse: ClassVar[IcePy.Operation] = ...
    _op_setPulse: ClassVar[IcePy.Operation] = ...
    _op_getWavelength: ClassVar[IcePy.Operation] = ...
    _op_setWavelength: ClassVar[IcePy.Operation] = ...
    _op_getPockelCell: ClassVar[IcePy.Operation] = ...
    _op_setPockelCell: ClassVar[IcePy.Operation] = ...
    _op_getPump: ClassVar[IcePy.Operation] = ...
    _op_setPump: ClassVar[IcePy.Operation] = ...
    _op_getRepetitionRate: ClassVar[IcePy.Operation] = ...
    _op_setRepetitionRate: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _power: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _instrument: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _type: Incomplete | None = ..., _laserMedium: Incomplete | None = ..., _frequencyMultiplication: Incomplete | None = ..., _tuneable: Incomplete | None = ..., _pulse: Incomplete | None = ..., _wavelength: Incomplete | None = ..., _pockelCell: Incomplete | None = ..., _pump: Incomplete | None = ..., _repetitionRate: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getLaserMedium(self, current: Incomplete | None = ...): ...
    def setLaserMedium(self, theLaserMedium, current: Incomplete | None = ...): ...
    def getFrequencyMultiplication(self, current: Incomplete | None = ...): ...
    def setFrequencyMultiplication(self, theFrequencyMultiplication, current: Incomplete | None = ...): ...
    def getTuneable(self, current: Incomplete | None = ...): ...
    def setTuneable(self, theTuneable, current: Incomplete | None = ...): ...
    def getPulse(self, current: Incomplete | None = ...): ...
    def setPulse(self, thePulse, current: Incomplete | None = ...): ...
    def getWavelength(self, current: Incomplete | None = ...): ...
    def setWavelength(self, theWavelength, current: Incomplete | None = ...): ...
    def getPockelCell(self, current: Incomplete | None = ...): ...
    def setPockelCell(self, thePockelCell, current: Incomplete | None = ...): ...
    def getPump(self, current: Incomplete | None = ...): ...
    def setPump(self, thePump, current: Incomplete | None = ...): ...
    def getRepetitionRate(self, current: Incomplete | None = ...): ...
    def setRepetitionRate(self, theRepetitionRate, current: Incomplete | None = ...): ...

class LaserPrx(LightSourcePrx):
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    def getLaserMedium(self, _ctx: Incomplete | None = ...): ...
    def begin_getLaserMedium(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLaserMedium(self, _r): ...
    def setLaserMedium(self, theLaserMedium, _ctx: Incomplete | None = ...): ...
    def begin_setLaserMedium(self, theLaserMedium, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLaserMedium(self, _r): ...
    def getFrequencyMultiplication(self, _ctx: Incomplete | None = ...): ...
    def begin_getFrequencyMultiplication(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFrequencyMultiplication(self, _r): ...
    def setFrequencyMultiplication(self, theFrequencyMultiplication, _ctx: Incomplete | None = ...): ...
    def begin_setFrequencyMultiplication(self, theFrequencyMultiplication, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFrequencyMultiplication(self, _r): ...
    def getTuneable(self, _ctx: Incomplete | None = ...): ...
    def begin_getTuneable(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTuneable(self, _r): ...
    def setTuneable(self, theTuneable, _ctx: Incomplete | None = ...): ...
    def begin_setTuneable(self, theTuneable, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTuneable(self, _r): ...
    def getPulse(self, _ctx: Incomplete | None = ...): ...
    def begin_getPulse(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPulse(self, _r): ...
    def setPulse(self, thePulse, _ctx: Incomplete | None = ...): ...
    def begin_setPulse(self, thePulse, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPulse(self, _r): ...
    def getWavelength(self, _ctx: Incomplete | None = ...): ...
    def begin_getWavelength(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWavelength(self, _r): ...
    def setWavelength(self, theWavelength, _ctx: Incomplete | None = ...): ...
    def begin_setWavelength(self, theWavelength, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWavelength(self, _r): ...
    def getPockelCell(self, _ctx: Incomplete | None = ...): ...
    def begin_getPockelCell(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPockelCell(self, _r): ...
    def setPockelCell(self, thePockelCell, _ctx: Incomplete | None = ...): ...
    def begin_setPockelCell(self, thePockelCell, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPockelCell(self, _r): ...
    def getPump(self, _ctx: Incomplete | None = ...): ...
    def begin_getPump(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPump(self, _r): ...
    def setPump(self, thePump, _ctx: Incomplete | None = ...): ...
    def begin_setPump(self, thePump, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPump(self, _r): ...
    def getRepetitionRate(self, _ctx: Incomplete | None = ...): ...
    def begin_getRepetitionRate(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRepetitionRate(self, _r): ...
    def setRepetitionRate(self, theRepetitionRate, _ctx: Incomplete | None = ...): ...
    def begin_setRepetitionRate(self, theRepetitionRate, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRepetitionRate(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LaserI(Laser):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        type: Incomplete
        laserMedium: Incomplete
        frequencyMultiplication: Incomplete
        tuneable: Incomplete
        pulse: Incomplete
        wavelength: Incomplete
        pockelCell: Incomplete
        pump: Incomplete
        repetitionRate: Incomplete
        manufacturer: Incomplete
        model: Incomplete
        power: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        instrument: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, type, laserMedium, frequencyMultiplication, tuneable, pulse, wavelength, pockelCell, pump, repetitionRate, manufacturer, model, power, lotNumber, serialNumber, instrument, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TYPE: ClassVar[str] = ...
    LASERMEDIUM: ClassVar[str] = ...
    FREQUENCYMULTIPLICATION: ClassVar[str] = ...
    TUNEABLE: ClassVar[str] = ...
    PULSE: ClassVar[str] = ...
    WAVELENGTH: ClassVar[str] = ...
    POCKELCELL: ClassVar[str] = ...
    PUMP: ClassVar[str] = ...
    REPETITIONRATE: ClassVar[str] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    POWER: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLaserMedium(self): ...
    def getLaserMedium(self, current: Incomplete | None = ...): ...
    def setLaserMedium(self, _laserMedium, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFrequencyMultiplication(self): ...
    def getFrequencyMultiplication(self, current: Incomplete | None = ...): ...
    def setFrequencyMultiplication(self, _frequencyMultiplication, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTuneable(self): ...
    def getTuneable(self, current: Incomplete | None = ...): ...
    def setTuneable(self, _tuneable, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPulse(self): ...
    def getPulse(self, current: Incomplete | None = ...): ...
    def setPulse(self, _pulse, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWavelength(self): ...
    def getWavelength(self, current: Incomplete | None = ...): ...
    def setWavelength(self, _wavelength, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPockelCell(self): ...
    def getPockelCell(self, current: Incomplete | None = ...): ...
    def setPockelCell(self, _pockelCell, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPump(self): ...
    def getPump(self, current: Incomplete | None = ...): ...
    def setPump(self, _pump, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRepetitionRate(self): ...
    def getRepetitionRate(self, current: Incomplete | None = ...): ...
    def setRepetitionRate(self, _repetitionRate, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPower(self): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, _power, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightSourceAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LaserMedium(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class LaserMediumPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LaserMediumI(LaserMedium):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LaserType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class LaserTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LaserTypeI(LaserType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LightEmittingDiode(LightSource):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _power: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _instrument: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LightEmittingDiodePrx(LightSourcePrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LightEmittingDiodeI(LightEmittingDiode):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        manufacturer: Incomplete
        model: Incomplete
        power: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        instrument: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, manufacturer, model, power, lotNumber, serialNumber, instrument, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    POWER: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPower(self): ...
    def getPower(self, current: Incomplete | None = ...): ...
    def setPower(self, _power, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllLightSourceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addLightSourceAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightSourceAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightSourceAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LightPath(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_unloadExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_sizeOfExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_copyExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addLightPathExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addAllLightPathExcitationFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeLightPathExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllLightPathExcitationFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_reloadExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_getLightPathExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_setLightPathExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryLightPathExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryLightPathExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_getExcitationFilterLinkCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkExcitationFilter: ClassVar[IcePy.Operation] = ...
    _op_addLightPathExcitationFilterLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findLightPathExcitationFilterLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkExcitationFilter: ClassVar[IcePy.Operation] = ...
    _op_removeLightPathExcitationFilterLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedExcitationFilterList: ClassVar[IcePy.Operation] = ...
    _op_getDichroic: ClassVar[IcePy.Operation] = ...
    _op_setDichroic: ClassVar[IcePy.Operation] = ...
    _op_unloadEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_sizeOfEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_copyEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addLightPathEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_addAllLightPathEmissionFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeLightPathEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllLightPathEmissionFilterLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_reloadEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_getEmissionFilterLinkCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkEmissionFilter: ClassVar[IcePy.Operation] = ...
    _op_addLightPathEmissionFilterLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findLightPathEmissionFilterLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkEmissionFilter: ClassVar[IcePy.Operation] = ...
    _op_removeLightPathEmissionFilterLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedEmissionFilterList: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addLightPathAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllLightPathAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeLightPathAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllLightPathAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addLightPathAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findLightPathAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeLightPathAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _excitationFilterLinkSeq: Incomplete | None = ..., _excitationFilterLinkLoaded: bool = ..., _excitationFilterLinkCountPerOwner: Incomplete | None = ..., _dichroic: Incomplete | None = ..., _emissionFilterLinkSeq: Incomplete | None = ..., _emissionFilterLinkLoaded: bool = ..., _emissionFilterLinkCountPerOwner: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def addLightPathExcitationFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightPathExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightPathExcitationFilterLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllLightPathExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getLightPathExcitationFilterLink(self, index, current: Incomplete | None = ...): ...
    def setLightPathExcitationFilterLink(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryLightPathExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def setPrimaryLightPathExcitationFilterLink(self, theElement, current: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addLightPathExcitationFilterLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findLightPathExcitationFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathExcitationFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def getDichroic(self, current: Incomplete | None = ...): ...
    def setDichroic(self, theDichroic, current: Incomplete | None = ...): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def addLightPathEmissionFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightPathEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightPathEmissionFilterLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllLightPathEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addLightPathEmissionFilterLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findLightPathEmissionFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathEmissionFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addLightPathAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightPathAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightPathAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllLightPathAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addLightPathAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findLightPathAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class LightPathPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def unloadExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadExcitationFilterLink(self, _r): ...
    def sizeOfExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfExcitationFilterLink(self, _r): ...
    def copyExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_copyExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyExcitationFilterLink(self, _r): ...
    def addLightPathExcitationFilterLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addLightPathExcitationFilterLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addLightPathExcitationFilterLink(self, _r): ...
    def addAllLightPathExcitationFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllLightPathExcitationFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllLightPathExcitationFilterLinkSet(self, _r): ...
    def removeLightPathExcitationFilterLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeLightPathExcitationFilterLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeLightPathExcitationFilterLink(self, _r): ...
    def removeAllLightPathExcitationFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllLightPathExcitationFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllLightPathExcitationFilterLinkSet(self, _r): ...
    def clearExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_clearExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearExcitationFilterLink(self, _r): ...
    def reloadExcitationFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadExcitationFilterLink(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadExcitationFilterLink(self, _r): ...
    def getLightPathExcitationFilterLink(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getLightPathExcitationFilterLink(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLightPathExcitationFilterLink(self, _r): ...
    def setLightPathExcitationFilterLink(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setLightPathExcitationFilterLink(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLightPathExcitationFilterLink(self, _r): ...
    def getPrimaryLightPathExcitationFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryLightPathExcitationFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryLightPathExcitationFilterLink(self, _r): ...
    def setPrimaryLightPathExcitationFilterLink(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryLightPathExcitationFilterLink(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryLightPathExcitationFilterLink(self, _r): ...
    def getExcitationFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getExcitationFilterLinkCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExcitationFilterLinkCountPerOwner(self, _r): ...
    def linkExcitationFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkExcitationFilter(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkExcitationFilter(self, _r): ...
    def addLightPathExcitationFilterLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addLightPathExcitationFilterLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addLightPathExcitationFilterLinkToBoth(self, _r): ...
    def findLightPathExcitationFilterLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findLightPathExcitationFilterLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findLightPathExcitationFilterLink(self, _r): ...
    def unlinkExcitationFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkExcitationFilter(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkExcitationFilter(self, _r): ...
    def removeLightPathExcitationFilterLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeLightPathExcitationFilterLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeLightPathExcitationFilterLinkFromBoth(self, _r): ...
    def linkedExcitationFilterList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedExcitationFilterList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedExcitationFilterList(self, _r): ...
    def getDichroic(self, _ctx: Incomplete | None = ...): ...
    def begin_getDichroic(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDichroic(self, _r): ...
    def setDichroic(self, theDichroic, _ctx: Incomplete | None = ...): ...
    def begin_setDichroic(self, theDichroic, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDichroic(self, _r): ...
    def unloadEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadEmissionFilterLink(self, _r): ...
    def sizeOfEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfEmissionFilterLink(self, _r): ...
    def copyEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_copyEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyEmissionFilterLink(self, _r): ...
    def addLightPathEmissionFilterLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addLightPathEmissionFilterLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addLightPathEmissionFilterLink(self, _r): ...
    def addAllLightPathEmissionFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllLightPathEmissionFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllLightPathEmissionFilterLinkSet(self, _r): ...
    def removeLightPathEmissionFilterLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeLightPathEmissionFilterLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeLightPathEmissionFilterLink(self, _r): ...
    def removeAllLightPathEmissionFilterLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllLightPathEmissionFilterLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllLightPathEmissionFilterLinkSet(self, _r): ...
    def clearEmissionFilterLink(self, _ctx: Incomplete | None = ...): ...
    def begin_clearEmissionFilterLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearEmissionFilterLink(self, _r): ...
    def reloadEmissionFilterLink(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadEmissionFilterLink(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadEmissionFilterLink(self, _r): ...
    def getEmissionFilterLinkCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getEmissionFilterLinkCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEmissionFilterLinkCountPerOwner(self, _r): ...
    def linkEmissionFilter(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkEmissionFilter(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkEmissionFilter(self, _r): ...
    def addLightPathEmissionFilterLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addLightPathEmissionFilterLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addLightPathEmissionFilterLinkToBoth(self, _r): ...
    def findLightPathEmissionFilterLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findLightPathEmissionFilterLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findLightPathEmissionFilterLink(self, _r): ...
    def unlinkEmissionFilter(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkEmissionFilter(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkEmissionFilter(self, _r): ...
    def removeLightPathEmissionFilterLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeLightPathEmissionFilterLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeLightPathEmissionFilterLinkFromBoth(self, _r): ...
    def linkedEmissionFilterList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedEmissionFilterList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedEmissionFilterList(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addLightPathAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addLightPathAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addLightPathAnnotationLink(self, _r): ...
    def addAllLightPathAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllLightPathAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllLightPathAnnotationLinkSet(self, _r): ...
    def removeLightPathAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeLightPathAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeLightPathAnnotationLink(self, _r): ...
    def removeAllLightPathAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllLightPathAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllLightPathAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addLightPathAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addLightPathAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addLightPathAnnotationLinkToBoth(self, _r): ...
    def findLightPathAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findLightPathAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findLightPathAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeLightPathAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeLightPathAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeLightPathAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LightPathI(LightPath):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        excitationFilterLink: Incomplete
        dichroic: Incomplete
        emissionFilterLink: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, excitationFilterLink, dichroic, emissionFilterLink, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    EXCITATIONFILTERLINK: ClassVar[str] = ...
    DICHROIC: ClassVar[str] = ...
    EMISSIONFILTERLINK: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def isExcitationFilterLinkLoaded(self): ...
    def sizeOfExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def copyExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def iterateExcitationFilterLink(self): ...
    def addLightPathExcitationFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightPathExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightPathExcitationFilterLink(self, target, current: Incomplete | None = ...): ...
    def removeAllLightPathExcitationFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def reloadExcitationFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getLightPathExcitationFilterLink(self, index, current: Incomplete | None = ...): ...
    def setLightPathExcitationFilterLink(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryLightPathExcitationFilterLink(self, current: Incomplete | None = ...): ...
    def setPrimaryLightPathExcitationFilterLink(self, element, current: Incomplete | None = ...): ...
    def getExcitationFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkExcitationFilter(self, addition, current: Incomplete | None = ...): ...
    def addLightPathExcitationFilterLinkToBoth(self, link, bothSides): ...
    def findLightPathExcitationFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkExcitationFilter(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathExcitationFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedExcitationFilterList(self, current: Incomplete | None = ...): ...
    def unloadDichroic(self): ...
    def getDichroic(self, current: Incomplete | None = ...): ...
    def setDichroic(self, _dichroic, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def isEmissionFilterLinkLoaded(self): ...
    def sizeOfEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def copyEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def iterateEmissionFilterLink(self): ...
    def addLightPathEmissionFilterLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightPathEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightPathEmissionFilterLink(self, target, current: Incomplete | None = ...): ...
    def removeAllLightPathEmissionFilterLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearEmissionFilterLink(self, current: Incomplete | None = ...): ...
    def reloadEmissionFilterLink(self, toCopy, current: Incomplete | None = ...): ...
    def getEmissionFilterLinkCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkEmissionFilter(self, addition, current: Incomplete | None = ...): ...
    def addLightPathEmissionFilterLinkToBoth(self, link, bothSides): ...
    def findLightPathEmissionFilterLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkEmissionFilter(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathEmissionFilterLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedEmissionFilterList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addLightPathAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllLightPathAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightPathAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllLightPathAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addLightPathAnnotationLinkToBoth(self, link, bothSides): ...
    def findLightPathAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeLightPathAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LightPathAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class LightPathAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LightPathAnnotationLinkI(LightPathAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LightPathEmissionFilterLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class LightPathEmissionFilterLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LightPathEmissionFilterLinkI(LightPathEmissionFilterLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LightPathExcitationFilterLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class LightPathExcitationFilterLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LightPathExcitationFilterLinkI(LightPathExcitationFilterLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LightSettings(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getAttenuation: ClassVar[IcePy.Operation] = ...
    _op_setAttenuation: ClassVar[IcePy.Operation] = ...
    _op_getWavelength: ClassVar[IcePy.Operation] = ...
    _op_setWavelength: ClassVar[IcePy.Operation] = ...
    _op_getLightSource: ClassVar[IcePy.Operation] = ...
    _op_setLightSource: ClassVar[IcePy.Operation] = ...
    _op_getMicrobeamManipulation: ClassVar[IcePy.Operation] = ...
    _op_setMicrobeamManipulation: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _attenuation: Incomplete | None = ..., _wavelength: Incomplete | None = ..., _lightSource: Incomplete | None = ..., _microbeamManipulation: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getAttenuation(self, current: Incomplete | None = ...): ...
    def setAttenuation(self, theAttenuation, current: Incomplete | None = ...): ...
    def getWavelength(self, current: Incomplete | None = ...): ...
    def setWavelength(self, theWavelength, current: Incomplete | None = ...): ...
    def getLightSource(self, current: Incomplete | None = ...): ...
    def setLightSource(self, theLightSource, current: Incomplete | None = ...): ...
    def getMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def setMicrobeamManipulation(self, theMicrobeamManipulation, current: Incomplete | None = ...): ...

class LightSettingsPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getAttenuation(self, _ctx: Incomplete | None = ...): ...
    def begin_getAttenuation(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAttenuation(self, _r): ...
    def setAttenuation(self, theAttenuation, _ctx: Incomplete | None = ...): ...
    def begin_setAttenuation(self, theAttenuation, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setAttenuation(self, _r): ...
    def getWavelength(self, _ctx: Incomplete | None = ...): ...
    def begin_getWavelength(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWavelength(self, _r): ...
    def setWavelength(self, theWavelength, _ctx: Incomplete | None = ...): ...
    def begin_setWavelength(self, theWavelength, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWavelength(self, _r): ...
    def getLightSource(self, _ctx: Incomplete | None = ...): ...
    def begin_getLightSource(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLightSource(self, _r): ...
    def setLightSource(self, theLightSource, _ctx: Incomplete | None = ...): ...
    def begin_setLightSource(self, theLightSource, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLightSource(self, _r): ...
    def getMicrobeamManipulation(self, _ctx: Incomplete | None = ...): ...
    def begin_getMicrobeamManipulation(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMicrobeamManipulation(self, _r): ...
    def setMicrobeamManipulation(self, theMicrobeamManipulation, _ctx: Incomplete | None = ...): ...
    def begin_setMicrobeamManipulation(self, theMicrobeamManipulation, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMicrobeamManipulation(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LightSettingsI(LightSettings):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        attenuation: Incomplete
        wavelength: Incomplete
        lightSource: Incomplete
        microbeamManipulation: Incomplete
        details: Incomplete
        def __init__(self, _cls, attenuation, wavelength, lightSource, microbeamManipulation, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    ATTENUATION: ClassVar[str] = ...
    WAVELENGTH: ClassVar[str] = ...
    LIGHTSOURCE: ClassVar[str] = ...
    MICROBEAMMANIPULATION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadAttenuation(self): ...
    def getAttenuation(self, current: Incomplete | None = ...): ...
    def setAttenuation(self, _attenuation, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWavelength(self): ...
    def getWavelength(self, current: Incomplete | None = ...): ...
    def setWavelength(self, _wavelength, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLightSource(self): ...
    def getLightSource(self, current: Incomplete | None = ...): ...
    def setLightSource(self, _lightSource, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMicrobeamManipulation(self): ...
    def getMicrobeamManipulation(self, current: Incomplete | None = ...): ...
    def setMicrobeamManipulation(self, _microbeamManipulation, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LightSourceAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class LightSourceAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LightSourceAnnotationLinkI(LightSourceAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Line(Shape):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getX1: ClassVar[IcePy.Operation] = ...
    _op_setX1: ClassVar[IcePy.Operation] = ...
    _op_getY1: ClassVar[IcePy.Operation] = ...
    _op_setY1: ClassVar[IcePy.Operation] = ...
    _op_getX2: ClassVar[IcePy.Operation] = ...
    _op_setX2: ClassVar[IcePy.Operation] = ...
    _op_getY2: ClassVar[IcePy.Operation] = ...
    _op_setY2: ClassVar[IcePy.Operation] = ...
    _op_getMarkerStart: ClassVar[IcePy.Operation] = ...
    _op_setMarkerStart: ClassVar[IcePy.Operation] = ...
    _op_getMarkerEnd: ClassVar[IcePy.Operation] = ...
    _op_setMarkerEnd: ClassVar[IcePy.Operation] = ...
    _op_getTextValue: ClassVar[IcePy.Operation] = ...
    _op_setTextValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theT: Incomplete | None = ..., _theC: Incomplete | None = ..., _roi: Incomplete | None = ..., _locked: Incomplete | None = ..., _transform: Incomplete | None = ..., _fillColor: Incomplete | None = ..., _fillRule: Incomplete | None = ..., _strokeColor: Incomplete | None = ..., _strokeDashArray: Incomplete | None = ..., _strokeWidth: Incomplete | None = ..., _fontFamily: Incomplete | None = ..., _fontSize: Incomplete | None = ..., _fontStyle: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _x1: Incomplete | None = ..., _y1: Incomplete | None = ..., _x2: Incomplete | None = ..., _y2: Incomplete | None = ..., _markerStart: Incomplete | None = ..., _markerEnd: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getX1(self, current: Incomplete | None = ...): ...
    def setX1(self, theX1, current: Incomplete | None = ...): ...
    def getY1(self, current: Incomplete | None = ...): ...
    def setY1(self, theY1, current: Incomplete | None = ...): ...
    def getX2(self, current: Incomplete | None = ...): ...
    def setX2(self, theX2, current: Incomplete | None = ...): ...
    def getY2(self, current: Incomplete | None = ...): ...
    def setY2(self, theY2, current: Incomplete | None = ...): ...
    def getMarkerStart(self, current: Incomplete | None = ...): ...
    def setMarkerStart(self, theMarkerStart, current: Incomplete | None = ...): ...
    def getMarkerEnd(self, current: Incomplete | None = ...): ...
    def setMarkerEnd(self, theMarkerEnd, current: Incomplete | None = ...): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, theTextValue, current: Incomplete | None = ...): ...

class LinePrx(ShapePrx):
    def getX1(self, _ctx: Incomplete | None = ...): ...
    def begin_getX1(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getX1(self, _r): ...
    def setX1(self, theX1, _ctx: Incomplete | None = ...): ...
    def begin_setX1(self, theX1, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setX1(self, _r): ...
    def getY1(self, _ctx: Incomplete | None = ...): ...
    def begin_getY1(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getY1(self, _r): ...
    def setY1(self, theY1, _ctx: Incomplete | None = ...): ...
    def begin_setY1(self, theY1, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setY1(self, _r): ...
    def getX2(self, _ctx: Incomplete | None = ...): ...
    def begin_getX2(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getX2(self, _r): ...
    def setX2(self, theX2, _ctx: Incomplete | None = ...): ...
    def begin_setX2(self, theX2, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setX2(self, _r): ...
    def getY2(self, _ctx: Incomplete | None = ...): ...
    def begin_getY2(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getY2(self, _r): ...
    def setY2(self, theY2, _ctx: Incomplete | None = ...): ...
    def begin_setY2(self, theY2, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setY2(self, _r): ...
    def getMarkerStart(self, _ctx: Incomplete | None = ...): ...
    def begin_getMarkerStart(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMarkerStart(self, _r): ...
    def setMarkerStart(self, theMarkerStart, _ctx: Incomplete | None = ...): ...
    def begin_setMarkerStart(self, theMarkerStart, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMarkerStart(self, _r): ...
    def getMarkerEnd(self, _ctx: Incomplete | None = ...): ...
    def begin_getMarkerEnd(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMarkerEnd(self, _r): ...
    def setMarkerEnd(self, theMarkerEnd, _ctx: Incomplete | None = ...): ...
    def begin_setMarkerEnd(self, theMarkerEnd, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMarkerEnd(self, _r): ...
    def getTextValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTextValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTextValue(self, _r): ...
    def setTextValue(self, theTextValue, _ctx: Incomplete | None = ...): ...
    def begin_setTextValue(self, theTextValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTextValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LineI(Line):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        x1: Incomplete
        y1: Incomplete
        x2: Incomplete
        y2: Incomplete
        markerStart: Incomplete
        markerEnd: Incomplete
        textValue: Incomplete
        theZ: Incomplete
        theT: Incomplete
        theC: Incomplete
        roi: Incomplete
        locked: Incomplete
        transform: Incomplete
        fillColor: Incomplete
        fillRule: Incomplete
        strokeColor: Incomplete
        strokeDashArray: Incomplete
        strokeWidth: Incomplete
        fontFamily: Incomplete
        fontSize: Incomplete
        fontStyle: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, x1, y1, x2, y2, markerStart, markerEnd, textValue, theZ, theT, theC, roi, locked, transform, fillColor, fillRule, strokeColor, strokeDashArray, strokeWidth, fontFamily, fontSize, fontStyle, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    X1: ClassVar[str] = ...
    Y1: ClassVar[str] = ...
    X2: ClassVar[str] = ...
    Y2: ClassVar[str] = ...
    MARKERSTART: ClassVar[str] = ...
    MARKEREND: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadX1(self): ...
    def getX1(self, current: Incomplete | None = ...): ...
    def setX1(self, _x1, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY1(self): ...
    def getY1(self, current: Incomplete | None = ...): ...
    def setY1(self, _y1, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadX2(self): ...
    def getX2(self, current: Incomplete | None = ...): ...
    def setX2(self, _x2, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY2(self): ...
    def getY2(self, current: Incomplete | None = ...): ...
    def setY2(self, _y2, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMarkerStart(self): ...
    def getMarkerStart(self, current: Incomplete | None = ...): ...
    def setMarkerStart(self, _markerStart, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMarkerEnd(self): ...
    def getMarkerEnd(self, current: Incomplete | None = ...): ...
    def setMarkerEnd(self, _markerEnd, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, _locked, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, _transform, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Link(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...

class LinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LinkI(Link):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        details: Incomplete
        def __init__(self, _cls, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ListAnnotation(Annotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ListAnnotationPrx(AnnotationPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ListAnnotationI(ListAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LogicalChannel(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getPinHoleSize: ClassVar[IcePy.Operation] = ...
    _op_setPinHoleSize: ClassVar[IcePy.Operation] = ...
    _op_getIllumination: ClassVar[IcePy.Operation] = ...
    _op_setIllumination: ClassVar[IcePy.Operation] = ...
    _op_getContrastMethod: ClassVar[IcePy.Operation] = ...
    _op_setContrastMethod: ClassVar[IcePy.Operation] = ...
    _op_getExcitationWave: ClassVar[IcePy.Operation] = ...
    _op_setExcitationWave: ClassVar[IcePy.Operation] = ...
    _op_getEmissionWave: ClassVar[IcePy.Operation] = ...
    _op_setEmissionWave: ClassVar[IcePy.Operation] = ...
    _op_getFluor: ClassVar[IcePy.Operation] = ...
    _op_setFluor: ClassVar[IcePy.Operation] = ...
    _op_getNdFilter: ClassVar[IcePy.Operation] = ...
    _op_setNdFilter: ClassVar[IcePy.Operation] = ...
    _op_getOtf: ClassVar[IcePy.Operation] = ...
    _op_setOtf: ClassVar[IcePy.Operation] = ...
    _op_getDetectorSettings: ClassVar[IcePy.Operation] = ...
    _op_setDetectorSettings: ClassVar[IcePy.Operation] = ...
    _op_getLightSourceSettings: ClassVar[IcePy.Operation] = ...
    _op_setLightSourceSettings: ClassVar[IcePy.Operation] = ...
    _op_getFilterSet: ClassVar[IcePy.Operation] = ...
    _op_setFilterSet: ClassVar[IcePy.Operation] = ...
    _op_getSamplesPerPixel: ClassVar[IcePy.Operation] = ...
    _op_setSamplesPerPixel: ClassVar[IcePy.Operation] = ...
    _op_getPhotometricInterpretation: ClassVar[IcePy.Operation] = ...
    _op_setPhotometricInterpretation: ClassVar[IcePy.Operation] = ...
    _op_getMode: ClassVar[IcePy.Operation] = ...
    _op_setMode: ClassVar[IcePy.Operation] = ...
    _op_getPockelCellSetting: ClassVar[IcePy.Operation] = ...
    _op_setPockelCellSetting: ClassVar[IcePy.Operation] = ...
    _op_unloadChannels: ClassVar[IcePy.Operation] = ...
    _op_sizeOfChannels: ClassVar[IcePy.Operation] = ...
    _op_copyChannels: ClassVar[IcePy.Operation] = ...
    _op_addChannel: ClassVar[IcePy.Operation] = ...
    _op_addAllChannelSet: ClassVar[IcePy.Operation] = ...
    _op_removeChannel: ClassVar[IcePy.Operation] = ...
    _op_removeAllChannelSet: ClassVar[IcePy.Operation] = ...
    _op_clearChannels: ClassVar[IcePy.Operation] = ...
    _op_reloadChannels: ClassVar[IcePy.Operation] = ...
    _op_getLightPath: ClassVar[IcePy.Operation] = ...
    _op_setLightPath: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _name: Incomplete | None = ..., _pinHoleSize: Incomplete | None = ..., _illumination: Incomplete | None = ..., _contrastMethod: Incomplete | None = ..., _excitationWave: Incomplete | None = ..., _emissionWave: Incomplete | None = ..., _fluor: Incomplete | None = ..., _ndFilter: Incomplete | None = ..., _otf: Incomplete | None = ..., _detectorSettings: Incomplete | None = ..., _lightSourceSettings: Incomplete | None = ..., _filterSet: Incomplete | None = ..., _samplesPerPixel: Incomplete | None = ..., _photometricInterpretation: Incomplete | None = ..., _mode: Incomplete | None = ..., _pockelCellSetting: Incomplete | None = ..., _channelsSeq: Incomplete | None = ..., _channelsLoaded: bool = ..., _lightPath: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getPinHoleSize(self, current: Incomplete | None = ...): ...
    def setPinHoleSize(self, thePinHoleSize, current: Incomplete | None = ...): ...
    def getIllumination(self, current: Incomplete | None = ...): ...
    def setIllumination(self, theIllumination, current: Incomplete | None = ...): ...
    def getContrastMethod(self, current: Incomplete | None = ...): ...
    def setContrastMethod(self, theContrastMethod, current: Incomplete | None = ...): ...
    def getExcitationWave(self, current: Incomplete | None = ...): ...
    def setExcitationWave(self, theExcitationWave, current: Incomplete | None = ...): ...
    def getEmissionWave(self, current: Incomplete | None = ...): ...
    def setEmissionWave(self, theEmissionWave, current: Incomplete | None = ...): ...
    def getFluor(self, current: Incomplete | None = ...): ...
    def setFluor(self, theFluor, current: Incomplete | None = ...): ...
    def getNdFilter(self, current: Incomplete | None = ...): ...
    def setNdFilter(self, theNdFilter, current: Incomplete | None = ...): ...
    def getOtf(self, current: Incomplete | None = ...): ...
    def setOtf(self, theOtf, current: Incomplete | None = ...): ...
    def getDetectorSettings(self, current: Incomplete | None = ...): ...
    def setDetectorSettings(self, theDetectorSettings, current: Incomplete | None = ...): ...
    def getLightSourceSettings(self, current: Incomplete | None = ...): ...
    def setLightSourceSettings(self, theLightSourceSettings, current: Incomplete | None = ...): ...
    def getFilterSet(self, current: Incomplete | None = ...): ...
    def setFilterSet(self, theFilterSet, current: Incomplete | None = ...): ...
    def getSamplesPerPixel(self, current: Incomplete | None = ...): ...
    def setSamplesPerPixel(self, theSamplesPerPixel, current: Incomplete | None = ...): ...
    def getPhotometricInterpretation(self, current: Incomplete | None = ...): ...
    def setPhotometricInterpretation(self, thePhotometricInterpretation, current: Incomplete | None = ...): ...
    def getMode(self, current: Incomplete | None = ...): ...
    def setMode(self, theMode, current: Incomplete | None = ...): ...
    def getPockelCellSetting(self, current: Incomplete | None = ...): ...
    def setPockelCellSetting(self, thePockelCellSetting, current: Incomplete | None = ...): ...
    def unloadChannels(self, current: Incomplete | None = ...): ...
    def sizeOfChannels(self, current: Incomplete | None = ...): ...
    def copyChannels(self, current: Incomplete | None = ...): ...
    def addChannel(self, target, current: Incomplete | None = ...): ...
    def addAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannel(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def clearChannels(self, current: Incomplete | None = ...): ...
    def reloadChannels(self, toCopy, current: Incomplete | None = ...): ...
    def getLightPath(self, current: Incomplete | None = ...): ...
    def setLightPath(self, theLightPath, current: Incomplete | None = ...): ...

class LogicalChannelPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getPinHoleSize(self, _ctx: Incomplete | None = ...): ...
    def begin_getPinHoleSize(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPinHoleSize(self, _r): ...
    def setPinHoleSize(self, thePinHoleSize, _ctx: Incomplete | None = ...): ...
    def begin_setPinHoleSize(self, thePinHoleSize, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPinHoleSize(self, _r): ...
    def getIllumination(self, _ctx: Incomplete | None = ...): ...
    def begin_getIllumination(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getIllumination(self, _r): ...
    def setIllumination(self, theIllumination, _ctx: Incomplete | None = ...): ...
    def begin_setIllumination(self, theIllumination, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setIllumination(self, _r): ...
    def getContrastMethod(self, _ctx: Incomplete | None = ...): ...
    def begin_getContrastMethod(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getContrastMethod(self, _r): ...
    def setContrastMethod(self, theContrastMethod, _ctx: Incomplete | None = ...): ...
    def begin_setContrastMethod(self, theContrastMethod, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setContrastMethod(self, _r): ...
    def getExcitationWave(self, _ctx: Incomplete | None = ...): ...
    def begin_getExcitationWave(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExcitationWave(self, _r): ...
    def setExcitationWave(self, theExcitationWave, _ctx: Incomplete | None = ...): ...
    def begin_setExcitationWave(self, theExcitationWave, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setExcitationWave(self, _r): ...
    def getEmissionWave(self, _ctx: Incomplete | None = ...): ...
    def begin_getEmissionWave(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEmissionWave(self, _r): ...
    def setEmissionWave(self, theEmissionWave, _ctx: Incomplete | None = ...): ...
    def begin_setEmissionWave(self, theEmissionWave, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setEmissionWave(self, _r): ...
    def getFluor(self, _ctx: Incomplete | None = ...): ...
    def begin_getFluor(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFluor(self, _r): ...
    def setFluor(self, theFluor, _ctx: Incomplete | None = ...): ...
    def begin_setFluor(self, theFluor, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFluor(self, _r): ...
    def getNdFilter(self, _ctx: Incomplete | None = ...): ...
    def begin_getNdFilter(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getNdFilter(self, _r): ...
    def setNdFilter(self, theNdFilter, _ctx: Incomplete | None = ...): ...
    def begin_setNdFilter(self, theNdFilter, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setNdFilter(self, _r): ...
    def getOtf(self, _ctx: Incomplete | None = ...): ...
    def begin_getOtf(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getOtf(self, _r): ...
    def setOtf(self, theOtf, _ctx: Incomplete | None = ...): ...
    def begin_setOtf(self, theOtf, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setOtf(self, _r): ...
    def getDetectorSettings(self, _ctx: Incomplete | None = ...): ...
    def begin_getDetectorSettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDetectorSettings(self, _r): ...
    def setDetectorSettings(self, theDetectorSettings, _ctx: Incomplete | None = ...): ...
    def begin_setDetectorSettings(self, theDetectorSettings, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDetectorSettings(self, _r): ...
    def getLightSourceSettings(self, _ctx: Incomplete | None = ...): ...
    def begin_getLightSourceSettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLightSourceSettings(self, _r): ...
    def setLightSourceSettings(self, theLightSourceSettings, _ctx: Incomplete | None = ...): ...
    def begin_setLightSourceSettings(self, theLightSourceSettings, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLightSourceSettings(self, _r): ...
    def getFilterSet(self, _ctx: Incomplete | None = ...): ...
    def begin_getFilterSet(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFilterSet(self, _r): ...
    def setFilterSet(self, theFilterSet, _ctx: Incomplete | None = ...): ...
    def begin_setFilterSet(self, theFilterSet, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFilterSet(self, _r): ...
    def getSamplesPerPixel(self, _ctx: Incomplete | None = ...): ...
    def begin_getSamplesPerPixel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSamplesPerPixel(self, _r): ...
    def setSamplesPerPixel(self, theSamplesPerPixel, _ctx: Incomplete | None = ...): ...
    def begin_setSamplesPerPixel(self, theSamplesPerPixel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSamplesPerPixel(self, _r): ...
    def getPhotometricInterpretation(self, _ctx: Incomplete | None = ...): ...
    def begin_getPhotometricInterpretation(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPhotometricInterpretation(self, _r): ...
    def setPhotometricInterpretation(self, thePhotometricInterpretation, _ctx: Incomplete | None = ...): ...
    def begin_setPhotometricInterpretation(self, thePhotometricInterpretation, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPhotometricInterpretation(self, _r): ...
    def getMode(self, _ctx: Incomplete | None = ...): ...
    def begin_getMode(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMode(self, _r): ...
    def setMode(self, theMode, _ctx: Incomplete | None = ...): ...
    def begin_setMode(self, theMode, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMode(self, _r): ...
    def getPockelCellSetting(self, _ctx: Incomplete | None = ...): ...
    def begin_getPockelCellSetting(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPockelCellSetting(self, _r): ...
    def setPockelCellSetting(self, thePockelCellSetting, _ctx: Incomplete | None = ...): ...
    def begin_setPockelCellSetting(self, thePockelCellSetting, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPockelCellSetting(self, _r): ...
    def unloadChannels(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadChannels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadChannels(self, _r): ...
    def sizeOfChannels(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfChannels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfChannels(self, _r): ...
    def copyChannels(self, _ctx: Incomplete | None = ...): ...
    def begin_copyChannels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyChannels(self, _r): ...
    def addChannel(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addChannel(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addChannel(self, _r): ...
    def addAllChannelSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllChannelSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllChannelSet(self, _r): ...
    def removeChannel(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeChannel(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeChannel(self, _r): ...
    def removeAllChannelSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllChannelSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllChannelSet(self, _r): ...
    def clearChannels(self, _ctx: Incomplete | None = ...): ...
    def begin_clearChannels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearChannels(self, _r): ...
    def reloadChannels(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadChannels(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadChannels(self, _r): ...
    def getLightPath(self, _ctx: Incomplete | None = ...): ...
    def begin_getLightPath(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLightPath(self, _r): ...
    def setLightPath(self, theLightPath, _ctx: Incomplete | None = ...): ...
    def begin_setLightPath(self, theLightPath, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLightPath(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LogicalChannelI(LogicalChannel):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        name: Incomplete
        pinHoleSize: Incomplete
        illumination: Incomplete
        contrastMethod: Incomplete
        excitationWave: Incomplete
        emissionWave: Incomplete
        fluor: Incomplete
        ndFilter: Incomplete
        otf: Incomplete
        detectorSettings: Incomplete
        lightSourceSettings: Incomplete
        filterSet: Incomplete
        samplesPerPixel: Incomplete
        photometricInterpretation: Incomplete
        mode: Incomplete
        pockelCellSetting: Incomplete
        channels: Incomplete
        lightPath: Incomplete
        details: Incomplete
        def __init__(self, _cls, name, pinHoleSize, illumination, contrastMethod, excitationWave, emissionWave, fluor, ndFilter, otf, detectorSettings, lightSourceSettings, filterSet, samplesPerPixel, photometricInterpretation, mode, pockelCellSetting, channels, lightPath, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    NAME: ClassVar[str] = ...
    PINHOLESIZE: ClassVar[str] = ...
    ILLUMINATION: ClassVar[str] = ...
    CONTRASTMETHOD: ClassVar[str] = ...
    EXCITATIONWAVE: ClassVar[str] = ...
    EMISSIONWAVE: ClassVar[str] = ...
    FLUOR: ClassVar[str] = ...
    NDFILTER: ClassVar[str] = ...
    OTF: ClassVar[str] = ...
    DETECTORSETTINGS: ClassVar[str] = ...
    LIGHTSOURCESETTINGS: ClassVar[str] = ...
    FILTERSET: ClassVar[str] = ...
    SAMPLESPERPIXEL: ClassVar[str] = ...
    PHOTOMETRICINTERPRETATION: ClassVar[str] = ...
    MODE: ClassVar[str] = ...
    POCKELCELLSETTING: ClassVar[str] = ...
    CHANNELS: ClassVar[str] = ...
    LIGHTPATH: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPinHoleSize(self): ...
    def getPinHoleSize(self, current: Incomplete | None = ...): ...
    def setPinHoleSize(self, _pinHoleSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadIllumination(self): ...
    def getIllumination(self, current: Incomplete | None = ...): ...
    def setIllumination(self, _illumination, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadContrastMethod(self): ...
    def getContrastMethod(self, current: Incomplete | None = ...): ...
    def setContrastMethod(self, _contrastMethod, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadExcitationWave(self): ...
    def getExcitationWave(self, current: Incomplete | None = ...): ...
    def setExcitationWave(self, _excitationWave, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEmissionWave(self): ...
    def getEmissionWave(self, current: Incomplete | None = ...): ...
    def setEmissionWave(self, _emissionWave, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFluor(self): ...
    def getFluor(self, current: Incomplete | None = ...): ...
    def setFluor(self, _fluor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNdFilter(self): ...
    def getNdFilter(self, current: Incomplete | None = ...): ...
    def setNdFilter(self, _ndFilter, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOtf(self): ...
    def getOtf(self, current: Incomplete | None = ...): ...
    def setOtf(self, _otf, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDetectorSettings(self): ...
    def getDetectorSettings(self, current: Incomplete | None = ...): ...
    def setDetectorSettings(self, _detectorSettings, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLightSourceSettings(self): ...
    def getLightSourceSettings(self, current: Incomplete | None = ...): ...
    def setLightSourceSettings(self, _lightSourceSettings, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFilterSet(self): ...
    def getFilterSet(self, current: Incomplete | None = ...): ...
    def setFilterSet(self, _filterSet, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSamplesPerPixel(self): ...
    def getSamplesPerPixel(self, current: Incomplete | None = ...): ...
    def setSamplesPerPixel(self, _samplesPerPixel, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPhotometricInterpretation(self): ...
    def getPhotometricInterpretation(self, current: Incomplete | None = ...): ...
    def setPhotometricInterpretation(self, _photometricInterpretation, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMode(self): ...
    def getMode(self, current: Incomplete | None = ...): ...
    def setMode(self, _mode, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPockelCellSetting(self): ...
    def getPockelCellSetting(self, current: Incomplete | None = ...): ...
    def setPockelCellSetting(self, _pockelCellSetting, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChannels(self, current: Incomplete | None = ...): ...
    def isChannelsLoaded(self): ...
    def sizeOfChannels(self, current: Incomplete | None = ...): ...
    def copyChannels(self, current: Incomplete | None = ...): ...
    def iterateChannels(self): ...
    def addChannel(self, target, current: Incomplete | None = ...): ...
    def addAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannel(self, target, current: Incomplete | None = ...): ...
    def removeAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def clearChannels(self, current: Incomplete | None = ...): ...
    def reloadChannels(self, toCopy, current: Incomplete | None = ...): ...
    def unloadLightPath(self): ...
    def getLightPath(self, current: Incomplete | None = ...): ...
    def setLightPath(self, _lightPath, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class LongAnnotation(NumericAnnotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getLongValue: ClassVar[IcePy.Operation] = ...
    _op_setLongValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _longValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getLongValue(self, current: Incomplete | None = ...): ...
    def setLongValue(self, theLongValue, current: Incomplete | None = ...): ...

class LongAnnotationPrx(NumericAnnotationPrx):
    def getLongValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getLongValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLongValue(self, _r): ...
    def setLongValue(self, theLongValue, _ctx: Incomplete | None = ...): ...
    def begin_setLongValue(self, theLongValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLongValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LongAnnotationI(LongAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        longValue: Incomplete
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, longValue, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    LONGVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadLongValue(self): ...
    def getLongValue(self, current: Incomplete | None = ...): ...
    def setLongValue(self, _longValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class MapAnnotation(Annotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getMapValueAsMap: ClassVar[IcePy.Operation] = ...
    _op_getMapValue: ClassVar[IcePy.Operation] = ...
    _op_setMapValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _mapValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getMapValueAsMap(self, current: Incomplete | None = ...): ...
    def getMapValue(self, current: Incomplete | None = ...): ...
    def setMapValue(self, theMapValue, current: Incomplete | None = ...): ...

class MapAnnotationPrx(AnnotationPrx):
    def getMapValueAsMap(self, _ctx: Incomplete | None = ...): ...
    def begin_getMapValueAsMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMapValueAsMap(self, _r): ...
    def getMapValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getMapValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMapValue(self, _r): ...
    def setMapValue(self, theMapValue, _ctx: Incomplete | None = ...): ...
    def begin_setMapValue(self, theMapValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMapValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class MapAnnotationI(MapAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        mapValue: Incomplete
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, mapValue, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    MAPVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadMapValue(self): ...
    def getMapValue(self, current: Incomplete | None = ...): ...
    def setMapValue(self, _mapValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getMapValueAsMap(self, current: Incomplete | None = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Mask(Shape):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getX: ClassVar[IcePy.Operation] = ...
    _op_setX: ClassVar[IcePy.Operation] = ...
    _op_getY: ClassVar[IcePy.Operation] = ...
    _op_setY: ClassVar[IcePy.Operation] = ...
    _op_getWidth: ClassVar[IcePy.Operation] = ...
    _op_setWidth: ClassVar[IcePy.Operation] = ...
    _op_getHeight: ClassVar[IcePy.Operation] = ...
    _op_setHeight: ClassVar[IcePy.Operation] = ...
    _op_getPixels: ClassVar[IcePy.Operation] = ...
    _op_setPixels: ClassVar[IcePy.Operation] = ...
    _op_getTextValue: ClassVar[IcePy.Operation] = ...
    _op_setTextValue: ClassVar[IcePy.Operation] = ...
    _op_getBytes: ClassVar[IcePy.Operation] = ...
    _op_setBytes: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theT: Incomplete | None = ..., _theC: Incomplete | None = ..., _roi: Incomplete | None = ..., _locked: Incomplete | None = ..., _transform: Incomplete | None = ..., _fillColor: Incomplete | None = ..., _fillRule: Incomplete | None = ..., _strokeColor: Incomplete | None = ..., _strokeDashArray: Incomplete | None = ..., _strokeWidth: Incomplete | None = ..., _fontFamily: Incomplete | None = ..., _fontSize: Incomplete | None = ..., _fontStyle: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _x: Incomplete | None = ..., _y: Incomplete | None = ..., _width: Incomplete | None = ..., _height: Incomplete | None = ..., _pixels: Incomplete | None = ..., _textValue: Incomplete | None = ..., _bytes: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, theX, current: Incomplete | None = ...): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, theY, current: Incomplete | None = ...): ...
    def getWidth(self, current: Incomplete | None = ...): ...
    def setWidth(self, theWidth, current: Incomplete | None = ...): ...
    def getHeight(self, current: Incomplete | None = ...): ...
    def setHeight(self, theHeight, current: Incomplete | None = ...): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, thePixels, current: Incomplete | None = ...): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, theTextValue, current: Incomplete | None = ...): ...
    def getBytes(self, current: Incomplete | None = ...): ...
    def setBytes(self, theBytes, current: Incomplete | None = ...): ...

class MaskPrx(ShapePrx):
    def getX(self, _ctx: Incomplete | None = ...): ...
    def begin_getX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getX(self, _r): ...
    def setX(self, theX, _ctx: Incomplete | None = ...): ...
    def begin_setX(self, theX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setX(self, _r): ...
    def getY(self, _ctx: Incomplete | None = ...): ...
    def begin_getY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getY(self, _r): ...
    def setY(self, theY, _ctx: Incomplete | None = ...): ...
    def begin_setY(self, theY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setY(self, _r): ...
    def getWidth(self, _ctx: Incomplete | None = ...): ...
    def begin_getWidth(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWidth(self, _r): ...
    def setWidth(self, theWidth, _ctx: Incomplete | None = ...): ...
    def begin_setWidth(self, theWidth, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWidth(self, _r): ...
    def getHeight(self, _ctx: Incomplete | None = ...): ...
    def begin_getHeight(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getHeight(self, _r): ...
    def setHeight(self, theHeight, _ctx: Incomplete | None = ...): ...
    def begin_setHeight(self, theHeight, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setHeight(self, _r): ...
    def getPixels(self, _ctx: Incomplete | None = ...): ...
    def begin_getPixels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPixels(self, _r): ...
    def setPixels(self, thePixels, _ctx: Incomplete | None = ...): ...
    def begin_setPixels(self, thePixels, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPixels(self, _r): ...
    def getTextValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTextValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTextValue(self, _r): ...
    def setTextValue(self, theTextValue, _ctx: Incomplete | None = ...): ...
    def begin_setTextValue(self, theTextValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTextValue(self, _r): ...
    def getBytes(self, _ctx: Incomplete | None = ...): ...
    def begin_getBytes(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getBytes(self, _r): ...
    def setBytes(self, theBytes, _ctx: Incomplete | None = ...): ...
    def begin_setBytes(self, theBytes, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setBytes(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class MaskI(Mask):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        x: Incomplete
        y: Incomplete
        width: Incomplete
        height: Incomplete
        pixels: Incomplete
        textValue: Incomplete
        bytes: Incomplete
        theZ: Incomplete
        theT: Incomplete
        theC: Incomplete
        roi: Incomplete
        locked: Incomplete
        transform: Incomplete
        fillColor: Incomplete
        fillRule: Incomplete
        strokeColor: Incomplete
        strokeDashArray: Incomplete
        strokeWidth: Incomplete
        fontFamily: Incomplete
        fontSize: Incomplete
        fontStyle: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, x, y, width, height, pixels, textValue, bytes, theZ, theT, theC, roi, locked, transform, fillColor, fillRule, strokeColor, strokeDashArray, strokeWidth, fontFamily, fontSize, fontStyle, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    X: ClassVar[str] = ...
    Y: ClassVar[str] = ...
    WIDTH: ClassVar[str] = ...
    HEIGHT: ClassVar[str] = ...
    PIXELS: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    BYTES: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadX(self): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, _x, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY(self): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, _y, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWidth(self): ...
    def getWidth(self, current: Incomplete | None = ...): ...
    def setWidth(self, _width, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadHeight(self): ...
    def getHeight(self, current: Incomplete | None = ...): ...
    def setHeight(self, _height, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPixels(self): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, _pixels, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBytes(self): ...
    def getBytes(self, current: Incomplete | None = ...): ...
    def setBytes(self, _bytes, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, _locked, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, _transform, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Medium(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class MediumPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class MediumI(Medium):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class MetadataImportJob(Job):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersionInfoAsMap: ClassVar[IcePy.Operation] = ...
    _op_getVersionInfo: ClassVar[IcePy.Operation] = ...
    _op_setVersionInfo: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _username: Incomplete | None = ..., _groupname: Incomplete | None = ..., _type: Incomplete | None = ..., _message: Incomplete | None = ..., _status: Incomplete | None = ..., _submitted: Incomplete | None = ..., _scheduledFor: Incomplete | None = ..., _started: Incomplete | None = ..., _finished: Incomplete | None = ..., _originalFileLinksSeq: Incomplete | None = ..., _originalFileLinksLoaded: bool = ..., _originalFileLinksCountPerOwner: Incomplete | None = ..., _versionInfo: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersionInfoAsMap(self, current: Incomplete | None = ...): ...
    def getVersionInfo(self, current: Incomplete | None = ...): ...
    def setVersionInfo(self, theVersionInfo, current: Incomplete | None = ...): ...

class MetadataImportJobPrx(JobPrx):
    def getVersionInfoAsMap(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersionInfoAsMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersionInfoAsMap(self, _r): ...
    def getVersionInfo(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersionInfo(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersionInfo(self, _r): ...
    def setVersionInfo(self, theVersionInfo, _ctx: Incomplete | None = ...): ...
    def begin_setVersionInfo(self, theVersionInfo, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersionInfo(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class MetadataImportJobI(MetadataImportJob):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        versionInfo: Incomplete
        username: Incomplete
        groupname: Incomplete
        type: Incomplete
        message: Incomplete
        status: Incomplete
        submitted: Incomplete
        scheduledFor: Incomplete
        started: Incomplete
        finished: Incomplete
        originalFileLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, versionInfo, username, groupname, type, message, status, submitted, scheduledFor, started, finished, originalFileLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VERSIONINFO: ClassVar[str] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadVersionInfo(self): ...
    def getVersionInfo(self, current: Incomplete | None = ...): ...
    def setVersionInfo(self, _versionInfo, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getVersionInfoAsMap(self, current: Incomplete | None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, _username, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, _groupname, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, _submitted, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, _scheduledFor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, _finished, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class MicrobeamManipulation(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    _op_unloadLightSourceSettings: ClassVar[IcePy.Operation] = ...
    _op_sizeOfLightSourceSettings: ClassVar[IcePy.Operation] = ...
    _op_copyLightSourceSettings: ClassVar[IcePy.Operation] = ...
    _op_addLightSettings: ClassVar[IcePy.Operation] = ...
    _op_addAllLightSettingsSet: ClassVar[IcePy.Operation] = ...
    _op_removeLightSettings: ClassVar[IcePy.Operation] = ...
    _op_removeAllLightSettingsSet: ClassVar[IcePy.Operation] = ...
    _op_clearLightSourceSettings: ClassVar[IcePy.Operation] = ...
    _op_reloadLightSourceSettings: ClassVar[IcePy.Operation] = ...
    _op_getExperiment: ClassVar[IcePy.Operation] = ...
    _op_setExperiment: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _type: Incomplete | None = ..., _lightSourceSettingsSeq: Incomplete | None = ..., _lightSourceSettingsLoaded: bool = ..., _experiment: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def unloadLightSourceSettings(self, current: Incomplete | None = ...): ...
    def sizeOfLightSourceSettings(self, current: Incomplete | None = ...): ...
    def copyLightSourceSettings(self, current: Incomplete | None = ...): ...
    def addLightSettings(self, target, current: Incomplete | None = ...): ...
    def addAllLightSettingsSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSettings(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllLightSettingsSet(self, targets, current: Incomplete | None = ...): ...
    def clearLightSourceSettings(self, current: Incomplete | None = ...): ...
    def reloadLightSourceSettings(self, toCopy, current: Incomplete | None = ...): ...
    def getExperiment(self, current: Incomplete | None = ...): ...
    def setExperiment(self, theExperiment, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class MicrobeamManipulationPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    def unloadLightSourceSettings(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadLightSourceSettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadLightSourceSettings(self, _r): ...
    def sizeOfLightSourceSettings(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfLightSourceSettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfLightSourceSettings(self, _r): ...
    def copyLightSourceSettings(self, _ctx: Incomplete | None = ...): ...
    def begin_copyLightSourceSettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyLightSourceSettings(self, _r): ...
    def addLightSettings(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addLightSettings(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addLightSettings(self, _r): ...
    def addAllLightSettingsSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllLightSettingsSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllLightSettingsSet(self, _r): ...
    def removeLightSettings(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeLightSettings(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeLightSettings(self, _r): ...
    def removeAllLightSettingsSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllLightSettingsSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllLightSettingsSet(self, _r): ...
    def clearLightSourceSettings(self, _ctx: Incomplete | None = ...): ...
    def begin_clearLightSourceSettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearLightSourceSettings(self, _r): ...
    def reloadLightSourceSettings(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadLightSourceSettings(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadLightSourceSettings(self, _r): ...
    def getExperiment(self, _ctx: Incomplete | None = ...): ...
    def begin_getExperiment(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExperiment(self, _r): ...
    def setExperiment(self, theExperiment, _ctx: Incomplete | None = ...): ...
    def begin_setExperiment(self, theExperiment, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setExperiment(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class MicrobeamManipulationI(MicrobeamManipulation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        type: Incomplete
        lightSourceSettings: Incomplete
        experiment: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, type, lightSourceSettings, experiment, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TYPE: ClassVar[str] = ...
    LIGHTSOURCESETTINGS: ClassVar[str] = ...
    EXPERIMENT: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLightSourceSettings(self, current: Incomplete | None = ...): ...
    def isLightSourceSettingsLoaded(self): ...
    def sizeOfLightSourceSettings(self, current: Incomplete | None = ...): ...
    def copyLightSourceSettings(self, current: Incomplete | None = ...): ...
    def iterateLightSourceSettings(self): ...
    def addLightSettings(self, target, current: Incomplete | None = ...): ...
    def addAllLightSettingsSet(self, targets, current: Incomplete | None = ...): ...
    def removeLightSettings(self, target, current: Incomplete | None = ...): ...
    def removeAllLightSettingsSet(self, targets, current: Incomplete | None = ...): ...
    def clearLightSourceSettings(self, current: Incomplete | None = ...): ...
    def reloadLightSourceSettings(self, toCopy, current: Incomplete | None = ...): ...
    def unloadExperiment(self): ...
    def getExperiment(self, current: Incomplete | None = ...): ...
    def setExperiment(self, _experiment, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class MicrobeamManipulationType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class MicrobeamManipulationTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class MicrobeamManipulationTypeI(MicrobeamManipulationType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Microscope(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getManufacturer: ClassVar[IcePy.Operation] = ...
    _op_setManufacturer: ClassVar[IcePy.Operation] = ...
    _op_getModel: ClassVar[IcePy.Operation] = ...
    _op_setModel: ClassVar[IcePy.Operation] = ...
    _op_getLotNumber: ClassVar[IcePy.Operation] = ...
    _op_setLotNumber: ClassVar[IcePy.Operation] = ...
    _op_getSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_setSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _type: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, theModel, current: Incomplete | None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...

class MicroscopePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def begin_getManufacturer(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getManufacturer(self, _r): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def begin_setManufacturer(self, theManufacturer, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setManufacturer(self, _r): ...
    def getModel(self, _ctx: Incomplete | None = ...): ...
    def begin_getModel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getModel(self, _r): ...
    def setModel(self, theModel, _ctx: Incomplete | None = ...): ...
    def begin_setModel(self, theModel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setModel(self, _r): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getLotNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLotNumber(self, _r): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def begin_setLotNumber(self, theLotNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLotNumber(self, _r): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getSerialNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSerialNumber(self, _r): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def begin_setSerialNumber(self, theSerialNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSerialNumber(self, _r): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class MicroscopeI(Microscope):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        manufacturer: Incomplete
        model: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        type: Incomplete
        details: Incomplete
        def __init__(self, _cls, manufacturer, model, lotNumber, serialNumber, type, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class MicroscopeType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class MicroscopeTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class MicroscopeTypeI(MicroscopeType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Namespace(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getKeywords: ClassVar[IcePy.Operation] = ...
    _op_setKeywords: ClassVar[IcePy.Operation] = ...
    _op_getMultivalued: ClassVar[IcePy.Operation] = ...
    _op_setMultivalued: ClassVar[IcePy.Operation] = ...
    _op_getDisplay: ClassVar[IcePy.Operation] = ...
    _op_setDisplay: ClassVar[IcePy.Operation] = ...
    _op_getDisplayName: ClassVar[IcePy.Operation] = ...
    _op_setDisplayName: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addNamespaceAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllNamespaceAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeNamespaceAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllNamespaceAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addNamespaceAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findNamespaceAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeNamespaceAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _keywords: Incomplete | None = ..., _multivalued: Incomplete | None = ..., _display: Incomplete | None = ..., _displayName: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getKeywords(self, current: Incomplete | None = ...): ...
    def setKeywords(self, theKeywords, current: Incomplete | None = ...): ...
    def getMultivalued(self, current: Incomplete | None = ...): ...
    def setMultivalued(self, theMultivalued, current: Incomplete | None = ...): ...
    def getDisplay(self, current: Incomplete | None = ...): ...
    def setDisplay(self, theDisplay, current: Incomplete | None = ...): ...
    def getDisplayName(self, current: Incomplete | None = ...): ...
    def setDisplayName(self, theDisplayName, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addNamespaceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllNamespaceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeNamespaceAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllNamespaceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addNamespaceAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findNamespaceAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeNamespaceAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class NamespacePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getKeywords(self, _ctx: Incomplete | None = ...): ...
    def begin_getKeywords(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getKeywords(self, _r): ...
    def setKeywords(self, theKeywords, _ctx: Incomplete | None = ...): ...
    def begin_setKeywords(self, theKeywords, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setKeywords(self, _r): ...
    def getMultivalued(self, _ctx: Incomplete | None = ...): ...
    def begin_getMultivalued(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMultivalued(self, _r): ...
    def setMultivalued(self, theMultivalued, _ctx: Incomplete | None = ...): ...
    def begin_setMultivalued(self, theMultivalued, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMultivalued(self, _r): ...
    def getDisplay(self, _ctx: Incomplete | None = ...): ...
    def begin_getDisplay(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDisplay(self, _r): ...
    def setDisplay(self, theDisplay, _ctx: Incomplete | None = ...): ...
    def begin_setDisplay(self, theDisplay, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDisplay(self, _r): ...
    def getDisplayName(self, _ctx: Incomplete | None = ...): ...
    def begin_getDisplayName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDisplayName(self, _r): ...
    def setDisplayName(self, theDisplayName, _ctx: Incomplete | None = ...): ...
    def begin_setDisplayName(self, theDisplayName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDisplayName(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addNamespaceAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addNamespaceAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addNamespaceAnnotationLink(self, _r): ...
    def addAllNamespaceAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllNamespaceAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllNamespaceAnnotationLinkSet(self, _r): ...
    def removeNamespaceAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeNamespaceAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeNamespaceAnnotationLink(self, _r): ...
    def removeAllNamespaceAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllNamespaceAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllNamespaceAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addNamespaceAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addNamespaceAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addNamespaceAnnotationLinkToBoth(self, _r): ...
    def findNamespaceAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findNamespaceAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findNamespaceAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeNamespaceAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeNamespaceAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeNamespaceAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class NamespaceI(Namespace):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        keywords: Incomplete
        multivalued: Incomplete
        display: Incomplete
        displayName: Incomplete
        annotationLinks: Incomplete
        name: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, keywords, multivalued, display, displayName, annotationLinks, name, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    KEYWORDS: ClassVar[str] = ...
    MULTIVALUED: ClassVar[str] = ...
    DISPLAY: ClassVar[str] = ...
    DISPLAYNAME: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadKeywords(self): ...
    def getKeywords(self, current: Incomplete | None = ...): ...
    def setKeywords(self, _keywords, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMultivalued(self): ...
    def getMultivalued(self, current: Incomplete | None = ...): ...
    def setMultivalued(self, _multivalued, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDisplay(self): ...
    def getDisplay(self, current: Incomplete | None = ...): ...
    def setDisplay(self, _display, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDisplayName(self): ...
    def getDisplayName(self, current: Incomplete | None = ...): ...
    def setDisplayName(self, _displayName, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addNamespaceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllNamespaceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeNamespaceAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllNamespaceAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addNamespaceAnnotationLinkToBoth(self, link, bothSides): ...
    def findNamespaceAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeNamespaceAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class NamespaceAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class NamespaceAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class NamespaceAnnotationLinkI(NamespaceAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Node(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_unloadSessions: ClassVar[IcePy.Operation] = ...
    _op_sizeOfSessions: ClassVar[IcePy.Operation] = ...
    _op_copySessions: ClassVar[IcePy.Operation] = ...
    _op_addSession: ClassVar[IcePy.Operation] = ...
    _op_addAllSessionSet: ClassVar[IcePy.Operation] = ...
    _op_removeSession: ClassVar[IcePy.Operation] = ...
    _op_removeAllSessionSet: ClassVar[IcePy.Operation] = ...
    _op_clearSessions: ClassVar[IcePy.Operation] = ...
    _op_reloadSessions: ClassVar[IcePy.Operation] = ...
    _op_getUuid: ClassVar[IcePy.Operation] = ...
    _op_setUuid: ClassVar[IcePy.Operation] = ...
    _op_getConn: ClassVar[IcePy.Operation] = ...
    _op_setConn: ClassVar[IcePy.Operation] = ...
    _op_getUp: ClassVar[IcePy.Operation] = ...
    _op_setUp: ClassVar[IcePy.Operation] = ...
    _op_getDown: ClassVar[IcePy.Operation] = ...
    _op_setDown: ClassVar[IcePy.Operation] = ...
    _op_getScale: ClassVar[IcePy.Operation] = ...
    _op_setScale: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addNodeAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllNodeAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeNodeAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllNodeAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addNodeAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findNodeAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeNodeAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _sessionsSeq: Incomplete | None = ..., _sessionsLoaded: bool = ..., _uuid: Incomplete | None = ..., _conn: Incomplete | None = ..., _up: Incomplete | None = ..., _down: Incomplete | None = ..., _scale: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def unloadSessions(self, current: Incomplete | None = ...): ...
    def sizeOfSessions(self, current: Incomplete | None = ...): ...
    def copySessions(self, current: Incomplete | None = ...): ...
    def addSession(self, target, current: Incomplete | None = ...): ...
    def addAllSessionSet(self, targets, current: Incomplete | None = ...): ...
    def removeSession(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllSessionSet(self, targets, current: Incomplete | None = ...): ...
    def clearSessions(self, current: Incomplete | None = ...): ...
    def reloadSessions(self, toCopy, current: Incomplete | None = ...): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, theUuid, current: Incomplete | None = ...): ...
    def getConn(self, current: Incomplete | None = ...): ...
    def setConn(self, theConn, current: Incomplete | None = ...): ...
    def getUp(self, current: Incomplete | None = ...): ...
    def setUp(self, theUp, current: Incomplete | None = ...): ...
    def getDown(self, current: Incomplete | None = ...): ...
    def setDown(self, theDown, current: Incomplete | None = ...): ...
    def getScale(self, current: Incomplete | None = ...): ...
    def setScale(self, theScale, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addNodeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllNodeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeNodeAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllNodeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addNodeAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findNodeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeNodeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class NodePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def unloadSessions(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadSessions(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadSessions(self, _r): ...
    def sizeOfSessions(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfSessions(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfSessions(self, _r): ...
    def copySessions(self, _ctx: Incomplete | None = ...): ...
    def begin_copySessions(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copySessions(self, _r): ...
    def addSession(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addSession(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addSession(self, _r): ...
    def addAllSessionSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllSessionSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllSessionSet(self, _r): ...
    def removeSession(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeSession(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeSession(self, _r): ...
    def removeAllSessionSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllSessionSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllSessionSet(self, _r): ...
    def clearSessions(self, _ctx: Incomplete | None = ...): ...
    def begin_clearSessions(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearSessions(self, _r): ...
    def reloadSessions(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadSessions(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadSessions(self, _r): ...
    def getUuid(self, _ctx: Incomplete | None = ...): ...
    def begin_getUuid(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUuid(self, _r): ...
    def setUuid(self, theUuid, _ctx: Incomplete | None = ...): ...
    def begin_setUuid(self, theUuid, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUuid(self, _r): ...
    def getConn(self, _ctx: Incomplete | None = ...): ...
    def begin_getConn(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getConn(self, _r): ...
    def setConn(self, theConn, _ctx: Incomplete | None = ...): ...
    def begin_setConn(self, theConn, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setConn(self, _r): ...
    def getUp(self, _ctx: Incomplete | None = ...): ...
    def begin_getUp(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUp(self, _r): ...
    def setUp(self, theUp, _ctx: Incomplete | None = ...): ...
    def begin_setUp(self, theUp, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUp(self, _r): ...
    def getDown(self, _ctx: Incomplete | None = ...): ...
    def begin_getDown(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDown(self, _r): ...
    def setDown(self, theDown, _ctx: Incomplete | None = ...): ...
    def begin_setDown(self, theDown, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDown(self, _r): ...
    def getScale(self, _ctx: Incomplete | None = ...): ...
    def begin_getScale(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getScale(self, _r): ...
    def setScale(self, theScale, _ctx: Incomplete | None = ...): ...
    def begin_setScale(self, theScale, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setScale(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addNodeAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addNodeAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addNodeAnnotationLink(self, _r): ...
    def addAllNodeAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllNodeAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllNodeAnnotationLinkSet(self, _r): ...
    def removeNodeAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeNodeAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeNodeAnnotationLink(self, _r): ...
    def removeAllNodeAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllNodeAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllNodeAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addNodeAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addNodeAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addNodeAnnotationLinkToBoth(self, _r): ...
    def findNodeAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findNodeAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findNodeAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeNodeAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeNodeAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeNodeAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class NodeI(Node):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        sessions: Incomplete
        uuid: Incomplete
        conn: Incomplete
        up: Incomplete
        down: Incomplete
        scale: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, sessions, uuid, conn, up, down, scale, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    SESSIONS: ClassVar[str] = ...
    UUID: ClassVar[str] = ...
    CONN: ClassVar[str] = ...
    UP: ClassVar[str] = ...
    DOWN: ClassVar[str] = ...
    SCALE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadSessions(self, current: Incomplete | None = ...): ...
    def isSessionsLoaded(self): ...
    def sizeOfSessions(self, current: Incomplete | None = ...): ...
    def copySessions(self, current: Incomplete | None = ...): ...
    def iterateSessions(self): ...
    def addSession(self, target, current: Incomplete | None = ...): ...
    def addAllSessionSet(self, targets, current: Incomplete | None = ...): ...
    def removeSession(self, target, current: Incomplete | None = ...): ...
    def removeAllSessionSet(self, targets, current: Incomplete | None = ...): ...
    def clearSessions(self, current: Incomplete | None = ...): ...
    def reloadSessions(self, toCopy, current: Incomplete | None = ...): ...
    def unloadUuid(self): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, _uuid, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadConn(self): ...
    def getConn(self, current: Incomplete | None = ...): ...
    def setConn(self, _conn, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUp(self): ...
    def getUp(self, current: Incomplete | None = ...): ...
    def setUp(self, _up, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDown(self): ...
    def getDown(self, current: Incomplete | None = ...): ...
    def setDown(self, _down, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScale(self): ...
    def getScale(self, current: Incomplete | None = ...): ...
    def setScale(self, _scale, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addNodeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllNodeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeNodeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllNodeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addNodeAnnotationLinkToBoth(self, link, bothSides): ...
    def findNodeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeNodeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class NodeAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class NodeAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class NodeAnnotationLinkI(NodeAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class OTF(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getSizeX: ClassVar[IcePy.Operation] = ...
    _op_setSizeX: ClassVar[IcePy.Operation] = ...
    _op_getSizeY: ClassVar[IcePy.Operation] = ...
    _op_setSizeY: ClassVar[IcePy.Operation] = ...
    _op_getOpticalAxisAveraged: ClassVar[IcePy.Operation] = ...
    _op_setOpticalAxisAveraged: ClassVar[IcePy.Operation] = ...
    _op_getPixelsType: ClassVar[IcePy.Operation] = ...
    _op_setPixelsType: ClassVar[IcePy.Operation] = ...
    _op_getPath: ClassVar[IcePy.Operation] = ...
    _op_setPath: ClassVar[IcePy.Operation] = ...
    _op_getFilterSet: ClassVar[IcePy.Operation] = ...
    _op_setFilterSet: ClassVar[IcePy.Operation] = ...
    _op_getObjective: ClassVar[IcePy.Operation] = ...
    _op_setObjective: ClassVar[IcePy.Operation] = ...
    _op_getInstrument: ClassVar[IcePy.Operation] = ...
    _op_setInstrument: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _sizeX: Incomplete | None = ..., _sizeY: Incomplete | None = ..., _opticalAxisAveraged: Incomplete | None = ..., _pixelsType: Incomplete | None = ..., _path: Incomplete | None = ..., _filterSet: Incomplete | None = ..., _objective: Incomplete | None = ..., _instrument: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getSizeX(self, current: Incomplete | None = ...): ...
    def setSizeX(self, theSizeX, current: Incomplete | None = ...): ...
    def getSizeY(self, current: Incomplete | None = ...): ...
    def setSizeY(self, theSizeY, current: Incomplete | None = ...): ...
    def getOpticalAxisAveraged(self, current: Incomplete | None = ...): ...
    def setOpticalAxisAveraged(self, theOpticalAxisAveraged, current: Incomplete | None = ...): ...
    def getPixelsType(self, current: Incomplete | None = ...): ...
    def setPixelsType(self, thePixelsType, current: Incomplete | None = ...): ...
    def getPath(self, current: Incomplete | None = ...): ...
    def setPath(self, thePath, current: Incomplete | None = ...): ...
    def getFilterSet(self, current: Incomplete | None = ...): ...
    def setFilterSet(self, theFilterSet, current: Incomplete | None = ...): ...
    def getObjective(self, current: Incomplete | None = ...): ...
    def setObjective(self, theObjective, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...

class OTFPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getSizeX(self, _ctx: Incomplete | None = ...): ...
    def begin_getSizeX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSizeX(self, _r): ...
    def setSizeX(self, theSizeX, _ctx: Incomplete | None = ...): ...
    def begin_setSizeX(self, theSizeX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSizeX(self, _r): ...
    def getSizeY(self, _ctx: Incomplete | None = ...): ...
    def begin_getSizeY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSizeY(self, _r): ...
    def setSizeY(self, theSizeY, _ctx: Incomplete | None = ...): ...
    def begin_setSizeY(self, theSizeY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSizeY(self, _r): ...
    def getOpticalAxisAveraged(self, _ctx: Incomplete | None = ...): ...
    def begin_getOpticalAxisAveraged(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getOpticalAxisAveraged(self, _r): ...
    def setOpticalAxisAveraged(self, theOpticalAxisAveraged, _ctx: Incomplete | None = ...): ...
    def begin_setOpticalAxisAveraged(self, theOpticalAxisAveraged, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setOpticalAxisAveraged(self, _r): ...
    def getPixelsType(self, _ctx: Incomplete | None = ...): ...
    def begin_getPixelsType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPixelsType(self, _r): ...
    def setPixelsType(self, thePixelsType, _ctx: Incomplete | None = ...): ...
    def begin_setPixelsType(self, thePixelsType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPixelsType(self, _r): ...
    def getPath(self, _ctx: Incomplete | None = ...): ...
    def begin_getPath(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPath(self, _r): ...
    def setPath(self, thePath, _ctx: Incomplete | None = ...): ...
    def begin_setPath(self, thePath, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPath(self, _r): ...
    def getFilterSet(self, _ctx: Incomplete | None = ...): ...
    def begin_getFilterSet(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFilterSet(self, _r): ...
    def setFilterSet(self, theFilterSet, _ctx: Incomplete | None = ...): ...
    def begin_setFilterSet(self, theFilterSet, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setFilterSet(self, _r): ...
    def getObjective(self, _ctx: Incomplete | None = ...): ...
    def begin_getObjective(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getObjective(self, _r): ...
    def setObjective(self, theObjective, _ctx: Incomplete | None = ...): ...
    def begin_setObjective(self, theObjective, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setObjective(self, _r): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def begin_getInstrument(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInstrument(self, _r): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def begin_setInstrument(self, theInstrument, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInstrument(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class OTFI(OTF):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        sizeX: Incomplete
        sizeY: Incomplete
        opticalAxisAveraged: Incomplete
        pixelsType: Incomplete
        path: Incomplete
        filterSet: Incomplete
        objective: Incomplete
        instrument: Incomplete
        details: Incomplete
        def __init__(self, _cls, sizeX, sizeY, opticalAxisAveraged, pixelsType, path, filterSet, objective, instrument, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    SIZEX: ClassVar[str] = ...
    SIZEY: ClassVar[str] = ...
    OPTICALAXISAVERAGED: ClassVar[str] = ...
    PIXELSTYPE: ClassVar[str] = ...
    PATH: ClassVar[str] = ...
    FILTERSET: ClassVar[str] = ...
    OBJECTIVE: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadSizeX(self): ...
    def getSizeX(self, current: Incomplete | None = ...): ...
    def setSizeX(self, _sizeX, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSizeY(self): ...
    def getSizeY(self, current: Incomplete | None = ...): ...
    def setSizeY(self, _sizeY, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOpticalAxisAveraged(self): ...
    def getOpticalAxisAveraged(self, current: Incomplete | None = ...): ...
    def setOpticalAxisAveraged(self, _opticalAxisAveraged, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPixelsType(self): ...
    def getPixelsType(self, current: Incomplete | None = ...): ...
    def setPixelsType(self, _pixelsType, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPath(self): ...
    def getPath(self, current: Incomplete | None = ...): ...
    def setPath(self, _path, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFilterSet(self): ...
    def getFilterSet(self, current: Incomplete | None = ...): ...
    def setFilterSet(self, _filterSet, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadObjective(self): ...
    def getObjective(self, current: Incomplete | None = ...): ...
    def setObjective(self, _objective, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Objective(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getManufacturer: ClassVar[IcePy.Operation] = ...
    _op_setManufacturer: ClassVar[IcePy.Operation] = ...
    _op_getModel: ClassVar[IcePy.Operation] = ...
    _op_setModel: ClassVar[IcePy.Operation] = ...
    _op_getLotNumber: ClassVar[IcePy.Operation] = ...
    _op_setLotNumber: ClassVar[IcePy.Operation] = ...
    _op_getSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_setSerialNumber: ClassVar[IcePy.Operation] = ...
    _op_getNominalMagnification: ClassVar[IcePy.Operation] = ...
    _op_setNominalMagnification: ClassVar[IcePy.Operation] = ...
    _op_getCalibratedMagnification: ClassVar[IcePy.Operation] = ...
    _op_setCalibratedMagnification: ClassVar[IcePy.Operation] = ...
    _op_getLensNA: ClassVar[IcePy.Operation] = ...
    _op_setLensNA: ClassVar[IcePy.Operation] = ...
    _op_getImmersion: ClassVar[IcePy.Operation] = ...
    _op_setImmersion: ClassVar[IcePy.Operation] = ...
    _op_getCorrection: ClassVar[IcePy.Operation] = ...
    _op_setCorrection: ClassVar[IcePy.Operation] = ...
    _op_getWorkingDistance: ClassVar[IcePy.Operation] = ...
    _op_setWorkingDistance: ClassVar[IcePy.Operation] = ...
    _op_getIris: ClassVar[IcePy.Operation] = ...
    _op_setIris: ClassVar[IcePy.Operation] = ...
    _op_getInstrument: ClassVar[IcePy.Operation] = ...
    _op_setInstrument: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addObjectiveAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllObjectiveAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeObjectiveAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllObjectiveAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addObjectiveAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findObjectiveAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeObjectiveAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _manufacturer: Incomplete | None = ..., _model: Incomplete | None = ..., _lotNumber: Incomplete | None = ..., _serialNumber: Incomplete | None = ..., _nominalMagnification: Incomplete | None = ..., _calibratedMagnification: Incomplete | None = ..., _lensNA: Incomplete | None = ..., _immersion: Incomplete | None = ..., _correction: Incomplete | None = ..., _workingDistance: Incomplete | None = ..., _iris: Incomplete | None = ..., _instrument: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, theManufacturer, current: Incomplete | None = ...): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, theModel, current: Incomplete | None = ...): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, theLotNumber, current: Incomplete | None = ...): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, theSerialNumber, current: Incomplete | None = ...): ...
    def getNominalMagnification(self, current: Incomplete | None = ...): ...
    def setNominalMagnification(self, theNominalMagnification, current: Incomplete | None = ...): ...
    def getCalibratedMagnification(self, current: Incomplete | None = ...): ...
    def setCalibratedMagnification(self, theCalibratedMagnification, current: Incomplete | None = ...): ...
    def getLensNA(self, current: Incomplete | None = ...): ...
    def setLensNA(self, theLensNA, current: Incomplete | None = ...): ...
    def getImmersion(self, current: Incomplete | None = ...): ...
    def setImmersion(self, theImmersion, current: Incomplete | None = ...): ...
    def getCorrection(self, current: Incomplete | None = ...): ...
    def setCorrection(self, theCorrection, current: Incomplete | None = ...): ...
    def getWorkingDistance(self, current: Incomplete | None = ...): ...
    def setWorkingDistance(self, theWorkingDistance, current: Incomplete | None = ...): ...
    def getIris(self, current: Incomplete | None = ...): ...
    def setIris(self, theIris, current: Incomplete | None = ...): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, theInstrument, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addObjectiveAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllObjectiveAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeObjectiveAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllObjectiveAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addObjectiveAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findObjectiveAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeObjectiveAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class ObjectivePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getManufacturer(self, _ctx: Incomplete | None = ...): ...
    def begin_getManufacturer(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getManufacturer(self, _r): ...
    def setManufacturer(self, theManufacturer, _ctx: Incomplete | None = ...): ...
    def begin_setManufacturer(self, theManufacturer, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setManufacturer(self, _r): ...
    def getModel(self, _ctx: Incomplete | None = ...): ...
    def begin_getModel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getModel(self, _r): ...
    def setModel(self, theModel, _ctx: Incomplete | None = ...): ...
    def begin_setModel(self, theModel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setModel(self, _r): ...
    def getLotNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getLotNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLotNumber(self, _r): ...
    def setLotNumber(self, theLotNumber, _ctx: Incomplete | None = ...): ...
    def begin_setLotNumber(self, theLotNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLotNumber(self, _r): ...
    def getSerialNumber(self, _ctx: Incomplete | None = ...): ...
    def begin_getSerialNumber(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSerialNumber(self, _r): ...
    def setSerialNumber(self, theSerialNumber, _ctx: Incomplete | None = ...): ...
    def begin_setSerialNumber(self, theSerialNumber, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSerialNumber(self, _r): ...
    def getNominalMagnification(self, _ctx: Incomplete | None = ...): ...
    def begin_getNominalMagnification(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getNominalMagnification(self, _r): ...
    def setNominalMagnification(self, theNominalMagnification, _ctx: Incomplete | None = ...): ...
    def begin_setNominalMagnification(self, theNominalMagnification, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setNominalMagnification(self, _r): ...
    def getCalibratedMagnification(self, _ctx: Incomplete | None = ...): ...
    def begin_getCalibratedMagnification(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCalibratedMagnification(self, _r): ...
    def setCalibratedMagnification(self, theCalibratedMagnification, _ctx: Incomplete | None = ...): ...
    def begin_setCalibratedMagnification(self, theCalibratedMagnification, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCalibratedMagnification(self, _r): ...
    def getLensNA(self, _ctx: Incomplete | None = ...): ...
    def begin_getLensNA(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLensNA(self, _r): ...
    def setLensNA(self, theLensNA, _ctx: Incomplete | None = ...): ...
    def begin_setLensNA(self, theLensNA, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLensNA(self, _r): ...
    def getImmersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getImmersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getImmersion(self, _r): ...
    def setImmersion(self, theImmersion, _ctx: Incomplete | None = ...): ...
    def begin_setImmersion(self, theImmersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setImmersion(self, _r): ...
    def getCorrection(self, _ctx: Incomplete | None = ...): ...
    def begin_getCorrection(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCorrection(self, _r): ...
    def setCorrection(self, theCorrection, _ctx: Incomplete | None = ...): ...
    def begin_setCorrection(self, theCorrection, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCorrection(self, _r): ...
    def getWorkingDistance(self, _ctx: Incomplete | None = ...): ...
    def begin_getWorkingDistance(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWorkingDistance(self, _r): ...
    def setWorkingDistance(self, theWorkingDistance, _ctx: Incomplete | None = ...): ...
    def begin_setWorkingDistance(self, theWorkingDistance, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWorkingDistance(self, _r): ...
    def getIris(self, _ctx: Incomplete | None = ...): ...
    def begin_getIris(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getIris(self, _r): ...
    def setIris(self, theIris, _ctx: Incomplete | None = ...): ...
    def begin_setIris(self, theIris, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setIris(self, _r): ...
    def getInstrument(self, _ctx: Incomplete | None = ...): ...
    def begin_getInstrument(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getInstrument(self, _r): ...
    def setInstrument(self, theInstrument, _ctx: Incomplete | None = ...): ...
    def begin_setInstrument(self, theInstrument, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setInstrument(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addObjectiveAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addObjectiveAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addObjectiveAnnotationLink(self, _r): ...
    def addAllObjectiveAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllObjectiveAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllObjectiveAnnotationLinkSet(self, _r): ...
    def removeObjectiveAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeObjectiveAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeObjectiveAnnotationLink(self, _r): ...
    def removeAllObjectiveAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllObjectiveAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllObjectiveAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addObjectiveAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addObjectiveAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addObjectiveAnnotationLinkToBoth(self, _r): ...
    def findObjectiveAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findObjectiveAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findObjectiveAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeObjectiveAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeObjectiveAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeObjectiveAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ObjectiveI(Objective):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        manufacturer: Incomplete
        model: Incomplete
        lotNumber: Incomplete
        serialNumber: Incomplete
        nominalMagnification: Incomplete
        calibratedMagnification: Incomplete
        lensNA: Incomplete
        immersion: Incomplete
        correction: Incomplete
        workingDistance: Incomplete
        iris: Incomplete
        instrument: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, manufacturer, model, lotNumber, serialNumber, nominalMagnification, calibratedMagnification, lensNA, immersion, correction, workingDistance, iris, instrument, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    MANUFACTURER: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    LOTNUMBER: ClassVar[str] = ...
    SERIALNUMBER: ClassVar[str] = ...
    NOMINALMAGNIFICATION: ClassVar[str] = ...
    CALIBRATEDMAGNIFICATION: ClassVar[str] = ...
    LENSNA: ClassVar[str] = ...
    IMMERSION: ClassVar[str] = ...
    CORRECTION: ClassVar[str] = ...
    WORKINGDISTANCE: ClassVar[str] = ...
    IRIS: ClassVar[str] = ...
    INSTRUMENT: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadManufacturer(self): ...
    def getManufacturer(self, current: Incomplete | None = ...): ...
    def setManufacturer(self, _manufacturer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLotNumber(self): ...
    def getLotNumber(self, current: Incomplete | None = ...): ...
    def setLotNumber(self, _lotNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSerialNumber(self): ...
    def getSerialNumber(self, current: Incomplete | None = ...): ...
    def setSerialNumber(self, _serialNumber, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNominalMagnification(self): ...
    def getNominalMagnification(self, current: Incomplete | None = ...): ...
    def setNominalMagnification(self, _nominalMagnification, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCalibratedMagnification(self): ...
    def getCalibratedMagnification(self, current: Incomplete | None = ...): ...
    def setCalibratedMagnification(self, _calibratedMagnification, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLensNA(self): ...
    def getLensNA(self, current: Incomplete | None = ...): ...
    def setLensNA(self, _lensNA, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadImmersion(self): ...
    def getImmersion(self, current: Incomplete | None = ...): ...
    def setImmersion(self, _immersion, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCorrection(self): ...
    def getCorrection(self, current: Incomplete | None = ...): ...
    def setCorrection(self, _correction, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWorkingDistance(self): ...
    def getWorkingDistance(self, current: Incomplete | None = ...): ...
    def setWorkingDistance(self, _workingDistance, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadIris(self): ...
    def getIris(self, current: Incomplete | None = ...): ...
    def setIris(self, _iris, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadInstrument(self): ...
    def getInstrument(self, current: Incomplete | None = ...): ...
    def setInstrument(self, _instrument, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addObjectiveAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllObjectiveAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeObjectiveAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllObjectiveAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addObjectiveAnnotationLinkToBoth(self, link, bothSides): ...
    def findObjectiveAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeObjectiveAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ObjectiveAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ObjectiveAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ObjectiveAnnotationLinkI(ObjectiveAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ObjectiveSettings(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getCorrectionCollar: ClassVar[IcePy.Operation] = ...
    _op_setCorrectionCollar: ClassVar[IcePy.Operation] = ...
    _op_getMedium: ClassVar[IcePy.Operation] = ...
    _op_setMedium: ClassVar[IcePy.Operation] = ...
    _op_getRefractiveIndex: ClassVar[IcePy.Operation] = ...
    _op_setRefractiveIndex: ClassVar[IcePy.Operation] = ...
    _op_getObjective: ClassVar[IcePy.Operation] = ...
    _op_setObjective: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _correctionCollar: Incomplete | None = ..., _medium: Incomplete | None = ..., _refractiveIndex: Incomplete | None = ..., _objective: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getCorrectionCollar(self, current: Incomplete | None = ...): ...
    def setCorrectionCollar(self, theCorrectionCollar, current: Incomplete | None = ...): ...
    def getMedium(self, current: Incomplete | None = ...): ...
    def setMedium(self, theMedium, current: Incomplete | None = ...): ...
    def getRefractiveIndex(self, current: Incomplete | None = ...): ...
    def setRefractiveIndex(self, theRefractiveIndex, current: Incomplete | None = ...): ...
    def getObjective(self, current: Incomplete | None = ...): ...
    def setObjective(self, theObjective, current: Incomplete | None = ...): ...

class ObjectiveSettingsPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getCorrectionCollar(self, _ctx: Incomplete | None = ...): ...
    def begin_getCorrectionCollar(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCorrectionCollar(self, _r): ...
    def setCorrectionCollar(self, theCorrectionCollar, _ctx: Incomplete | None = ...): ...
    def begin_setCorrectionCollar(self, theCorrectionCollar, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCorrectionCollar(self, _r): ...
    def getMedium(self, _ctx: Incomplete | None = ...): ...
    def begin_getMedium(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMedium(self, _r): ...
    def setMedium(self, theMedium, _ctx: Incomplete | None = ...): ...
    def begin_setMedium(self, theMedium, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMedium(self, _r): ...
    def getRefractiveIndex(self, _ctx: Incomplete | None = ...): ...
    def begin_getRefractiveIndex(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRefractiveIndex(self, _r): ...
    def setRefractiveIndex(self, theRefractiveIndex, _ctx: Incomplete | None = ...): ...
    def begin_setRefractiveIndex(self, theRefractiveIndex, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRefractiveIndex(self, _r): ...
    def getObjective(self, _ctx: Incomplete | None = ...): ...
    def begin_getObjective(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getObjective(self, _r): ...
    def setObjective(self, theObjective, _ctx: Incomplete | None = ...): ...
    def begin_setObjective(self, theObjective, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setObjective(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ObjectiveSettingsI(ObjectiveSettings):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        correctionCollar: Incomplete
        medium: Incomplete
        refractiveIndex: Incomplete
        objective: Incomplete
        details: Incomplete
        def __init__(self, _cls, correctionCollar, medium, refractiveIndex, objective, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    CORRECTIONCOLLAR: ClassVar[str] = ...
    MEDIUM: ClassVar[str] = ...
    REFRACTIVEINDEX: ClassVar[str] = ...
    OBJECTIVE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadCorrectionCollar(self): ...
    def getCorrectionCollar(self, current: Incomplete | None = ...): ...
    def setCorrectionCollar(self, _correctionCollar, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMedium(self): ...
    def getMedium(self, current: Incomplete | None = ...): ...
    def setMedium(self, _medium, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRefractiveIndex(self): ...
    def getRefractiveIndex(self, current: Incomplete | None = ...): ...
    def setRefractiveIndex(self, _refractiveIndex, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadObjective(self): ...
    def getObjective(self, current: Incomplete | None = ...): ...
    def setObjective(self, _objective, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class OriginalFile(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_unloadPixelsFileMaps: ClassVar[IcePy.Operation] = ...
    _op_sizeOfPixelsFileMaps: ClassVar[IcePy.Operation] = ...
    _op_copyPixelsFileMaps: ClassVar[IcePy.Operation] = ...
    _op_addPixelsOriginalFileMap: ClassVar[IcePy.Operation] = ...
    _op_addAllPixelsOriginalFileMapSet: ClassVar[IcePy.Operation] = ...
    _op_removePixelsOriginalFileMap: ClassVar[IcePy.Operation] = ...
    _op_removeAllPixelsOriginalFileMapSet: ClassVar[IcePy.Operation] = ...
    _op_clearPixelsFileMaps: ClassVar[IcePy.Operation] = ...
    _op_reloadPixelsFileMaps: ClassVar[IcePy.Operation] = ...
    _op_getPixelsFileMapsCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkPixels: ClassVar[IcePy.Operation] = ...
    _op_addPixelsOriginalFileMapToBoth: ClassVar[IcePy.Operation] = ...
    _op_findPixelsOriginalFileMap: ClassVar[IcePy.Operation] = ...
    _op_unlinkPixels: ClassVar[IcePy.Operation] = ...
    _op_removePixelsOriginalFileMapFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedPixelsList: ClassVar[IcePy.Operation] = ...
    _op_getPath: ClassVar[IcePy.Operation] = ...
    _op_setPath: ClassVar[IcePy.Operation] = ...
    _op_getRepo: ClassVar[IcePy.Operation] = ...
    _op_setRepo: ClassVar[IcePy.Operation] = ...
    _op_getSize: ClassVar[IcePy.Operation] = ...
    _op_setSize: ClassVar[IcePy.Operation] = ...
    _op_getAtime: ClassVar[IcePy.Operation] = ...
    _op_setAtime: ClassVar[IcePy.Operation] = ...
    _op_getMtime: ClassVar[IcePy.Operation] = ...
    _op_setMtime: ClassVar[IcePy.Operation] = ...
    _op_getCtime: ClassVar[IcePy.Operation] = ...
    _op_setCtime: ClassVar[IcePy.Operation] = ...
    _op_getHasher: ClassVar[IcePy.Operation] = ...
    _op_setHasher: ClassVar[IcePy.Operation] = ...
    _op_getHash: ClassVar[IcePy.Operation] = ...
    _op_setHash: ClassVar[IcePy.Operation] = ...
    _op_getMimetype: ClassVar[IcePy.Operation] = ...
    _op_setMimetype: ClassVar[IcePy.Operation] = ...
    _op_unloadFilesetEntries: ClassVar[IcePy.Operation] = ...
    _op_sizeOfFilesetEntries: ClassVar[IcePy.Operation] = ...
    _op_copyFilesetEntries: ClassVar[IcePy.Operation] = ...
    _op_addFilesetEntry: ClassVar[IcePy.Operation] = ...
    _op_addAllFilesetEntrySet: ClassVar[IcePy.Operation] = ...
    _op_removeFilesetEntry: ClassVar[IcePy.Operation] = ...
    _op_removeAllFilesetEntrySet: ClassVar[IcePy.Operation] = ...
    _op_clearFilesetEntries: ClassVar[IcePy.Operation] = ...
    _op_reloadFilesetEntries: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addOriginalFileAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllOriginalFileAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeOriginalFileAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllOriginalFileAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addOriginalFileAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findOriginalFileAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeOriginalFileAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _pixelsFileMapsSeq: Incomplete | None = ..., _pixelsFileMapsLoaded: bool = ..., _pixelsFileMapsCountPerOwner: Incomplete | None = ..., _path: Incomplete | None = ..., _repo: Incomplete | None = ..., _size: Incomplete | None = ..., _atime: Incomplete | None = ..., _mtime: Incomplete | None = ..., _ctime: Incomplete | None = ..., _hasher: Incomplete | None = ..., _hash: Incomplete | None = ..., _mimetype: Incomplete | None = ..., _filesetEntriesSeq: Incomplete | None = ..., _filesetEntriesLoaded: bool = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _name: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def unloadPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def sizeOfPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def copyPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def addAllPixelsOriginalFileMapSet(self, targets, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMap(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllPixelsOriginalFileMapSet(self, targets, current: Incomplete | None = ...): ...
    def clearPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def reloadPixelsFileMaps(self, toCopy, current: Incomplete | None = ...): ...
    def getPixelsFileMapsCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkPixels(self, addition, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMapToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findPixelsOriginalFileMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkPixels(self, removal, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMapFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedPixelsList(self, current: Incomplete | None = ...): ...
    def getPath(self, current: Incomplete | None = ...): ...
    def setPath(self, thePath, current: Incomplete | None = ...): ...
    def getRepo(self, current: Incomplete | None = ...): ...
    def setRepo(self, theRepo, current: Incomplete | None = ...): ...
    def getSize(self, current: Incomplete | None = ...): ...
    def setSize(self, theSize, current: Incomplete | None = ...): ...
    def getAtime(self, current: Incomplete | None = ...): ...
    def setAtime(self, theAtime, current: Incomplete | None = ...): ...
    def getMtime(self, current: Incomplete | None = ...): ...
    def setMtime(self, theMtime, current: Incomplete | None = ...): ...
    def getCtime(self, current: Incomplete | None = ...): ...
    def setCtime(self, theCtime, current: Incomplete | None = ...): ...
    def getHasher(self, current: Incomplete | None = ...): ...
    def setHasher(self, theHasher, current: Incomplete | None = ...): ...
    def getHash(self, current: Incomplete | None = ...): ...
    def setHash(self, theHash, current: Incomplete | None = ...): ...
    def getMimetype(self, current: Incomplete | None = ...): ...
    def setMimetype(self, theMimetype, current: Incomplete | None = ...): ...
    def unloadFilesetEntries(self, current: Incomplete | None = ...): ...
    def sizeOfFilesetEntries(self, current: Incomplete | None = ...): ...
    def copyFilesetEntries(self, current: Incomplete | None = ...): ...
    def addFilesetEntry(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetEntry(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def clearFilesetEntries(self, current: Incomplete | None = ...): ...
    def reloadFilesetEntries(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addOriginalFileAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllOriginalFileAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeOriginalFileAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllOriginalFileAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addOriginalFileAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findOriginalFileAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeOriginalFileAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...

class OriginalFilePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def unloadPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadPixelsFileMaps(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadPixelsFileMaps(self, _r): ...
    def sizeOfPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfPixelsFileMaps(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfPixelsFileMaps(self, _r): ...
    def copyPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def begin_copyPixelsFileMaps(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyPixelsFileMaps(self, _r): ...
    def addPixelsOriginalFileMap(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addPixelsOriginalFileMap(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPixelsOriginalFileMap(self, _r): ...
    def addAllPixelsOriginalFileMapSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllPixelsOriginalFileMapSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllPixelsOriginalFileMapSet(self, _r): ...
    def removePixelsOriginalFileMap(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removePixelsOriginalFileMap(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePixelsOriginalFileMap(self, _r): ...
    def removeAllPixelsOriginalFileMapSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllPixelsOriginalFileMapSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllPixelsOriginalFileMapSet(self, _r): ...
    def clearPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def begin_clearPixelsFileMaps(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearPixelsFileMaps(self, _r): ...
    def reloadPixelsFileMaps(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadPixelsFileMaps(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadPixelsFileMaps(self, _r): ...
    def getPixelsFileMapsCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getPixelsFileMapsCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPixelsFileMapsCountPerOwner(self, _r): ...
    def linkPixels(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkPixels(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkPixels(self, _r): ...
    def addPixelsOriginalFileMapToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addPixelsOriginalFileMapToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPixelsOriginalFileMapToBoth(self, _r): ...
    def findPixelsOriginalFileMap(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findPixelsOriginalFileMap(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findPixelsOriginalFileMap(self, _r): ...
    def unlinkPixels(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkPixels(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkPixels(self, _r): ...
    def removePixelsOriginalFileMapFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removePixelsOriginalFileMapFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePixelsOriginalFileMapFromBoth(self, _r): ...
    def linkedPixelsList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedPixelsList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedPixelsList(self, _r): ...
    def getPath(self, _ctx: Incomplete | None = ...): ...
    def begin_getPath(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPath(self, _r): ...
    def setPath(self, thePath, _ctx: Incomplete | None = ...): ...
    def begin_setPath(self, thePath, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPath(self, _r): ...
    def getRepo(self, _ctx: Incomplete | None = ...): ...
    def begin_getRepo(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRepo(self, _r): ...
    def setRepo(self, theRepo, _ctx: Incomplete | None = ...): ...
    def begin_setRepo(self, theRepo, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRepo(self, _r): ...
    def getSize(self, _ctx: Incomplete | None = ...): ...
    def begin_getSize(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSize(self, _r): ...
    def setSize(self, theSize, _ctx: Incomplete | None = ...): ...
    def begin_setSize(self, theSize, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSize(self, _r): ...
    def getAtime(self, _ctx: Incomplete | None = ...): ...
    def begin_getAtime(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAtime(self, _r): ...
    def setAtime(self, theAtime, _ctx: Incomplete | None = ...): ...
    def begin_setAtime(self, theAtime, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setAtime(self, _r): ...
    def getMtime(self, _ctx: Incomplete | None = ...): ...
    def begin_getMtime(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMtime(self, _r): ...
    def setMtime(self, theMtime, _ctx: Incomplete | None = ...): ...
    def begin_setMtime(self, theMtime, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMtime(self, _r): ...
    def getCtime(self, _ctx: Incomplete | None = ...): ...
    def begin_getCtime(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCtime(self, _r): ...
    def setCtime(self, theCtime, _ctx: Incomplete | None = ...): ...
    def begin_setCtime(self, theCtime, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCtime(self, _r): ...
    def getHasher(self, _ctx: Incomplete | None = ...): ...
    def begin_getHasher(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getHasher(self, _r): ...
    def setHasher(self, theHasher, _ctx: Incomplete | None = ...): ...
    def begin_setHasher(self, theHasher, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setHasher(self, _r): ...
    def getHash(self, _ctx: Incomplete | None = ...): ...
    def begin_getHash(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getHash(self, _r): ...
    def setHash(self, theHash, _ctx: Incomplete | None = ...): ...
    def begin_setHash(self, theHash, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setHash(self, _r): ...
    def getMimetype(self, _ctx: Incomplete | None = ...): ...
    def begin_getMimetype(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMimetype(self, _r): ...
    def setMimetype(self, theMimetype, _ctx: Incomplete | None = ...): ...
    def begin_setMimetype(self, theMimetype, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMimetype(self, _r): ...
    def unloadFilesetEntries(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadFilesetEntries(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadFilesetEntries(self, _r): ...
    def sizeOfFilesetEntries(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfFilesetEntries(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfFilesetEntries(self, _r): ...
    def copyFilesetEntries(self, _ctx: Incomplete | None = ...): ...
    def begin_copyFilesetEntries(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyFilesetEntries(self, _r): ...
    def addFilesetEntry(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFilesetEntry(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFilesetEntry(self, _r): ...
    def addAllFilesetEntrySet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFilesetEntrySet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFilesetEntrySet(self, _r): ...
    def removeFilesetEntry(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFilesetEntry(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFilesetEntry(self, _r): ...
    def removeAllFilesetEntrySet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFilesetEntrySet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFilesetEntrySet(self, _r): ...
    def clearFilesetEntries(self, _ctx: Incomplete | None = ...): ...
    def begin_clearFilesetEntries(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearFilesetEntries(self, _r): ...
    def reloadFilesetEntries(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadFilesetEntries(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadFilesetEntries(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addOriginalFileAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addOriginalFileAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addOriginalFileAnnotationLink(self, _r): ...
    def addAllOriginalFileAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllOriginalFileAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllOriginalFileAnnotationLinkSet(self, _r): ...
    def removeOriginalFileAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeOriginalFileAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeOriginalFileAnnotationLink(self, _r): ...
    def removeAllOriginalFileAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllOriginalFileAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllOriginalFileAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addOriginalFileAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addOriginalFileAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addOriginalFileAnnotationLinkToBoth(self, _r): ...
    def findOriginalFileAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findOriginalFileAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findOriginalFileAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeOriginalFileAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeOriginalFileAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeOriginalFileAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class OriginalFileI(OriginalFile):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        pixelsFileMaps: Incomplete
        path: Incomplete
        repo: Incomplete
        size: Incomplete
        atime: Incomplete
        mtime: Incomplete
        ctime: Incomplete
        hasher: Incomplete
        hash: Incomplete
        mimetype: Incomplete
        filesetEntries: Incomplete
        annotationLinks: Incomplete
        name: Incomplete
        details: Incomplete
        def __init__(self, _cls, pixelsFileMaps, path, repo, size, atime, mtime, ctime, hasher, hash, mimetype, filesetEntries, annotationLinks, name, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PIXELSFILEMAPS: ClassVar[str] = ...
    PATH: ClassVar[str] = ...
    REPO: ClassVar[str] = ...
    SIZE: ClassVar[str] = ...
    ATIME: ClassVar[str] = ...
    MTIME: ClassVar[str] = ...
    CTIME: ClassVar[str] = ...
    HASHER: ClassVar[str] = ...
    HASH: ClassVar[str] = ...
    MIMETYPE: ClassVar[str] = ...
    FILESETENTRIES: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def isPixelsFileMapsLoaded(self): ...
    def sizeOfPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def copyPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def iteratePixelsFileMaps(self): ...
    def addPixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def addAllPixelsOriginalFileMapSet(self, targets, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def removeAllPixelsOriginalFileMapSet(self, targets, current: Incomplete | None = ...): ...
    def clearPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def reloadPixelsFileMaps(self, toCopy, current: Incomplete | None = ...): ...
    def getPixelsFileMapsCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkPixels(self, addition, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMapToBoth(self, link, bothSides): ...
    def findPixelsOriginalFileMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkPixels(self, removal, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMapFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedPixelsList(self, current: Incomplete | None = ...): ...
    def unloadPath(self): ...
    def getPath(self, current: Incomplete | None = ...): ...
    def setPath(self, _path, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRepo(self): ...
    def getRepo(self, current: Incomplete | None = ...): ...
    def setRepo(self, _repo, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSize(self): ...
    def getSize(self, current: Incomplete | None = ...): ...
    def setSize(self, _size, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAtime(self): ...
    def getAtime(self, current: Incomplete | None = ...): ...
    def setAtime(self, _atime, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMtime(self): ...
    def getMtime(self, current: Incomplete | None = ...): ...
    def setMtime(self, _mtime, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCtime(self): ...
    def getCtime(self, current: Incomplete | None = ...): ...
    def setCtime(self, _ctime, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadHasher(self): ...
    def getHasher(self, current: Incomplete | None = ...): ...
    def setHasher(self, _hasher, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadHash(self): ...
    def getHash(self, current: Incomplete | None = ...): ...
    def setHash(self, _hash, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMimetype(self): ...
    def getMimetype(self, current: Incomplete | None = ...): ...
    def setMimetype(self, _mimetype, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFilesetEntries(self, current: Incomplete | None = ...): ...
    def isFilesetEntriesLoaded(self): ...
    def sizeOfFilesetEntries(self, current: Incomplete | None = ...): ...
    def copyFilesetEntries(self, current: Incomplete | None = ...): ...
    def iterateFilesetEntries(self): ...
    def addFilesetEntry(self, target, current: Incomplete | None = ...): ...
    def addAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def removeFilesetEntry(self, target, current: Incomplete | None = ...): ...
    def removeAllFilesetEntrySet(self, targets, current: Incomplete | None = ...): ...
    def clearFilesetEntries(self, current: Incomplete | None = ...): ...
    def reloadFilesetEntries(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addOriginalFileAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllOriginalFileAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeOriginalFileAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllOriginalFileAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addOriginalFileAnnotationLinkToBoth(self, link, bothSides): ...
    def findOriginalFileAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeOriginalFileAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class OriginalFileAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class OriginalFileAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class OriginalFileAnnotationLinkI(OriginalFileAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ParseJob(Job):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getParams: ClassVar[IcePy.Operation] = ...
    _op_setParams: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _username: Incomplete | None = ..., _groupname: Incomplete | None = ..., _type: Incomplete | None = ..., _message: Incomplete | None = ..., _status: Incomplete | None = ..., _submitted: Incomplete | None = ..., _scheduledFor: Incomplete | None = ..., _started: Incomplete | None = ..., _finished: Incomplete | None = ..., _originalFileLinksSeq: Incomplete | None = ..., _originalFileLinksLoaded: bool = ..., _originalFileLinksCountPerOwner: Incomplete | None = ..., _params: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getParams(self, current: Incomplete | None = ...): ...
    def setParams(self, theParams, current: Incomplete | None = ...): ...

class ParseJobPrx(JobPrx):
    def getParams(self, _ctx: Incomplete | None = ...): ...
    def begin_getParams(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParams(self, _r): ...
    def setParams(self, theParams, _ctx: Incomplete | None = ...): ...
    def begin_setParams(self, theParams, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParams(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ParseJobI(ParseJob):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        params: Incomplete
        username: Incomplete
        groupname: Incomplete
        type: Incomplete
        message: Incomplete
        status: Incomplete
        submitted: Incomplete
        scheduledFor: Incomplete
        started: Incomplete
        finished: Incomplete
        originalFileLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, params, username, groupname, type, message, status, submitted, scheduledFor, started, finished, originalFileLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARAMS: ClassVar[str] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParams(self): ...
    def getParams(self, current: Incomplete | None = ...): ...
    def setParams(self, _params, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, _username, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, _groupname, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, _submitted, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, _scheduledFor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, _finished, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Path(Shape):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getD: ClassVar[IcePy.Operation] = ...
    _op_setD: ClassVar[IcePy.Operation] = ...
    _op_getTextValue: ClassVar[IcePy.Operation] = ...
    _op_setTextValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theT: Incomplete | None = ..., _theC: Incomplete | None = ..., _roi: Incomplete | None = ..., _locked: Incomplete | None = ..., _transform: Incomplete | None = ..., _fillColor: Incomplete | None = ..., _fillRule: Incomplete | None = ..., _strokeColor: Incomplete | None = ..., _strokeDashArray: Incomplete | None = ..., _strokeWidth: Incomplete | None = ..., _fontFamily: Incomplete | None = ..., _fontSize: Incomplete | None = ..., _fontStyle: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _d: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getD(self, current: Incomplete | None = ...): ...
    def setD(self, theD, current: Incomplete | None = ...): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, theTextValue, current: Incomplete | None = ...): ...

class PathPrx(ShapePrx):
    def getD(self, _ctx: Incomplete | None = ...): ...
    def begin_getD(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getD(self, _r): ...
    def setD(self, theD, _ctx: Incomplete | None = ...): ...
    def begin_setD(self, theD, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setD(self, _r): ...
    def getTextValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTextValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTextValue(self, _r): ...
    def setTextValue(self, theTextValue, _ctx: Incomplete | None = ...): ...
    def begin_setTextValue(self, theTextValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTextValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PathI(Path):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        d: Incomplete
        textValue: Incomplete
        theZ: Incomplete
        theT: Incomplete
        theC: Incomplete
        roi: Incomplete
        locked: Incomplete
        transform: Incomplete
        fillColor: Incomplete
        fillRule: Incomplete
        strokeColor: Incomplete
        strokeDashArray: Incomplete
        strokeWidth: Incomplete
        fontFamily: Incomplete
        fontSize: Incomplete
        fontStyle: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, d, textValue, theZ, theT, theC, roi, locked, transform, fillColor, fillRule, strokeColor, strokeDashArray, strokeWidth, fontFamily, fontSize, fontStyle, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    deprecations_warned: ClassVar[set] = ...
    _field_info: ClassVar[FieldInfo] = ...
    D: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    @staticmethod
    def warn_of_deprecation(item): ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadD(self): ...
    def getD(self, current: Incomplete | None = ...): ...
    def setD(self, _d, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, _locked, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, _transform, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PhotometricInterpretation(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class PhotometricInterpretationPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PhotometricInterpretationI(PhotometricInterpretation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PixelDataJob(Job):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _username: Incomplete | None = ..., _groupname: Incomplete | None = ..., _type: Incomplete | None = ..., _message: Incomplete | None = ..., _status: Incomplete | None = ..., _submitted: Incomplete | None = ..., _scheduledFor: Incomplete | None = ..., _started: Incomplete | None = ..., _finished: Incomplete | None = ..., _originalFileLinksSeq: Incomplete | None = ..., _originalFileLinksLoaded: bool = ..., _originalFileLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PixelDataJobPrx(JobPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PixelDataJobI(PixelDataJob):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        username: Incomplete
        groupname: Incomplete
        type: Incomplete
        message: Incomplete
        status: Incomplete
        submitted: Incomplete
        scheduledFor: Incomplete
        started: Incomplete
        finished: Incomplete
        originalFileLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, username, groupname, type, message, status, submitted, scheduledFor, started, finished, originalFileLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, _username, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, _groupname, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, _submitted, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, _scheduledFor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, _finished, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Pixels(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getImage: ClassVar[IcePy.Operation] = ...
    _op_setImage: ClassVar[IcePy.Operation] = ...
    _op_getRelatedTo: ClassVar[IcePy.Operation] = ...
    _op_setRelatedTo: ClassVar[IcePy.Operation] = ...
    _op_getPixelsType: ClassVar[IcePy.Operation] = ...
    _op_setPixelsType: ClassVar[IcePy.Operation] = ...
    _op_getSignificantBits: ClassVar[IcePy.Operation] = ...
    _op_setSignificantBits: ClassVar[IcePy.Operation] = ...
    _op_getSizeX: ClassVar[IcePy.Operation] = ...
    _op_setSizeX: ClassVar[IcePy.Operation] = ...
    _op_getSizeY: ClassVar[IcePy.Operation] = ...
    _op_setSizeY: ClassVar[IcePy.Operation] = ...
    _op_getSizeZ: ClassVar[IcePy.Operation] = ...
    _op_setSizeZ: ClassVar[IcePy.Operation] = ...
    _op_getSizeC: ClassVar[IcePy.Operation] = ...
    _op_setSizeC: ClassVar[IcePy.Operation] = ...
    _op_getSizeT: ClassVar[IcePy.Operation] = ...
    _op_setSizeT: ClassVar[IcePy.Operation] = ...
    _op_getSha1: ClassVar[IcePy.Operation] = ...
    _op_setSha1: ClassVar[IcePy.Operation] = ...
    _op_getDimensionOrder: ClassVar[IcePy.Operation] = ...
    _op_setDimensionOrder: ClassVar[IcePy.Operation] = ...
    _op_getPhysicalSizeX: ClassVar[IcePy.Operation] = ...
    _op_setPhysicalSizeX: ClassVar[IcePy.Operation] = ...
    _op_getPhysicalSizeY: ClassVar[IcePy.Operation] = ...
    _op_setPhysicalSizeY: ClassVar[IcePy.Operation] = ...
    _op_getPhysicalSizeZ: ClassVar[IcePy.Operation] = ...
    _op_setPhysicalSizeZ: ClassVar[IcePy.Operation] = ...
    _op_getWaveStart: ClassVar[IcePy.Operation] = ...
    _op_setWaveStart: ClassVar[IcePy.Operation] = ...
    _op_getWaveIncrement: ClassVar[IcePy.Operation] = ...
    _op_setWaveIncrement: ClassVar[IcePy.Operation] = ...
    _op_getTimeIncrement: ClassVar[IcePy.Operation] = ...
    _op_setTimeIncrement: ClassVar[IcePy.Operation] = ...
    _op_getMethodology: ClassVar[IcePy.Operation] = ...
    _op_setMethodology: ClassVar[IcePy.Operation] = ...
    _op_unloadPlaneInfo: ClassVar[IcePy.Operation] = ...
    _op_sizeOfPlaneInfo: ClassVar[IcePy.Operation] = ...
    _op_copyPlaneInfo: ClassVar[IcePy.Operation] = ...
    _op_addPlaneInfo: ClassVar[IcePy.Operation] = ...
    _op_addAllPlaneInfoSet: ClassVar[IcePy.Operation] = ...
    _op_removePlaneInfo: ClassVar[IcePy.Operation] = ...
    _op_removeAllPlaneInfoSet: ClassVar[IcePy.Operation] = ...
    _op_clearPlaneInfo: ClassVar[IcePy.Operation] = ...
    _op_reloadPlaneInfo: ClassVar[IcePy.Operation] = ...
    _op_unloadPixelsFileMaps: ClassVar[IcePy.Operation] = ...
    _op_sizeOfPixelsFileMaps: ClassVar[IcePy.Operation] = ...
    _op_copyPixelsFileMaps: ClassVar[IcePy.Operation] = ...
    _op_addPixelsOriginalFileMap: ClassVar[IcePy.Operation] = ...
    _op_addAllPixelsOriginalFileMapSet: ClassVar[IcePy.Operation] = ...
    _op_removePixelsOriginalFileMap: ClassVar[IcePy.Operation] = ...
    _op_removeAllPixelsOriginalFileMapSet: ClassVar[IcePy.Operation] = ...
    _op_clearPixelsFileMaps: ClassVar[IcePy.Operation] = ...
    _op_reloadPixelsFileMaps: ClassVar[IcePy.Operation] = ...
    _op_getPixelsFileMapsCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkOriginalFile: ClassVar[IcePy.Operation] = ...
    _op_addPixelsOriginalFileMapToBoth: ClassVar[IcePy.Operation] = ...
    _op_findPixelsOriginalFileMap: ClassVar[IcePy.Operation] = ...
    _op_unlinkOriginalFile: ClassVar[IcePy.Operation] = ...
    _op_removePixelsOriginalFileMapFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedOriginalFileList: ClassVar[IcePy.Operation] = ...
    _op_unloadChannels: ClassVar[IcePy.Operation] = ...
    _op_sizeOfChannels: ClassVar[IcePy.Operation] = ...
    _op_copyChannels: ClassVar[IcePy.Operation] = ...
    _op_addChannel: ClassVar[IcePy.Operation] = ...
    _op_addAllChannelSet: ClassVar[IcePy.Operation] = ...
    _op_removeChannel: ClassVar[IcePy.Operation] = ...
    _op_removeAllChannelSet: ClassVar[IcePy.Operation] = ...
    _op_clearChannels: ClassVar[IcePy.Operation] = ...
    _op_reloadChannels: ClassVar[IcePy.Operation] = ...
    _op_getChannel: ClassVar[IcePy.Operation] = ...
    _op_setChannel: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryChannel: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryChannel: ClassVar[IcePy.Operation] = ...
    _op_unloadSettings: ClassVar[IcePy.Operation] = ...
    _op_sizeOfSettings: ClassVar[IcePy.Operation] = ...
    _op_copySettings: ClassVar[IcePy.Operation] = ...
    _op_addRenderingDef: ClassVar[IcePy.Operation] = ...
    _op_addAllRenderingDefSet: ClassVar[IcePy.Operation] = ...
    _op_removeRenderingDef: ClassVar[IcePy.Operation] = ...
    _op_removeAllRenderingDefSet: ClassVar[IcePy.Operation] = ...
    _op_clearSettings: ClassVar[IcePy.Operation] = ...
    _op_reloadSettings: ClassVar[IcePy.Operation] = ...
    _op_unloadThumbnails: ClassVar[IcePy.Operation] = ...
    _op_sizeOfThumbnails: ClassVar[IcePy.Operation] = ...
    _op_copyThumbnails: ClassVar[IcePy.Operation] = ...
    _op_addThumbnail: ClassVar[IcePy.Operation] = ...
    _op_addAllThumbnailSet: ClassVar[IcePy.Operation] = ...
    _op_removeThumbnail: ClassVar[IcePy.Operation] = ...
    _op_removeAllThumbnailSet: ClassVar[IcePy.Operation] = ...
    _op_clearThumbnails: ClassVar[IcePy.Operation] = ...
    _op_reloadThumbnails: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _image: Incomplete | None = ..., _relatedTo: Incomplete | None = ..., _pixelsType: Incomplete | None = ..., _significantBits: Incomplete | None = ..., _sizeX: Incomplete | None = ..., _sizeY: Incomplete | None = ..., _sizeZ: Incomplete | None = ..., _sizeC: Incomplete | None = ..., _sizeT: Incomplete | None = ..., _sha1: Incomplete | None = ..., _dimensionOrder: Incomplete | None = ..., _physicalSizeX: Incomplete | None = ..., _physicalSizeY: Incomplete | None = ..., _physicalSizeZ: Incomplete | None = ..., _waveStart: Incomplete | None = ..., _waveIncrement: Incomplete | None = ..., _timeIncrement: Incomplete | None = ..., _methodology: Incomplete | None = ..., _planeInfoSeq: Incomplete | None = ..., _planeInfoLoaded: bool = ..., _pixelsFileMapsSeq: Incomplete | None = ..., _pixelsFileMapsLoaded: bool = ..., _pixelsFileMapsCountPerOwner: Incomplete | None = ..., _channelsSeq: Incomplete | None = ..., _channelsLoaded: bool = ..., _settingsSeq: Incomplete | None = ..., _settingsLoaded: bool = ..., _thumbnailsSeq: Incomplete | None = ..., _thumbnailsLoaded: bool = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(self, theImage, current: Incomplete | None = ...): ...
    def getRelatedTo(self, current: Incomplete | None = ...): ...
    def setRelatedTo(self, theRelatedTo, current: Incomplete | None = ...): ...
    def getPixelsType(self, current: Incomplete | None = ...): ...
    def setPixelsType(self, thePixelsType, current: Incomplete | None = ...): ...
    def getSignificantBits(self, current: Incomplete | None = ...): ...
    def setSignificantBits(self, theSignificantBits, current: Incomplete | None = ...): ...
    def getSizeX(self, current: Incomplete | None = ...): ...
    def setSizeX(self, theSizeX, current: Incomplete | None = ...): ...
    def getSizeY(self, current: Incomplete | None = ...): ...
    def setSizeY(self, theSizeY, current: Incomplete | None = ...): ...
    def getSizeZ(self, current: Incomplete | None = ...): ...
    def setSizeZ(self, theSizeZ, current: Incomplete | None = ...): ...
    def getSizeC(self, current: Incomplete | None = ...): ...
    def setSizeC(self, theSizeC, current: Incomplete | None = ...): ...
    def getSizeT(self, current: Incomplete | None = ...): ...
    def setSizeT(self, theSizeT, current: Incomplete | None = ...): ...
    def getSha1(self, current: Incomplete | None = ...): ...
    def setSha1(self, theSha1, current: Incomplete | None = ...): ...
    def getDimensionOrder(self, current: Incomplete | None = ...): ...
    def setDimensionOrder(self, theDimensionOrder, current: Incomplete | None = ...): ...
    def getPhysicalSizeX(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeX(self, thePhysicalSizeX, current: Incomplete | None = ...): ...
    def getPhysicalSizeY(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeY(self, thePhysicalSizeY, current: Incomplete | None = ...): ...
    def getPhysicalSizeZ(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeZ(self, thePhysicalSizeZ, current: Incomplete | None = ...): ...
    def getWaveStart(self, current: Incomplete | None = ...): ...
    def setWaveStart(self, theWaveStart, current: Incomplete | None = ...): ...
    def getWaveIncrement(self, current: Incomplete | None = ...): ...
    def setWaveIncrement(self, theWaveIncrement, current: Incomplete | None = ...): ...
    def getTimeIncrement(self, current: Incomplete | None = ...): ...
    def setTimeIncrement(self, theTimeIncrement, current: Incomplete | None = ...): ...
    def getMethodology(self, current: Incomplete | None = ...): ...
    def setMethodology(self, theMethodology, current: Incomplete | None = ...): ...
    def unloadPlaneInfo(self, current: Incomplete | None = ...): ...
    def sizeOfPlaneInfo(self, current: Incomplete | None = ...): ...
    def copyPlaneInfo(self, current: Incomplete | None = ...): ...
    def addPlaneInfo(self, target, current: Incomplete | None = ...): ...
    def addAllPlaneInfoSet(self, targets, current: Incomplete | None = ...): ...
    def removePlaneInfo(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllPlaneInfoSet(self, targets, current: Incomplete | None = ...): ...
    def clearPlaneInfo(self, current: Incomplete | None = ...): ...
    def reloadPlaneInfo(self, toCopy, current: Incomplete | None = ...): ...
    def unloadPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def sizeOfPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def copyPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def addAllPixelsOriginalFileMapSet(self, targets, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMap(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllPixelsOriginalFileMapSet(self, targets, current: Incomplete | None = ...): ...
    def clearPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def reloadPixelsFileMaps(self, toCopy, current: Incomplete | None = ...): ...
    def getPixelsFileMapsCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMapToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findPixelsOriginalFileMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMapFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def unloadChannels(self, current: Incomplete | None = ...): ...
    def sizeOfChannels(self, current: Incomplete | None = ...): ...
    def copyChannels(self, current: Incomplete | None = ...): ...
    def addChannel(self, target, current: Incomplete | None = ...): ...
    def addAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannel(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def clearChannels(self, current: Incomplete | None = ...): ...
    def reloadChannels(self, toCopy, current: Incomplete | None = ...): ...
    def getChannel(self, index, current: Incomplete | None = ...): ...
    def setChannel(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryChannel(self, current: Incomplete | None = ...): ...
    def setPrimaryChannel(self, theElement, current: Incomplete | None = ...): ...
    def unloadSettings(self, current: Incomplete | None = ...): ...
    def sizeOfSettings(self, current: Incomplete | None = ...): ...
    def copySettings(self, current: Incomplete | None = ...): ...
    def addRenderingDef(self, target, current: Incomplete | None = ...): ...
    def addAllRenderingDefSet(self, targets, current: Incomplete | None = ...): ...
    def removeRenderingDef(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllRenderingDefSet(self, targets, current: Incomplete | None = ...): ...
    def clearSettings(self, current: Incomplete | None = ...): ...
    def reloadSettings(self, toCopy, current: Incomplete | None = ...): ...
    def unloadThumbnails(self, current: Incomplete | None = ...): ...
    def sizeOfThumbnails(self, current: Incomplete | None = ...): ...
    def copyThumbnails(self, current: Incomplete | None = ...): ...
    def addThumbnail(self, target, current: Incomplete | None = ...): ...
    def addAllThumbnailSet(self, targets, current: Incomplete | None = ...): ...
    def removeThumbnail(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllThumbnailSet(self, targets, current: Incomplete | None = ...): ...
    def clearThumbnails(self, current: Incomplete | None = ...): ...
    def reloadThumbnails(self, toCopy, current: Incomplete | None = ...): ...

class PixelsPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getImage(self, _ctx: Incomplete | None = ...): ...
    def begin_getImage(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getImage(self, _r): ...
    def setImage(self, theImage, _ctx: Incomplete | None = ...): ...
    def begin_setImage(self, theImage, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setImage(self, _r): ...
    def getRelatedTo(self, _ctx: Incomplete | None = ...): ...
    def begin_getRelatedTo(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRelatedTo(self, _r): ...
    def setRelatedTo(self, theRelatedTo, _ctx: Incomplete | None = ...): ...
    def begin_setRelatedTo(self, theRelatedTo, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRelatedTo(self, _r): ...
    def getPixelsType(self, _ctx: Incomplete | None = ...): ...
    def begin_getPixelsType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPixelsType(self, _r): ...
    def setPixelsType(self, thePixelsType, _ctx: Incomplete | None = ...): ...
    def begin_setPixelsType(self, thePixelsType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPixelsType(self, _r): ...
    def getSignificantBits(self, _ctx: Incomplete | None = ...): ...
    def begin_getSignificantBits(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSignificantBits(self, _r): ...
    def setSignificantBits(self, theSignificantBits, _ctx: Incomplete | None = ...): ...
    def begin_setSignificantBits(self, theSignificantBits, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSignificantBits(self, _r): ...
    def getSizeX(self, _ctx: Incomplete | None = ...): ...
    def begin_getSizeX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSizeX(self, _r): ...
    def setSizeX(self, theSizeX, _ctx: Incomplete | None = ...): ...
    def begin_setSizeX(self, theSizeX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSizeX(self, _r): ...
    def getSizeY(self, _ctx: Incomplete | None = ...): ...
    def begin_getSizeY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSizeY(self, _r): ...
    def setSizeY(self, theSizeY, _ctx: Incomplete | None = ...): ...
    def begin_setSizeY(self, theSizeY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSizeY(self, _r): ...
    def getSizeZ(self, _ctx: Incomplete | None = ...): ...
    def begin_getSizeZ(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSizeZ(self, _r): ...
    def setSizeZ(self, theSizeZ, _ctx: Incomplete | None = ...): ...
    def begin_setSizeZ(self, theSizeZ, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSizeZ(self, _r): ...
    def getSizeC(self, _ctx: Incomplete | None = ...): ...
    def begin_getSizeC(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSizeC(self, _r): ...
    def setSizeC(self, theSizeC, _ctx: Incomplete | None = ...): ...
    def begin_setSizeC(self, theSizeC, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSizeC(self, _r): ...
    def getSizeT(self, _ctx: Incomplete | None = ...): ...
    def begin_getSizeT(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSizeT(self, _r): ...
    def setSizeT(self, theSizeT, _ctx: Incomplete | None = ...): ...
    def begin_setSizeT(self, theSizeT, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSizeT(self, _r): ...
    def getSha1(self, _ctx: Incomplete | None = ...): ...
    def begin_getSha1(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSha1(self, _r): ...
    def setSha1(self, theSha1, _ctx: Incomplete | None = ...): ...
    def begin_setSha1(self, theSha1, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSha1(self, _r): ...
    def getDimensionOrder(self, _ctx: Incomplete | None = ...): ...
    def begin_getDimensionOrder(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDimensionOrder(self, _r): ...
    def setDimensionOrder(self, theDimensionOrder, _ctx: Incomplete | None = ...): ...
    def begin_setDimensionOrder(self, theDimensionOrder, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDimensionOrder(self, _r): ...
    def getPhysicalSizeX(self, _ctx: Incomplete | None = ...): ...
    def begin_getPhysicalSizeX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPhysicalSizeX(self, _r): ...
    def setPhysicalSizeX(self, thePhysicalSizeX, _ctx: Incomplete | None = ...): ...
    def begin_setPhysicalSizeX(self, thePhysicalSizeX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPhysicalSizeX(self, _r): ...
    def getPhysicalSizeY(self, _ctx: Incomplete | None = ...): ...
    def begin_getPhysicalSizeY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPhysicalSizeY(self, _r): ...
    def setPhysicalSizeY(self, thePhysicalSizeY, _ctx: Incomplete | None = ...): ...
    def begin_setPhysicalSizeY(self, thePhysicalSizeY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPhysicalSizeY(self, _r): ...
    def getPhysicalSizeZ(self, _ctx: Incomplete | None = ...): ...
    def begin_getPhysicalSizeZ(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPhysicalSizeZ(self, _r): ...
    def setPhysicalSizeZ(self, thePhysicalSizeZ, _ctx: Incomplete | None = ...): ...
    def begin_setPhysicalSizeZ(self, thePhysicalSizeZ, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPhysicalSizeZ(self, _r): ...
    def getWaveStart(self, _ctx: Incomplete | None = ...): ...
    def begin_getWaveStart(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWaveStart(self, _r): ...
    def setWaveStart(self, theWaveStart, _ctx: Incomplete | None = ...): ...
    def begin_setWaveStart(self, theWaveStart, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWaveStart(self, _r): ...
    def getWaveIncrement(self, _ctx: Incomplete | None = ...): ...
    def begin_getWaveIncrement(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWaveIncrement(self, _r): ...
    def setWaveIncrement(self, theWaveIncrement, _ctx: Incomplete | None = ...): ...
    def begin_setWaveIncrement(self, theWaveIncrement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWaveIncrement(self, _r): ...
    def getTimeIncrement(self, _ctx: Incomplete | None = ...): ...
    def begin_getTimeIncrement(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTimeIncrement(self, _r): ...
    def setTimeIncrement(self, theTimeIncrement, _ctx: Incomplete | None = ...): ...
    def begin_setTimeIncrement(self, theTimeIncrement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTimeIncrement(self, _r): ...
    def getMethodology(self, _ctx: Incomplete | None = ...): ...
    def begin_getMethodology(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMethodology(self, _r): ...
    def setMethodology(self, theMethodology, _ctx: Incomplete | None = ...): ...
    def begin_setMethodology(self, theMethodology, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMethodology(self, _r): ...
    def unloadPlaneInfo(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadPlaneInfo(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadPlaneInfo(self, _r): ...
    def sizeOfPlaneInfo(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfPlaneInfo(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfPlaneInfo(self, _r): ...
    def copyPlaneInfo(self, _ctx: Incomplete | None = ...): ...
    def begin_copyPlaneInfo(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyPlaneInfo(self, _r): ...
    def addPlaneInfo(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addPlaneInfo(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPlaneInfo(self, _r): ...
    def addAllPlaneInfoSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllPlaneInfoSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllPlaneInfoSet(self, _r): ...
    def removePlaneInfo(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removePlaneInfo(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePlaneInfo(self, _r): ...
    def removeAllPlaneInfoSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllPlaneInfoSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllPlaneInfoSet(self, _r): ...
    def clearPlaneInfo(self, _ctx: Incomplete | None = ...): ...
    def begin_clearPlaneInfo(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearPlaneInfo(self, _r): ...
    def reloadPlaneInfo(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadPlaneInfo(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadPlaneInfo(self, _r): ...
    def unloadPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadPixelsFileMaps(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadPixelsFileMaps(self, _r): ...
    def sizeOfPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfPixelsFileMaps(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfPixelsFileMaps(self, _r): ...
    def copyPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def begin_copyPixelsFileMaps(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyPixelsFileMaps(self, _r): ...
    def addPixelsOriginalFileMap(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addPixelsOriginalFileMap(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPixelsOriginalFileMap(self, _r): ...
    def addAllPixelsOriginalFileMapSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllPixelsOriginalFileMapSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllPixelsOriginalFileMapSet(self, _r): ...
    def removePixelsOriginalFileMap(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removePixelsOriginalFileMap(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePixelsOriginalFileMap(self, _r): ...
    def removeAllPixelsOriginalFileMapSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllPixelsOriginalFileMapSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllPixelsOriginalFileMapSet(self, _r): ...
    def clearPixelsFileMaps(self, _ctx: Incomplete | None = ...): ...
    def begin_clearPixelsFileMaps(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearPixelsFileMaps(self, _r): ...
    def reloadPixelsFileMaps(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadPixelsFileMaps(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadPixelsFileMaps(self, _r): ...
    def getPixelsFileMapsCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getPixelsFileMapsCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPixelsFileMapsCountPerOwner(self, _r): ...
    def linkOriginalFile(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkOriginalFile(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkOriginalFile(self, _r): ...
    def addPixelsOriginalFileMapToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addPixelsOriginalFileMapToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPixelsOriginalFileMapToBoth(self, _r): ...
    def findPixelsOriginalFileMap(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findPixelsOriginalFileMap(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findPixelsOriginalFileMap(self, _r): ...
    def unlinkOriginalFile(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkOriginalFile(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkOriginalFile(self, _r): ...
    def removePixelsOriginalFileMapFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removePixelsOriginalFileMapFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePixelsOriginalFileMapFromBoth(self, _r): ...
    def linkedOriginalFileList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedOriginalFileList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedOriginalFileList(self, _r): ...
    def unloadChannels(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadChannels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadChannels(self, _r): ...
    def sizeOfChannels(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfChannels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfChannels(self, _r): ...
    def copyChannels(self, _ctx: Incomplete | None = ...): ...
    def begin_copyChannels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyChannels(self, _r): ...
    def addChannel(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addChannel(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addChannel(self, _r): ...
    def addAllChannelSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllChannelSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllChannelSet(self, _r): ...
    def removeChannel(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeChannel(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeChannel(self, _r): ...
    def removeAllChannelSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllChannelSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllChannelSet(self, _r): ...
    def clearChannels(self, _ctx: Incomplete | None = ...): ...
    def begin_clearChannels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearChannels(self, _r): ...
    def reloadChannels(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadChannels(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadChannels(self, _r): ...
    def getChannel(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getChannel(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChannel(self, _r): ...
    def setChannel(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setChannel(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChannel(self, _r): ...
    def getPrimaryChannel(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryChannel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryChannel(self, _r): ...
    def setPrimaryChannel(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryChannel(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryChannel(self, _r): ...
    def unloadSettings(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadSettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadSettings(self, _r): ...
    def sizeOfSettings(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfSettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfSettings(self, _r): ...
    def copySettings(self, _ctx: Incomplete | None = ...): ...
    def begin_copySettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copySettings(self, _r): ...
    def addRenderingDef(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addRenderingDef(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addRenderingDef(self, _r): ...
    def addAllRenderingDefSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllRenderingDefSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllRenderingDefSet(self, _r): ...
    def removeRenderingDef(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeRenderingDef(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeRenderingDef(self, _r): ...
    def removeAllRenderingDefSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllRenderingDefSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllRenderingDefSet(self, _r): ...
    def clearSettings(self, _ctx: Incomplete | None = ...): ...
    def begin_clearSettings(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearSettings(self, _r): ...
    def reloadSettings(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadSettings(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadSettings(self, _r): ...
    def unloadThumbnails(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadThumbnails(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadThumbnails(self, _r): ...
    def sizeOfThumbnails(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfThumbnails(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfThumbnails(self, _r): ...
    def copyThumbnails(self, _ctx: Incomplete | None = ...): ...
    def begin_copyThumbnails(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyThumbnails(self, _r): ...
    def addThumbnail(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addThumbnail(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addThumbnail(self, _r): ...
    def addAllThumbnailSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllThumbnailSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllThumbnailSet(self, _r): ...
    def removeThumbnail(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeThumbnail(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeThumbnail(self, _r): ...
    def removeAllThumbnailSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllThumbnailSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllThumbnailSet(self, _r): ...
    def clearThumbnails(self, _ctx: Incomplete | None = ...): ...
    def begin_clearThumbnails(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearThumbnails(self, _r): ...
    def reloadThumbnails(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadThumbnails(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadThumbnails(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PixelsI(Pixels):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        image: Incomplete
        relatedTo: Incomplete
        pixelsType: Incomplete
        significantBits: Incomplete
        sizeX: Incomplete
        sizeY: Incomplete
        sizeZ: Incomplete
        sizeC: Incomplete
        sizeT: Incomplete
        sha1: Incomplete
        dimensionOrder: Incomplete
        physicalSizeX: Incomplete
        physicalSizeY: Incomplete
        physicalSizeZ: Incomplete
        waveStart: Incomplete
        waveIncrement: Incomplete
        timeIncrement: Incomplete
        methodology: Incomplete
        planeInfo: Incomplete
        pixelsFileMaps: Incomplete
        channels: Incomplete
        settings: Incomplete
        thumbnails: Incomplete
        details: Incomplete
        def __init__(self, _cls, image, relatedTo, pixelsType, significantBits, sizeX, sizeY, sizeZ, sizeC, sizeT, sha1, dimensionOrder, physicalSizeX, physicalSizeY, physicalSizeZ, waveStart, waveIncrement, timeIncrement, methodology, planeInfo, pixelsFileMaps, channels, settings, thumbnails, details) -> None: ...
        def __getnewargs__(self): ...
    deprecations_warned: ClassVar[set] = ...
    _field_info: ClassVar[FieldInfo] = ...
    IMAGE: ClassVar[str] = ...
    RELATEDTO: ClassVar[str] = ...
    PIXELSTYPE: ClassVar[str] = ...
    SIGNIFICANTBITS: ClassVar[str] = ...
    SIZEX: ClassVar[str] = ...
    SIZEY: ClassVar[str] = ...
    SIZEZ: ClassVar[str] = ...
    SIZEC: ClassVar[str] = ...
    SIZET: ClassVar[str] = ...
    SHA1: ClassVar[str] = ...
    DIMENSIONORDER: ClassVar[str] = ...
    PHYSICALSIZEX: ClassVar[str] = ...
    PHYSICALSIZEY: ClassVar[str] = ...
    PHYSICALSIZEZ: ClassVar[str] = ...
    WAVESTART: ClassVar[str] = ...
    WAVEINCREMENT: ClassVar[str] = ...
    TIMEINCREMENT: ClassVar[str] = ...
    METHODOLOGY: ClassVar[str] = ...
    PLANEINFO: ClassVar[str] = ...
    PIXELSFILEMAPS: ClassVar[str] = ...
    CHANNELS: ClassVar[str] = ...
    SETTINGS: ClassVar[str] = ...
    THUMBNAILS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    @staticmethod
    def warn_of_deprecation(item): ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadImage(self): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(self, _image, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRelatedTo(self): ...
    def getRelatedTo(self, current: Incomplete | None = ...): ...
    def setRelatedTo(self, _relatedTo, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPixelsType(self): ...
    def getPixelsType(self, current: Incomplete | None = ...): ...
    def setPixelsType(self, _pixelsType, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSignificantBits(self): ...
    def getSignificantBits(self, current: Incomplete | None = ...): ...
    def setSignificantBits(self, _significantBits, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSizeX(self): ...
    def getSizeX(self, current: Incomplete | None = ...): ...
    def setSizeX(self, _sizeX, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSizeY(self): ...
    def getSizeY(self, current: Incomplete | None = ...): ...
    def setSizeY(self, _sizeY, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSizeZ(self): ...
    def getSizeZ(self, current: Incomplete | None = ...): ...
    def setSizeZ(self, _sizeZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSizeC(self): ...
    def getSizeC(self, current: Incomplete | None = ...): ...
    def setSizeC(self, _sizeC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSizeT(self): ...
    def getSizeT(self, current: Incomplete | None = ...): ...
    def setSizeT(self, _sizeT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSha1(self): ...
    def getSha1(self, current: Incomplete | None = ...): ...
    def setSha1(self, _sha1, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDimensionOrder(self): ...
    def getDimensionOrder(self, current: Incomplete | None = ...): ...
    def setDimensionOrder(self, _dimensionOrder, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPhysicalSizeX(self): ...
    def getPhysicalSizeX(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeX(self, _physicalSizeX, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPhysicalSizeY(self): ...
    def getPhysicalSizeY(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeY(self, _physicalSizeY, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPhysicalSizeZ(self): ...
    def getPhysicalSizeZ(self, current: Incomplete | None = ...): ...
    def setPhysicalSizeZ(self, _physicalSizeZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWaveStart(self): ...
    def getWaveStart(self, current: Incomplete | None = ...): ...
    def setWaveStart(self, _waveStart, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWaveIncrement(self): ...
    def getWaveIncrement(self, current: Incomplete | None = ...): ...
    def setWaveIncrement(self, _waveIncrement, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTimeIncrement(self): ...
    def getTimeIncrement(self, current: Incomplete | None = ...): ...
    def setTimeIncrement(self, _timeIncrement, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMethodology(self): ...
    def getMethodology(self, current: Incomplete | None = ...): ...
    def setMethodology(self, _methodology, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPlaneInfo(self, current: Incomplete | None = ...): ...
    def isPlaneInfoLoaded(self): ...
    def sizeOfPlaneInfo(self, current: Incomplete | None = ...): ...
    def copyPlaneInfo(self, current: Incomplete | None = ...): ...
    def iteratePlaneInfo(self): ...
    def addPlaneInfo(self, target, current: Incomplete | None = ...): ...
    def addAllPlaneInfoSet(self, targets, current: Incomplete | None = ...): ...
    def removePlaneInfo(self, target, current: Incomplete | None = ...): ...
    def removeAllPlaneInfoSet(self, targets, current: Incomplete | None = ...): ...
    def clearPlaneInfo(self, current: Incomplete | None = ...): ...
    def reloadPlaneInfo(self, toCopy, current: Incomplete | None = ...): ...
    def unloadPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def isPixelsFileMapsLoaded(self): ...
    def sizeOfPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def copyPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def iteratePixelsFileMaps(self): ...
    def addPixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def addAllPixelsOriginalFileMapSet(self, targets, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMap(self, target, current: Incomplete | None = ...): ...
    def removeAllPixelsOriginalFileMapSet(self, targets, current: Incomplete | None = ...): ...
    def clearPixelsFileMaps(self, current: Incomplete | None = ...): ...
    def reloadPixelsFileMaps(self, toCopy, current: Incomplete | None = ...): ...
    def getPixelsFileMapsCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addPixelsOriginalFileMapToBoth(self, link, bothSides): ...
    def findPixelsOriginalFileMap(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removePixelsOriginalFileMapFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def unloadChannels(self, current: Incomplete | None = ...): ...
    def isChannelsLoaded(self): ...
    def sizeOfChannels(self, current: Incomplete | None = ...): ...
    def copyChannels(self, current: Incomplete | None = ...): ...
    def iterateChannels(self): ...
    def addChannel(self, target, current: Incomplete | None = ...): ...
    def addAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannel(self, target, current: Incomplete | None = ...): ...
    def removeAllChannelSet(self, targets, current: Incomplete | None = ...): ...
    def clearChannels(self, current: Incomplete | None = ...): ...
    def reloadChannels(self, toCopy, current: Incomplete | None = ...): ...
    def getChannel(self, index, current: Incomplete | None = ...): ...
    def setChannel(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryChannel(self, current: Incomplete | None = ...): ...
    def setPrimaryChannel(self, element, current: Incomplete | None = ...): ...
    def unloadSettings(self, current: Incomplete | None = ...): ...
    def isSettingsLoaded(self): ...
    def sizeOfSettings(self, current: Incomplete | None = ...): ...
    def copySettings(self, current: Incomplete | None = ...): ...
    def iterateSettings(self): ...
    def addRenderingDef(self, target, current: Incomplete | None = ...): ...
    def addAllRenderingDefSet(self, targets, current: Incomplete | None = ...): ...
    def removeRenderingDef(self, target, current: Incomplete | None = ...): ...
    def removeAllRenderingDefSet(self, targets, current: Incomplete | None = ...): ...
    def clearSettings(self, current: Incomplete | None = ...): ...
    def reloadSettings(self, toCopy, current: Incomplete | None = ...): ...
    def unloadThumbnails(self, current: Incomplete | None = ...): ...
    def isThumbnailsLoaded(self): ...
    def sizeOfThumbnails(self, current: Incomplete | None = ...): ...
    def copyThumbnails(self, current: Incomplete | None = ...): ...
    def iterateThumbnails(self): ...
    def addThumbnail(self, target, current: Incomplete | None = ...): ...
    def addAllThumbnailSet(self, targets, current: Incomplete | None = ...): ...
    def removeThumbnail(self, target, current: Incomplete | None = ...): ...
    def removeAllThumbnailSet(self, targets, current: Incomplete | None = ...): ...
    def clearThumbnails(self, current: Incomplete | None = ...): ...
    def reloadThumbnails(self, toCopy, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PixelsOriginalFileMap(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class PixelsOriginalFileMapPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PixelsOriginalFileMapI(PixelsOriginalFileMap):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PixelsType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    _op_getBitSize: ClassVar[IcePy.Operation] = ...
    _op_setBitSize: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ..., _bitSize: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...
    def getBitSize(self, current: Incomplete | None = ...): ...
    def setBitSize(self, theBitSize, current: Incomplete | None = ...): ...

class PixelsTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    def getBitSize(self, _ctx: Incomplete | None = ...): ...
    def begin_getBitSize(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getBitSize(self, _r): ...
    def setBitSize(self, theBitSize, _ctx: Incomplete | None = ...): ...
    def begin_setBitSize(self, theBitSize, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setBitSize(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PixelsTypeI(PixelsType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        bitSize: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, bitSize, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    BITSIZE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBitSize(self): ...
    def getBitSize(self, current: Incomplete | None = ...): ...
    def setBitSize(self, _bitSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PlaneInfo(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getPixels: ClassVar[IcePy.Operation] = ...
    _op_setPixels: ClassVar[IcePy.Operation] = ...
    _op_getTheZ: ClassVar[IcePy.Operation] = ...
    _op_setTheZ: ClassVar[IcePy.Operation] = ...
    _op_getTheC: ClassVar[IcePy.Operation] = ...
    _op_setTheC: ClassVar[IcePy.Operation] = ...
    _op_getTheT: ClassVar[IcePy.Operation] = ...
    _op_setTheT: ClassVar[IcePy.Operation] = ...
    _op_getDeltaT: ClassVar[IcePy.Operation] = ...
    _op_setDeltaT: ClassVar[IcePy.Operation] = ...
    _op_getPositionX: ClassVar[IcePy.Operation] = ...
    _op_setPositionX: ClassVar[IcePy.Operation] = ...
    _op_getPositionY: ClassVar[IcePy.Operation] = ...
    _op_setPositionY: ClassVar[IcePy.Operation] = ...
    _op_getPositionZ: ClassVar[IcePy.Operation] = ...
    _op_setPositionZ: ClassVar[IcePy.Operation] = ...
    _op_getExposureTime: ClassVar[IcePy.Operation] = ...
    _op_setExposureTime: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addPlaneInfoAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllPlaneInfoAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removePlaneInfoAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllPlaneInfoAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addPlaneInfoAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findPlaneInfoAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removePlaneInfoAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _pixels: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theC: Incomplete | None = ..., _theT: Incomplete | None = ..., _deltaT: Incomplete | None = ..., _positionX: Incomplete | None = ..., _positionY: Incomplete | None = ..., _positionZ: Incomplete | None = ..., _exposureTime: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, thePixels, current: Incomplete | None = ...): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, theTheZ, current: Incomplete | None = ...): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, theTheC, current: Incomplete | None = ...): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, theTheT, current: Incomplete | None = ...): ...
    def getDeltaT(self, current: Incomplete | None = ...): ...
    def setDeltaT(self, theDeltaT, current: Incomplete | None = ...): ...
    def getPositionX(self, current: Incomplete | None = ...): ...
    def setPositionX(self, thePositionX, current: Incomplete | None = ...): ...
    def getPositionY(self, current: Incomplete | None = ...): ...
    def setPositionY(self, thePositionY, current: Incomplete | None = ...): ...
    def getPositionZ(self, current: Incomplete | None = ...): ...
    def setPositionZ(self, thePositionZ, current: Incomplete | None = ...): ...
    def getExposureTime(self, current: Incomplete | None = ...): ...
    def setExposureTime(self, theExposureTime, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addPlaneInfoAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllPlaneInfoAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removePlaneInfoAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllPlaneInfoAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addPlaneInfoAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findPlaneInfoAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlaneInfoAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class PlaneInfoPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getPixels(self, _ctx: Incomplete | None = ...): ...
    def begin_getPixels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPixels(self, _r): ...
    def setPixels(self, thePixels, _ctx: Incomplete | None = ...): ...
    def begin_setPixels(self, thePixels, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPixels(self, _r): ...
    def getTheZ(self, _ctx: Incomplete | None = ...): ...
    def begin_getTheZ(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTheZ(self, _r): ...
    def setTheZ(self, theTheZ, _ctx: Incomplete | None = ...): ...
    def begin_setTheZ(self, theTheZ, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTheZ(self, _r): ...
    def getTheC(self, _ctx: Incomplete | None = ...): ...
    def begin_getTheC(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTheC(self, _r): ...
    def setTheC(self, theTheC, _ctx: Incomplete | None = ...): ...
    def begin_setTheC(self, theTheC, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTheC(self, _r): ...
    def getTheT(self, _ctx: Incomplete | None = ...): ...
    def begin_getTheT(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTheT(self, _r): ...
    def setTheT(self, theTheT, _ctx: Incomplete | None = ...): ...
    def begin_setTheT(self, theTheT, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTheT(self, _r): ...
    def getDeltaT(self, _ctx: Incomplete | None = ...): ...
    def begin_getDeltaT(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDeltaT(self, _r): ...
    def setDeltaT(self, theDeltaT, _ctx: Incomplete | None = ...): ...
    def begin_setDeltaT(self, theDeltaT, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDeltaT(self, _r): ...
    def getPositionX(self, _ctx: Incomplete | None = ...): ...
    def begin_getPositionX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPositionX(self, _r): ...
    def setPositionX(self, thePositionX, _ctx: Incomplete | None = ...): ...
    def begin_setPositionX(self, thePositionX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPositionX(self, _r): ...
    def getPositionY(self, _ctx: Incomplete | None = ...): ...
    def begin_getPositionY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPositionY(self, _r): ...
    def setPositionY(self, thePositionY, _ctx: Incomplete | None = ...): ...
    def begin_setPositionY(self, thePositionY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPositionY(self, _r): ...
    def getPositionZ(self, _ctx: Incomplete | None = ...): ...
    def begin_getPositionZ(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPositionZ(self, _r): ...
    def setPositionZ(self, thePositionZ, _ctx: Incomplete | None = ...): ...
    def begin_setPositionZ(self, thePositionZ, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPositionZ(self, _r): ...
    def getExposureTime(self, _ctx: Incomplete | None = ...): ...
    def begin_getExposureTime(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExposureTime(self, _r): ...
    def setExposureTime(self, theExposureTime, _ctx: Incomplete | None = ...): ...
    def begin_setExposureTime(self, theExposureTime, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setExposureTime(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addPlaneInfoAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addPlaneInfoAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPlaneInfoAnnotationLink(self, _r): ...
    def addAllPlaneInfoAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllPlaneInfoAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllPlaneInfoAnnotationLinkSet(self, _r): ...
    def removePlaneInfoAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removePlaneInfoAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePlaneInfoAnnotationLink(self, _r): ...
    def removeAllPlaneInfoAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllPlaneInfoAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllPlaneInfoAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addPlaneInfoAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addPlaneInfoAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPlaneInfoAnnotationLinkToBoth(self, _r): ...
    def findPlaneInfoAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findPlaneInfoAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findPlaneInfoAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removePlaneInfoAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removePlaneInfoAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePlaneInfoAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PlaneInfoI(PlaneInfo):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        pixels: Incomplete
        theZ: Incomplete
        theC: Incomplete
        theT: Incomplete
        deltaT: Incomplete
        positionX: Incomplete
        positionY: Incomplete
        positionZ: Incomplete
        exposureTime: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, pixels, theZ, theC, theT, deltaT, positionX, positionY, positionZ, exposureTime, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PIXELS: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    DELTAT: ClassVar[str] = ...
    POSITIONX: ClassVar[str] = ...
    POSITIONY: ClassVar[str] = ...
    POSITIONZ: ClassVar[str] = ...
    EXPOSURETIME: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadPixels(self): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, _pixels, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDeltaT(self): ...
    def getDeltaT(self, current: Incomplete | None = ...): ...
    def setDeltaT(self, _deltaT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPositionX(self): ...
    def getPositionX(self, current: Incomplete | None = ...): ...
    def setPositionX(self, _positionX, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPositionY(self): ...
    def getPositionY(self, current: Incomplete | None = ...): ...
    def setPositionY(self, _positionY, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPositionZ(self): ...
    def getPositionZ(self, current: Incomplete | None = ...): ...
    def setPositionZ(self, _positionZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadExposureTime(self): ...
    def getExposureTime(self, current: Incomplete | None = ...): ...
    def setExposureTime(self, _exposureTime, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addPlaneInfoAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllPlaneInfoAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removePlaneInfoAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllPlaneInfoAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addPlaneInfoAnnotationLinkToBoth(self, link, bothSides): ...
    def findPlaneInfoAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlaneInfoAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PlaneInfoAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class PlaneInfoAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PlaneInfoAnnotationLinkI(PlaneInfoAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PlaneSlicingContext(CodomainMapContext):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getUpperLimit: ClassVar[IcePy.Operation] = ...
    _op_setUpperLimit: ClassVar[IcePy.Operation] = ...
    _op_getLowerLimit: ClassVar[IcePy.Operation] = ...
    _op_setLowerLimit: ClassVar[IcePy.Operation] = ...
    _op_getPlaneSelected: ClassVar[IcePy.Operation] = ...
    _op_setPlaneSelected: ClassVar[IcePy.Operation] = ...
    _op_getPlanePrevious: ClassVar[IcePy.Operation] = ...
    _op_setPlanePrevious: ClassVar[IcePy.Operation] = ...
    _op_getConstant: ClassVar[IcePy.Operation] = ...
    _op_setConstant: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _channelBinding: Incomplete | None = ..., _upperLimit: Incomplete | None = ..., _lowerLimit: Incomplete | None = ..., _planeSelected: Incomplete | None = ..., _planePrevious: Incomplete | None = ..., _constant: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getUpperLimit(self, current: Incomplete | None = ...): ...
    def setUpperLimit(self, theUpperLimit, current: Incomplete | None = ...): ...
    def getLowerLimit(self, current: Incomplete | None = ...): ...
    def setLowerLimit(self, theLowerLimit, current: Incomplete | None = ...): ...
    def getPlaneSelected(self, current: Incomplete | None = ...): ...
    def setPlaneSelected(self, thePlaneSelected, current: Incomplete | None = ...): ...
    def getPlanePrevious(self, current: Incomplete | None = ...): ...
    def setPlanePrevious(self, thePlanePrevious, current: Incomplete | None = ...): ...
    def getConstant(self, current: Incomplete | None = ...): ...
    def setConstant(self, theConstant, current: Incomplete | None = ...): ...

class PlaneSlicingContextPrx(CodomainMapContextPrx):
    def getUpperLimit(self, _ctx: Incomplete | None = ...): ...
    def begin_getUpperLimit(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUpperLimit(self, _r): ...
    def setUpperLimit(self, theUpperLimit, _ctx: Incomplete | None = ...): ...
    def begin_setUpperLimit(self, theUpperLimit, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUpperLimit(self, _r): ...
    def getLowerLimit(self, _ctx: Incomplete | None = ...): ...
    def begin_getLowerLimit(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getLowerLimit(self, _r): ...
    def setLowerLimit(self, theLowerLimit, _ctx: Incomplete | None = ...): ...
    def begin_setLowerLimit(self, theLowerLimit, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setLowerLimit(self, _r): ...
    def getPlaneSelected(self, _ctx: Incomplete | None = ...): ...
    def begin_getPlaneSelected(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPlaneSelected(self, _r): ...
    def setPlaneSelected(self, thePlaneSelected, _ctx: Incomplete | None = ...): ...
    def begin_setPlaneSelected(self, thePlaneSelected, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPlaneSelected(self, _r): ...
    def getPlanePrevious(self, _ctx: Incomplete | None = ...): ...
    def begin_getPlanePrevious(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPlanePrevious(self, _r): ...
    def setPlanePrevious(self, thePlanePrevious, _ctx: Incomplete | None = ...): ...
    def begin_setPlanePrevious(self, thePlanePrevious, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPlanePrevious(self, _r): ...
    def getConstant(self, _ctx: Incomplete | None = ...): ...
    def begin_getConstant(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getConstant(self, _r): ...
    def setConstant(self, theConstant, _ctx: Incomplete | None = ...): ...
    def begin_setConstant(self, theConstant, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setConstant(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PlaneSlicingContextI(PlaneSlicingContext):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        upperLimit: Incomplete
        lowerLimit: Incomplete
        planeSelected: Incomplete
        planePrevious: Incomplete
        constant: Incomplete
        channelBinding: Incomplete
        details: Incomplete
        def __init__(self, _cls, upperLimit, lowerLimit, planeSelected, planePrevious, constant, channelBinding, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    UPPERLIMIT: ClassVar[str] = ...
    LOWERLIMIT: ClassVar[str] = ...
    PLANESELECTED: ClassVar[str] = ...
    PLANEPREVIOUS: ClassVar[str] = ...
    CONSTANT: ClassVar[str] = ...
    CHANNELBINDING: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadUpperLimit(self): ...
    def getUpperLimit(self, current: Incomplete | None = ...): ...
    def setUpperLimit(self, _upperLimit, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLowerLimit(self): ...
    def getLowerLimit(self, current: Incomplete | None = ...): ...
    def setLowerLimit(self, _lowerLimit, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPlaneSelected(self): ...
    def getPlaneSelected(self, current: Incomplete | None = ...): ...
    def setPlaneSelected(self, _planeSelected, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPlanePrevious(self): ...
    def getPlanePrevious(self, current: Incomplete | None = ...): ...
    def setPlanePrevious(self, _planePrevious, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadConstant(self): ...
    def getConstant(self, current: Incomplete | None = ...): ...
    def setConstant(self, _constant, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChannelBinding(self): ...
    def getChannelBinding(self, current: Incomplete | None = ...): ...
    def setChannelBinding(self, _channelBinding, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Plate(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getDefaultSample: ClassVar[IcePy.Operation] = ...
    _op_setDefaultSample: ClassVar[IcePy.Operation] = ...
    _op_getColumnNamingConvention: ClassVar[IcePy.Operation] = ...
    _op_setColumnNamingConvention: ClassVar[IcePy.Operation] = ...
    _op_getRowNamingConvention: ClassVar[IcePy.Operation] = ...
    _op_setRowNamingConvention: ClassVar[IcePy.Operation] = ...
    _op_getWellOriginX: ClassVar[IcePy.Operation] = ...
    _op_setWellOriginX: ClassVar[IcePy.Operation] = ...
    _op_getWellOriginY: ClassVar[IcePy.Operation] = ...
    _op_setWellOriginY: ClassVar[IcePy.Operation] = ...
    _op_getRows: ClassVar[IcePy.Operation] = ...
    _op_setRows: ClassVar[IcePy.Operation] = ...
    _op_getColumns: ClassVar[IcePy.Operation] = ...
    _op_setColumns: ClassVar[IcePy.Operation] = ...
    _op_getStatus: ClassVar[IcePy.Operation] = ...
    _op_setStatus: ClassVar[IcePy.Operation] = ...
    _op_getExternalIdentifier: ClassVar[IcePy.Operation] = ...
    _op_setExternalIdentifier: ClassVar[IcePy.Operation] = ...
    _op_unloadScreenLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfScreenLinks: ClassVar[IcePy.Operation] = ...
    _op_copyScreenLinks: ClassVar[IcePy.Operation] = ...
    _op_addScreenPlateLink: ClassVar[IcePy.Operation] = ...
    _op_addAllScreenPlateLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeScreenPlateLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllScreenPlateLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearScreenLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadScreenLinks: ClassVar[IcePy.Operation] = ...
    _op_getScreenLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkScreen: ClassVar[IcePy.Operation] = ...
    _op_addScreenPlateLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findScreenPlateLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkScreen: ClassVar[IcePy.Operation] = ...
    _op_removeScreenPlateLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedScreenList: ClassVar[IcePy.Operation] = ...
    _op_unloadWells: ClassVar[IcePy.Operation] = ...
    _op_sizeOfWells: ClassVar[IcePy.Operation] = ...
    _op_copyWells: ClassVar[IcePy.Operation] = ...
    _op_addWell: ClassVar[IcePy.Operation] = ...
    _op_addAllWellSet: ClassVar[IcePy.Operation] = ...
    _op_removeWell: ClassVar[IcePy.Operation] = ...
    _op_removeAllWellSet: ClassVar[IcePy.Operation] = ...
    _op_clearWells: ClassVar[IcePy.Operation] = ...
    _op_reloadWells: ClassVar[IcePy.Operation] = ...
    _op_unloadPlateAcquisitions: ClassVar[IcePy.Operation] = ...
    _op_sizeOfPlateAcquisitions: ClassVar[IcePy.Operation] = ...
    _op_copyPlateAcquisitions: ClassVar[IcePy.Operation] = ...
    _op_addPlateAcquisition: ClassVar[IcePy.Operation] = ...
    _op_addAllPlateAcquisitionSet: ClassVar[IcePy.Operation] = ...
    _op_removePlateAcquisition: ClassVar[IcePy.Operation] = ...
    _op_removeAllPlateAcquisitionSet: ClassVar[IcePy.Operation] = ...
    _op_clearPlateAcquisitions: ClassVar[IcePy.Operation] = ...
    _op_reloadPlateAcquisitions: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addPlateAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllPlateAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removePlateAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllPlateAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addPlateAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findPlateAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removePlateAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _defaultSample: Incomplete | None = ..., _columnNamingConvention: Incomplete | None = ..., _rowNamingConvention: Incomplete | None = ..., _wellOriginX: Incomplete | None = ..., _wellOriginY: Incomplete | None = ..., _rows: Incomplete | None = ..., _columns: Incomplete | None = ..., _status: Incomplete | None = ..., _externalIdentifier: Incomplete | None = ..., _screenLinksSeq: Incomplete | None = ..., _screenLinksLoaded: bool = ..., _screenLinksCountPerOwner: Incomplete | None = ..., _wellsSeq: Incomplete | None = ..., _wellsLoaded: bool = ..., _plateAcquisitionsSeq: Incomplete | None = ..., _plateAcquisitionsLoaded: bool = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getDefaultSample(self, current: Incomplete | None = ...): ...
    def setDefaultSample(self, theDefaultSample, current: Incomplete | None = ...): ...
    def getColumnNamingConvention(self, current: Incomplete | None = ...): ...
    def setColumnNamingConvention(self, theColumnNamingConvention, current: Incomplete | None = ...): ...
    def getRowNamingConvention(self, current: Incomplete | None = ...): ...
    def setRowNamingConvention(self, theRowNamingConvention, current: Incomplete | None = ...): ...
    def getWellOriginX(self, current: Incomplete | None = ...): ...
    def setWellOriginX(self, theWellOriginX, current: Incomplete | None = ...): ...
    def getWellOriginY(self, current: Incomplete | None = ...): ...
    def setWellOriginY(self, theWellOriginY, current: Incomplete | None = ...): ...
    def getRows(self, current: Incomplete | None = ...): ...
    def setRows(self, theRows, current: Incomplete | None = ...): ...
    def getColumns(self, current: Incomplete | None = ...): ...
    def setColumns(self, theColumns, current: Incomplete | None = ...): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, theStatus, current: Incomplete | None = ...): ...
    def getExternalIdentifier(self, current: Incomplete | None = ...): ...
    def setExternalIdentifier(self, theExternalIdentifier, current: Incomplete | None = ...): ...
    def unloadScreenLinks(self, current: Incomplete | None = ...): ...
    def sizeOfScreenLinks(self, current: Incomplete | None = ...): ...
    def copyScreenLinks(self, current: Incomplete | None = ...): ...
    def addScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeScreenPlateLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearScreenLinks(self, current: Incomplete | None = ...): ...
    def reloadScreenLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getScreenLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkScreen(self, addition, current: Incomplete | None = ...): ...
    def addScreenPlateLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findScreenPlateLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkScreen(self, removal, current: Incomplete | None = ...): ...
    def removeScreenPlateLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedScreenList(self, current: Incomplete | None = ...): ...
    def unloadWells(self, current: Incomplete | None = ...): ...
    def sizeOfWells(self, current: Incomplete | None = ...): ...
    def copyWells(self, current: Incomplete | None = ...): ...
    def addWell(self, target, current: Incomplete | None = ...): ...
    def addAllWellSet(self, targets, current: Incomplete | None = ...): ...
    def removeWell(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellSet(self, targets, current: Incomplete | None = ...): ...
    def clearWells(self, current: Incomplete | None = ...): ...
    def reloadWells(self, toCopy, current: Incomplete | None = ...): ...
    def unloadPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def sizeOfPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def copyPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def addPlateAcquisition(self, target, current: Incomplete | None = ...): ...
    def addAllPlateAcquisitionSet(self, targets, current: Incomplete | None = ...): ...
    def removePlateAcquisition(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllPlateAcquisitionSet(self, targets, current: Incomplete | None = ...): ...
    def clearPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def reloadPlateAcquisitions(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addPlateAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllPlateAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removePlateAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllPlateAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addPlateAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findPlateAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlateAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class PlatePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getDefaultSample(self, _ctx: Incomplete | None = ...): ...
    def begin_getDefaultSample(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDefaultSample(self, _r): ...
    def setDefaultSample(self, theDefaultSample, _ctx: Incomplete | None = ...): ...
    def begin_setDefaultSample(self, theDefaultSample, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDefaultSample(self, _r): ...
    def getColumnNamingConvention(self, _ctx: Incomplete | None = ...): ...
    def begin_getColumnNamingConvention(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getColumnNamingConvention(self, _r): ...
    def setColumnNamingConvention(self, theColumnNamingConvention, _ctx: Incomplete | None = ...): ...
    def begin_setColumnNamingConvention(self, theColumnNamingConvention, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setColumnNamingConvention(self, _r): ...
    def getRowNamingConvention(self, _ctx: Incomplete | None = ...): ...
    def begin_getRowNamingConvention(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRowNamingConvention(self, _r): ...
    def setRowNamingConvention(self, theRowNamingConvention, _ctx: Incomplete | None = ...): ...
    def begin_setRowNamingConvention(self, theRowNamingConvention, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRowNamingConvention(self, _r): ...
    def getWellOriginX(self, _ctx: Incomplete | None = ...): ...
    def begin_getWellOriginX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWellOriginX(self, _r): ...
    def setWellOriginX(self, theWellOriginX, _ctx: Incomplete | None = ...): ...
    def begin_setWellOriginX(self, theWellOriginX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWellOriginX(self, _r): ...
    def getWellOriginY(self, _ctx: Incomplete | None = ...): ...
    def begin_getWellOriginY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWellOriginY(self, _r): ...
    def setWellOriginY(self, theWellOriginY, _ctx: Incomplete | None = ...): ...
    def begin_setWellOriginY(self, theWellOriginY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWellOriginY(self, _r): ...
    def getRows(self, _ctx: Incomplete | None = ...): ...
    def begin_getRows(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRows(self, _r): ...
    def setRows(self, theRows, _ctx: Incomplete | None = ...): ...
    def begin_setRows(self, theRows, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRows(self, _r): ...
    def getColumns(self, _ctx: Incomplete | None = ...): ...
    def begin_getColumns(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getColumns(self, _r): ...
    def setColumns(self, theColumns, _ctx: Incomplete | None = ...): ...
    def begin_setColumns(self, theColumns, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setColumns(self, _r): ...
    def getStatus(self, _ctx: Incomplete | None = ...): ...
    def begin_getStatus(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStatus(self, _r): ...
    def setStatus(self, theStatus, _ctx: Incomplete | None = ...): ...
    def begin_setStatus(self, theStatus, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStatus(self, _r): ...
    def getExternalIdentifier(self, _ctx: Incomplete | None = ...): ...
    def begin_getExternalIdentifier(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExternalIdentifier(self, _r): ...
    def setExternalIdentifier(self, theExternalIdentifier, _ctx: Incomplete | None = ...): ...
    def begin_setExternalIdentifier(self, theExternalIdentifier, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setExternalIdentifier(self, _r): ...
    def unloadScreenLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadScreenLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadScreenLinks(self, _r): ...
    def sizeOfScreenLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfScreenLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfScreenLinks(self, _r): ...
    def copyScreenLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyScreenLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyScreenLinks(self, _r): ...
    def addScreenPlateLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addScreenPlateLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addScreenPlateLink(self, _r): ...
    def addAllScreenPlateLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllScreenPlateLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllScreenPlateLinkSet(self, _r): ...
    def removeScreenPlateLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeScreenPlateLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeScreenPlateLink(self, _r): ...
    def removeAllScreenPlateLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllScreenPlateLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllScreenPlateLinkSet(self, _r): ...
    def clearScreenLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearScreenLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearScreenLinks(self, _r): ...
    def reloadScreenLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadScreenLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadScreenLinks(self, _r): ...
    def getScreenLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getScreenLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getScreenLinksCountPerOwner(self, _r): ...
    def linkScreen(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkScreen(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkScreen(self, _r): ...
    def addScreenPlateLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addScreenPlateLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addScreenPlateLinkToBoth(self, _r): ...
    def findScreenPlateLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findScreenPlateLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findScreenPlateLink(self, _r): ...
    def unlinkScreen(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkScreen(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkScreen(self, _r): ...
    def removeScreenPlateLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeScreenPlateLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeScreenPlateLinkFromBoth(self, _r): ...
    def linkedScreenList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedScreenList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedScreenList(self, _r): ...
    def unloadWells(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadWells(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadWells(self, _r): ...
    def sizeOfWells(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfWells(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfWells(self, _r): ...
    def copyWells(self, _ctx: Incomplete | None = ...): ...
    def begin_copyWells(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyWells(self, _r): ...
    def addWell(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addWell(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addWell(self, _r): ...
    def addAllWellSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllWellSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllWellSet(self, _r): ...
    def removeWell(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeWell(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeWell(self, _r): ...
    def removeAllWellSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllWellSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllWellSet(self, _r): ...
    def clearWells(self, _ctx: Incomplete | None = ...): ...
    def begin_clearWells(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearWells(self, _r): ...
    def reloadWells(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadWells(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadWells(self, _r): ...
    def unloadPlateAcquisitions(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadPlateAcquisitions(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadPlateAcquisitions(self, _r): ...
    def sizeOfPlateAcquisitions(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfPlateAcquisitions(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfPlateAcquisitions(self, _r): ...
    def copyPlateAcquisitions(self, _ctx: Incomplete | None = ...): ...
    def begin_copyPlateAcquisitions(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyPlateAcquisitions(self, _r): ...
    def addPlateAcquisition(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addPlateAcquisition(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPlateAcquisition(self, _r): ...
    def addAllPlateAcquisitionSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllPlateAcquisitionSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllPlateAcquisitionSet(self, _r): ...
    def removePlateAcquisition(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removePlateAcquisition(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePlateAcquisition(self, _r): ...
    def removeAllPlateAcquisitionSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllPlateAcquisitionSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllPlateAcquisitionSet(self, _r): ...
    def clearPlateAcquisitions(self, _ctx: Incomplete | None = ...): ...
    def begin_clearPlateAcquisitions(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearPlateAcquisitions(self, _r): ...
    def reloadPlateAcquisitions(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadPlateAcquisitions(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadPlateAcquisitions(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addPlateAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addPlateAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPlateAnnotationLink(self, _r): ...
    def addAllPlateAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllPlateAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllPlateAnnotationLinkSet(self, _r): ...
    def removePlateAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removePlateAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePlateAnnotationLink(self, _r): ...
    def removeAllPlateAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllPlateAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllPlateAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addPlateAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addPlateAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPlateAnnotationLinkToBoth(self, _r): ...
    def findPlateAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findPlateAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findPlateAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removePlateAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removePlateAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePlateAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PlateI(Plate):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        defaultSample: Incomplete
        columnNamingConvention: Incomplete
        rowNamingConvention: Incomplete
        wellOriginX: Incomplete
        wellOriginY: Incomplete
        rows: Incomplete
        columns: Incomplete
        status: Incomplete
        externalIdentifier: Incomplete
        screenLinks: Incomplete
        wells: Incomplete
        plateAcquisitions: Incomplete
        annotationLinks: Incomplete
        name: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, defaultSample, columnNamingConvention, rowNamingConvention, wellOriginX, wellOriginY, rows, columns, status, externalIdentifier, screenLinks, wells, plateAcquisitions, annotationLinks, name, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    DEFAULTSAMPLE: ClassVar[str] = ...
    COLUMNNAMINGCONVENTION: ClassVar[str] = ...
    ROWNAMINGCONVENTION: ClassVar[str] = ...
    WELLORIGINX: ClassVar[str] = ...
    WELLORIGINY: ClassVar[str] = ...
    ROWS: ClassVar[str] = ...
    COLUMNS: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    EXTERNALIDENTIFIER: ClassVar[str] = ...
    SCREENLINKS: ClassVar[str] = ...
    WELLS: ClassVar[str] = ...
    PLATEACQUISITIONS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadDefaultSample(self): ...
    def getDefaultSample(self, current: Incomplete | None = ...): ...
    def setDefaultSample(self, _defaultSample, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadColumnNamingConvention(self): ...
    def getColumnNamingConvention(self, current: Incomplete | None = ...): ...
    def setColumnNamingConvention(self, _columnNamingConvention, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRowNamingConvention(self): ...
    def getRowNamingConvention(self, current: Incomplete | None = ...): ...
    def setRowNamingConvention(self, _rowNamingConvention, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWellOriginX(self): ...
    def getWellOriginX(self, current: Incomplete | None = ...): ...
    def setWellOriginX(self, _wellOriginX, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWellOriginY(self): ...
    def getWellOriginY(self, current: Incomplete | None = ...): ...
    def setWellOriginY(self, _wellOriginY, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRows(self): ...
    def getRows(self, current: Incomplete | None = ...): ...
    def setRows(self, _rows, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadColumns(self): ...
    def getColumns(self, current: Incomplete | None = ...): ...
    def setColumns(self, _columns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadExternalIdentifier(self): ...
    def getExternalIdentifier(self, current: Incomplete | None = ...): ...
    def setExternalIdentifier(self, _externalIdentifier, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScreenLinks(self, current: Incomplete | None = ...): ...
    def isScreenLinksLoaded(self): ...
    def sizeOfScreenLinks(self, current: Incomplete | None = ...): ...
    def copyScreenLinks(self, current: Incomplete | None = ...): ...
    def iterateScreenLinks(self): ...
    def addScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def removeAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearScreenLinks(self, current: Incomplete | None = ...): ...
    def reloadScreenLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getScreenLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkScreen(self, addition, current: Incomplete | None = ...): ...
    def addScreenPlateLinkToBoth(self, link, bothSides): ...
    def findScreenPlateLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkScreen(self, removal, current: Incomplete | None = ...): ...
    def removeScreenPlateLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedScreenList(self, current: Incomplete | None = ...): ...
    def unloadWells(self, current: Incomplete | None = ...): ...
    def isWellsLoaded(self): ...
    def sizeOfWells(self, current: Incomplete | None = ...): ...
    def copyWells(self, current: Incomplete | None = ...): ...
    def iterateWells(self): ...
    def addWell(self, target, current: Incomplete | None = ...): ...
    def addAllWellSet(self, targets, current: Incomplete | None = ...): ...
    def removeWell(self, target, current: Incomplete | None = ...): ...
    def removeAllWellSet(self, targets, current: Incomplete | None = ...): ...
    def clearWells(self, current: Incomplete | None = ...): ...
    def reloadWells(self, toCopy, current: Incomplete | None = ...): ...
    def unloadPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def isPlateAcquisitionsLoaded(self): ...
    def sizeOfPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def copyPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def iteratePlateAcquisitions(self): ...
    def addPlateAcquisition(self, target, current: Incomplete | None = ...): ...
    def addAllPlateAcquisitionSet(self, targets, current: Incomplete | None = ...): ...
    def removePlateAcquisition(self, target, current: Incomplete | None = ...): ...
    def removeAllPlateAcquisitionSet(self, targets, current: Incomplete | None = ...): ...
    def clearPlateAcquisitions(self, current: Incomplete | None = ...): ...
    def reloadPlateAcquisitions(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addPlateAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllPlateAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removePlateAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllPlateAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addPlateAnnotationLinkToBoth(self, link, bothSides): ...
    def findPlateAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlateAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PlateAcquisition(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getStartTime: ClassVar[IcePy.Operation] = ...
    _op_setStartTime: ClassVar[IcePy.Operation] = ...
    _op_getEndTime: ClassVar[IcePy.Operation] = ...
    _op_setEndTime: ClassVar[IcePy.Operation] = ...
    _op_getMaximumFieldCount: ClassVar[IcePy.Operation] = ...
    _op_setMaximumFieldCount: ClassVar[IcePy.Operation] = ...
    _op_getPlate: ClassVar[IcePy.Operation] = ...
    _op_setPlate: ClassVar[IcePy.Operation] = ...
    _op_unloadWellSample: ClassVar[IcePy.Operation] = ...
    _op_sizeOfWellSample: ClassVar[IcePy.Operation] = ...
    _op_copyWellSample: ClassVar[IcePy.Operation] = ...
    _op_addWellSample: ClassVar[IcePy.Operation] = ...
    _op_addAllWellSampleSet: ClassVar[IcePy.Operation] = ...
    _op_removeWellSample: ClassVar[IcePy.Operation] = ...
    _op_removeAllWellSampleSet: ClassVar[IcePy.Operation] = ...
    _op_clearWellSample: ClassVar[IcePy.Operation] = ...
    _op_reloadWellSample: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addPlateAcquisitionAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllPlateAcquisitionAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removePlateAcquisitionAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllPlateAcquisitionAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addPlateAcquisitionAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findPlateAcquisitionAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removePlateAcquisitionAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _name: Incomplete | None = ..., _startTime: Incomplete | None = ..., _endTime: Incomplete | None = ..., _maximumFieldCount: Incomplete | None = ..., _plate: Incomplete | None = ..., _wellSampleSeq: Incomplete | None = ..., _wellSampleLoaded: bool = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getStartTime(self, current: Incomplete | None = ...): ...
    def setStartTime(self, theStartTime, current: Incomplete | None = ...): ...
    def getEndTime(self, current: Incomplete | None = ...): ...
    def setEndTime(self, theEndTime, current: Incomplete | None = ...): ...
    def getMaximumFieldCount(self, current: Incomplete | None = ...): ...
    def setMaximumFieldCount(self, theMaximumFieldCount, current: Incomplete | None = ...): ...
    def getPlate(self, current: Incomplete | None = ...): ...
    def setPlate(self, thePlate, current: Incomplete | None = ...): ...
    def unloadWellSample(self, current: Incomplete | None = ...): ...
    def sizeOfWellSample(self, current: Incomplete | None = ...): ...
    def copyWellSample(self, current: Incomplete | None = ...): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSample(self, current: Incomplete | None = ...): ...
    def reloadWellSample(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addPlateAcquisitionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllPlateAcquisitionAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removePlateAcquisitionAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllPlateAcquisitionAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addPlateAcquisitionAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findPlateAcquisitionAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlateAcquisitionAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class PlateAcquisitionPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getStartTime(self, _ctx: Incomplete | None = ...): ...
    def begin_getStartTime(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStartTime(self, _r): ...
    def setStartTime(self, theStartTime, _ctx: Incomplete | None = ...): ...
    def begin_setStartTime(self, theStartTime, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStartTime(self, _r): ...
    def getEndTime(self, _ctx: Incomplete | None = ...): ...
    def begin_getEndTime(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEndTime(self, _r): ...
    def setEndTime(self, theEndTime, _ctx: Incomplete | None = ...): ...
    def begin_setEndTime(self, theEndTime, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setEndTime(self, _r): ...
    def getMaximumFieldCount(self, _ctx: Incomplete | None = ...): ...
    def begin_getMaximumFieldCount(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMaximumFieldCount(self, _r): ...
    def setMaximumFieldCount(self, theMaximumFieldCount, _ctx: Incomplete | None = ...): ...
    def begin_setMaximumFieldCount(self, theMaximumFieldCount, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMaximumFieldCount(self, _r): ...
    def getPlate(self, _ctx: Incomplete | None = ...): ...
    def begin_getPlate(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPlate(self, _r): ...
    def setPlate(self, thePlate, _ctx: Incomplete | None = ...): ...
    def begin_setPlate(self, thePlate, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPlate(self, _r): ...
    def unloadWellSample(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadWellSample(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadWellSample(self, _r): ...
    def sizeOfWellSample(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfWellSample(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfWellSample(self, _r): ...
    def copyWellSample(self, _ctx: Incomplete | None = ...): ...
    def begin_copyWellSample(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyWellSample(self, _r): ...
    def addWellSample(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addWellSample(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addWellSample(self, _r): ...
    def addAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllWellSampleSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllWellSampleSet(self, _r): ...
    def removeWellSample(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeWellSample(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeWellSample(self, _r): ...
    def removeAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllWellSampleSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllWellSampleSet(self, _r): ...
    def clearWellSample(self, _ctx: Incomplete | None = ...): ...
    def begin_clearWellSample(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearWellSample(self, _r): ...
    def reloadWellSample(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadWellSample(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadWellSample(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addPlateAcquisitionAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addPlateAcquisitionAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPlateAcquisitionAnnotationLink(self, _r): ...
    def addAllPlateAcquisitionAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllPlateAcquisitionAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllPlateAcquisitionAnnotationLinkSet(self, _r): ...
    def removePlateAcquisitionAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removePlateAcquisitionAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePlateAcquisitionAnnotationLink(self, _r): ...
    def removeAllPlateAcquisitionAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllPlateAcquisitionAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllPlateAcquisitionAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addPlateAcquisitionAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addPlateAcquisitionAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addPlateAcquisitionAnnotationLinkToBoth(self, _r): ...
    def findPlateAcquisitionAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findPlateAcquisitionAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findPlateAcquisitionAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removePlateAcquisitionAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removePlateAcquisitionAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removePlateAcquisitionAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PlateAcquisitionI(PlateAcquisition):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        name: Incomplete
        startTime: Incomplete
        endTime: Incomplete
        maximumFieldCount: Incomplete
        plate: Incomplete
        wellSample: Incomplete
        annotationLinks: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, name, startTime, endTime, maximumFieldCount, plate, wellSample, annotationLinks, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    NAME: ClassVar[str] = ...
    STARTTIME: ClassVar[str] = ...
    ENDTIME: ClassVar[str] = ...
    MAXIMUMFIELDCOUNT: ClassVar[str] = ...
    PLATE: ClassVar[str] = ...
    WELLSAMPLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStartTime(self): ...
    def getStartTime(self, current: Incomplete | None = ...): ...
    def setStartTime(self, _startTime, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEndTime(self): ...
    def getEndTime(self, current: Incomplete | None = ...): ...
    def setEndTime(self, _endTime, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMaximumFieldCount(self): ...
    def getMaximumFieldCount(self, current: Incomplete | None = ...): ...
    def setMaximumFieldCount(self, _maximumFieldCount, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPlate(self): ...
    def getPlate(self, current: Incomplete | None = ...): ...
    def setPlate(self, _plate, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWellSample(self, current: Incomplete | None = ...): ...
    def isWellSampleLoaded(self): ...
    def sizeOfWellSample(self, current: Incomplete | None = ...): ...
    def copyWellSample(self, current: Incomplete | None = ...): ...
    def iterateWellSample(self): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, target, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSample(self, current: Incomplete | None = ...): ...
    def reloadWellSample(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addPlateAcquisitionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllPlateAcquisitionAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removePlateAcquisitionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllPlateAcquisitionAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addPlateAcquisitionAnnotationLinkToBoth(self, link, bothSides): ...
    def findPlateAcquisitionAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removePlateAcquisitionAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PlateAcquisitionAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class PlateAcquisitionAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PlateAcquisitionAnnotationLinkI(PlateAcquisitionAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PlateAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class PlateAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PlateAnnotationLinkI(PlateAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Point(Shape):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getX: ClassVar[IcePy.Operation] = ...
    _op_setX: ClassVar[IcePy.Operation] = ...
    _op_getY: ClassVar[IcePy.Operation] = ...
    _op_setY: ClassVar[IcePy.Operation] = ...
    _op_getTextValue: ClassVar[IcePy.Operation] = ...
    _op_setTextValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theT: Incomplete | None = ..., _theC: Incomplete | None = ..., _roi: Incomplete | None = ..., _locked: Incomplete | None = ..., _transform: Incomplete | None = ..., _fillColor: Incomplete | None = ..., _fillRule: Incomplete | None = ..., _strokeColor: Incomplete | None = ..., _strokeDashArray: Incomplete | None = ..., _strokeWidth: Incomplete | None = ..., _fontFamily: Incomplete | None = ..., _fontSize: Incomplete | None = ..., _fontStyle: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _x: Incomplete | None = ..., _y: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, theX, current: Incomplete | None = ...): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, theY, current: Incomplete | None = ...): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, theTextValue, current: Incomplete | None = ...): ...

class PointPrx(ShapePrx):
    def getX(self, _ctx: Incomplete | None = ...): ...
    def begin_getX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getX(self, _r): ...
    def setX(self, theX, _ctx: Incomplete | None = ...): ...
    def begin_setX(self, theX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setX(self, _r): ...
    def getY(self, _ctx: Incomplete | None = ...): ...
    def begin_getY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getY(self, _r): ...
    def setY(self, theY, _ctx: Incomplete | None = ...): ...
    def begin_setY(self, theY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setY(self, _r): ...
    def getTextValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTextValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTextValue(self, _r): ...
    def setTextValue(self, theTextValue, _ctx: Incomplete | None = ...): ...
    def begin_setTextValue(self, theTextValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTextValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PointI(Point):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        x: Incomplete
        y: Incomplete
        textValue: Incomplete
        theZ: Incomplete
        theT: Incomplete
        theC: Incomplete
        roi: Incomplete
        locked: Incomplete
        transform: Incomplete
        fillColor: Incomplete
        fillRule: Incomplete
        strokeColor: Incomplete
        strokeDashArray: Incomplete
        strokeWidth: Incomplete
        fontFamily: Incomplete
        fontSize: Incomplete
        fontStyle: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, x, y, textValue, theZ, theT, theC, roi, locked, transform, fillColor, fillRule, strokeColor, strokeDashArray, strokeWidth, fontFamily, fontSize, fontStyle, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    X: ClassVar[str] = ...
    Y: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadX(self): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, _x, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY(self): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, _y, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, _locked, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, _transform, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Polygon(Shape):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getPoints: ClassVar[IcePy.Operation] = ...
    _op_setPoints: ClassVar[IcePy.Operation] = ...
    _op_getTextValue: ClassVar[IcePy.Operation] = ...
    _op_setTextValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theT: Incomplete | None = ..., _theC: Incomplete | None = ..., _roi: Incomplete | None = ..., _locked: Incomplete | None = ..., _transform: Incomplete | None = ..., _fillColor: Incomplete | None = ..., _fillRule: Incomplete | None = ..., _strokeColor: Incomplete | None = ..., _strokeDashArray: Incomplete | None = ..., _strokeWidth: Incomplete | None = ..., _fontFamily: Incomplete | None = ..., _fontSize: Incomplete | None = ..., _fontStyle: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _points: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getPoints(self, current: Incomplete | None = ...): ...
    def setPoints(self, thePoints, current: Incomplete | None = ...): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, theTextValue, current: Incomplete | None = ...): ...

class PolygonPrx(ShapePrx):
    def getPoints(self, _ctx: Incomplete | None = ...): ...
    def begin_getPoints(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPoints(self, _r): ...
    def setPoints(self, thePoints, _ctx: Incomplete | None = ...): ...
    def begin_setPoints(self, thePoints, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPoints(self, _r): ...
    def getTextValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTextValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTextValue(self, _r): ...
    def setTextValue(self, theTextValue, _ctx: Incomplete | None = ...): ...
    def begin_setTextValue(self, theTextValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTextValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PolygonI(Polygon):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        points: Incomplete
        textValue: Incomplete
        theZ: Incomplete
        theT: Incomplete
        theC: Incomplete
        roi: Incomplete
        locked: Incomplete
        transform: Incomplete
        fillColor: Incomplete
        fillRule: Incomplete
        strokeColor: Incomplete
        strokeDashArray: Incomplete
        strokeWidth: Incomplete
        fontFamily: Incomplete
        fontSize: Incomplete
        fontStyle: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, points, textValue, theZ, theT, theC, roi, locked, transform, fillColor, fillRule, strokeColor, strokeDashArray, strokeWidth, fontFamily, fontSize, fontStyle, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    POINTS: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadPoints(self): ...
    def getPoints(self, current: Incomplete | None = ...): ...
    def setPoints(self, _points, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, _locked, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, _transform, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Polyline(Shape):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getPoints: ClassVar[IcePy.Operation] = ...
    _op_setPoints: ClassVar[IcePy.Operation] = ...
    _op_getMarkerStart: ClassVar[IcePy.Operation] = ...
    _op_setMarkerStart: ClassVar[IcePy.Operation] = ...
    _op_getMarkerEnd: ClassVar[IcePy.Operation] = ...
    _op_setMarkerEnd: ClassVar[IcePy.Operation] = ...
    _op_getTextValue: ClassVar[IcePy.Operation] = ...
    _op_setTextValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theT: Incomplete | None = ..., _theC: Incomplete | None = ..., _roi: Incomplete | None = ..., _locked: Incomplete | None = ..., _transform: Incomplete | None = ..., _fillColor: Incomplete | None = ..., _fillRule: Incomplete | None = ..., _strokeColor: Incomplete | None = ..., _strokeDashArray: Incomplete | None = ..., _strokeWidth: Incomplete | None = ..., _fontFamily: Incomplete | None = ..., _fontSize: Incomplete | None = ..., _fontStyle: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _points: Incomplete | None = ..., _markerStart: Incomplete | None = ..., _markerEnd: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getPoints(self, current: Incomplete | None = ...): ...
    def setPoints(self, thePoints, current: Incomplete | None = ...): ...
    def getMarkerStart(self, current: Incomplete | None = ...): ...
    def setMarkerStart(self, theMarkerStart, current: Incomplete | None = ...): ...
    def getMarkerEnd(self, current: Incomplete | None = ...): ...
    def setMarkerEnd(self, theMarkerEnd, current: Incomplete | None = ...): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, theTextValue, current: Incomplete | None = ...): ...

class PolylinePrx(ShapePrx):
    def getPoints(self, _ctx: Incomplete | None = ...): ...
    def begin_getPoints(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPoints(self, _r): ...
    def setPoints(self, thePoints, _ctx: Incomplete | None = ...): ...
    def begin_setPoints(self, thePoints, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPoints(self, _r): ...
    def getMarkerStart(self, _ctx: Incomplete | None = ...): ...
    def begin_getMarkerStart(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMarkerStart(self, _r): ...
    def setMarkerStart(self, theMarkerStart, _ctx: Incomplete | None = ...): ...
    def begin_setMarkerStart(self, theMarkerStart, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMarkerStart(self, _r): ...
    def getMarkerEnd(self, _ctx: Incomplete | None = ...): ...
    def begin_getMarkerEnd(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMarkerEnd(self, _r): ...
    def setMarkerEnd(self, theMarkerEnd, _ctx: Incomplete | None = ...): ...
    def begin_setMarkerEnd(self, theMarkerEnd, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMarkerEnd(self, _r): ...
    def getTextValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTextValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTextValue(self, _r): ...
    def setTextValue(self, theTextValue, _ctx: Incomplete | None = ...): ...
    def begin_setTextValue(self, theTextValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTextValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PolylineI(Polyline):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        points: Incomplete
        markerStart: Incomplete
        markerEnd: Incomplete
        textValue: Incomplete
        theZ: Incomplete
        theT: Incomplete
        theC: Incomplete
        roi: Incomplete
        locked: Incomplete
        transform: Incomplete
        fillColor: Incomplete
        fillRule: Incomplete
        strokeColor: Incomplete
        strokeDashArray: Incomplete
        strokeWidth: Incomplete
        fontFamily: Incomplete
        fontSize: Incomplete
        fontStyle: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, points, markerStart, markerEnd, textValue, theZ, theT, theC, roi, locked, transform, fillColor, fillRule, strokeColor, strokeDashArray, strokeWidth, fontFamily, fontSize, fontStyle, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    POINTS: ClassVar[str] = ...
    MARKERSTART: ClassVar[str] = ...
    MARKEREND: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadPoints(self): ...
    def getPoints(self, current: Incomplete | None = ...): ...
    def setPoints(self, _points, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMarkerStart(self): ...
    def getMarkerStart(self, current: Incomplete | None = ...): ...
    def setMarkerStart(self, _markerStart, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMarkerEnd(self): ...
    def getMarkerEnd(self, current: Incomplete | None = ...): ...
    def setMarkerEnd(self, _markerEnd, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, _locked, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, _transform, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Project(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_unloadDatasetLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfDatasetLinks: ClassVar[IcePy.Operation] = ...
    _op_copyDatasetLinks: ClassVar[IcePy.Operation] = ...
    _op_addProjectDatasetLink: ClassVar[IcePy.Operation] = ...
    _op_addAllProjectDatasetLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeProjectDatasetLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllProjectDatasetLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearDatasetLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadDatasetLinks: ClassVar[IcePy.Operation] = ...
    _op_getDatasetLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkDataset: ClassVar[IcePy.Operation] = ...
    _op_addProjectDatasetLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findProjectDatasetLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkDataset: ClassVar[IcePy.Operation] = ...
    _op_removeProjectDatasetLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedDatasetList: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addProjectAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllProjectAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeProjectAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllProjectAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addProjectAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findProjectAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeProjectAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _datasetLinksSeq: Incomplete | None = ..., _datasetLinksLoaded: bool = ..., _datasetLinksCountPerOwner: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def unloadDatasetLinks(self, current: Incomplete | None = ...): ...
    def sizeOfDatasetLinks(self, current: Incomplete | None = ...): ...
    def copyDatasetLinks(self, current: Incomplete | None = ...): ...
    def addProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectDatasetLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeProjectDatasetLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllProjectDatasetLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearDatasetLinks(self, current: Incomplete | None = ...): ...
    def reloadDatasetLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getDatasetLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkDataset(self, addition, current: Incomplete | None = ...): ...
    def addProjectDatasetLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findProjectDatasetLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkDataset(self, removal, current: Incomplete | None = ...): ...
    def removeProjectDatasetLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedDatasetList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addProjectAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeProjectAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllProjectAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addProjectAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findProjectAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeProjectAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class ProjectPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def unloadDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadDatasetLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadDatasetLinks(self, _r): ...
    def sizeOfDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfDatasetLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfDatasetLinks(self, _r): ...
    def copyDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyDatasetLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyDatasetLinks(self, _r): ...
    def addProjectDatasetLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addProjectDatasetLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addProjectDatasetLink(self, _r): ...
    def addAllProjectDatasetLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllProjectDatasetLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllProjectDatasetLinkSet(self, _r): ...
    def removeProjectDatasetLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeProjectDatasetLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeProjectDatasetLink(self, _r): ...
    def removeAllProjectDatasetLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllProjectDatasetLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllProjectDatasetLinkSet(self, _r): ...
    def clearDatasetLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearDatasetLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearDatasetLinks(self, _r): ...
    def reloadDatasetLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadDatasetLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadDatasetLinks(self, _r): ...
    def getDatasetLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getDatasetLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDatasetLinksCountPerOwner(self, _r): ...
    def linkDataset(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkDataset(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkDataset(self, _r): ...
    def addProjectDatasetLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addProjectDatasetLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addProjectDatasetLinkToBoth(self, _r): ...
    def findProjectDatasetLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findProjectDatasetLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findProjectDatasetLink(self, _r): ...
    def unlinkDataset(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkDataset(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkDataset(self, _r): ...
    def removeProjectDatasetLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeProjectDatasetLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeProjectDatasetLinkFromBoth(self, _r): ...
    def linkedDatasetList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedDatasetList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedDatasetList(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addProjectAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addProjectAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addProjectAnnotationLink(self, _r): ...
    def addAllProjectAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllProjectAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllProjectAnnotationLinkSet(self, _r): ...
    def removeProjectAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeProjectAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeProjectAnnotationLink(self, _r): ...
    def removeAllProjectAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllProjectAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllProjectAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addProjectAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addProjectAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addProjectAnnotationLinkToBoth(self, _r): ...
    def findProjectAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findProjectAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findProjectAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeProjectAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeProjectAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeProjectAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ProjectI(Project):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        datasetLinks: Incomplete
        annotationLinks: Incomplete
        name: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, datasetLinks, annotationLinks, name, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    DATASETLINKS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadDatasetLinks(self, current: Incomplete | None = ...): ...
    def isDatasetLinksLoaded(self): ...
    def sizeOfDatasetLinks(self, current: Incomplete | None = ...): ...
    def copyDatasetLinks(self, current: Incomplete | None = ...): ...
    def iterateDatasetLinks(self): ...
    def addProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectDatasetLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeProjectDatasetLink(self, target, current: Incomplete | None = ...): ...
    def removeAllProjectDatasetLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearDatasetLinks(self, current: Incomplete | None = ...): ...
    def reloadDatasetLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getDatasetLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkDataset(self, addition, current: Incomplete | None = ...): ...
    def addProjectDatasetLinkToBoth(self, link, bothSides): ...
    def findProjectDatasetLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkDataset(self, removal, current: Incomplete | None = ...): ...
    def removeProjectDatasetLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedDatasetList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addProjectAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllProjectAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeProjectAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllProjectAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addProjectAnnotationLinkToBoth(self, link, bothSides): ...
    def findProjectAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeProjectAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ProjectAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ProjectAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ProjectAnnotationLinkI(ProjectAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ProjectDatasetLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ProjectDatasetLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ProjectDatasetLinkI(ProjectDatasetLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ProjectionAxis(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class ProjectionAxisPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ProjectionAxisI(ProjectionAxis):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ProjectionDef(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getRenderingDef: ClassVar[IcePy.Operation] = ...
    _op_setRenderingDef: ClassVar[IcePy.Operation] = ...
    _op_getAxis: ClassVar[IcePy.Operation] = ...
    _op_setAxis: ClassVar[IcePy.Operation] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    _op_getActive: ClassVar[IcePy.Operation] = ...
    _op_setActive: ClassVar[IcePy.Operation] = ...
    _op_getStartPlane: ClassVar[IcePy.Operation] = ...
    _op_setStartPlane: ClassVar[IcePy.Operation] = ...
    _op_getEndPlane: ClassVar[IcePy.Operation] = ...
    _op_setEndPlane: ClassVar[IcePy.Operation] = ...
    _op_getStepping: ClassVar[IcePy.Operation] = ...
    _op_setStepping: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _renderingDef: Incomplete | None = ..., _axis: Incomplete | None = ..., _type: Incomplete | None = ..., _active: Incomplete | None = ..., _startPlane: Incomplete | None = ..., _endPlane: Incomplete | None = ..., _stepping: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getRenderingDef(self, current: Incomplete | None = ...): ...
    def setRenderingDef(self, theRenderingDef, current: Incomplete | None = ...): ...
    def getAxis(self, current: Incomplete | None = ...): ...
    def setAxis(self, theAxis, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(self, theActive, current: Incomplete | None = ...): ...
    def getStartPlane(self, current: Incomplete | None = ...): ...
    def setStartPlane(self, theStartPlane, current: Incomplete | None = ...): ...
    def getEndPlane(self, current: Incomplete | None = ...): ...
    def setEndPlane(self, theEndPlane, current: Incomplete | None = ...): ...
    def getStepping(self, current: Incomplete | None = ...): ...
    def setStepping(self, theStepping, current: Incomplete | None = ...): ...

class ProjectionDefPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getRenderingDef(self, _ctx: Incomplete | None = ...): ...
    def begin_getRenderingDef(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRenderingDef(self, _r): ...
    def setRenderingDef(self, theRenderingDef, _ctx: Incomplete | None = ...): ...
    def begin_setRenderingDef(self, theRenderingDef, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRenderingDef(self, _r): ...
    def getAxis(self, _ctx: Incomplete | None = ...): ...
    def begin_getAxis(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAxis(self, _r): ...
    def setAxis(self, theAxis, _ctx: Incomplete | None = ...): ...
    def begin_setAxis(self, theAxis, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setAxis(self, _r): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    def getActive(self, _ctx: Incomplete | None = ...): ...
    def begin_getActive(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getActive(self, _r): ...
    def setActive(self, theActive, _ctx: Incomplete | None = ...): ...
    def begin_setActive(self, theActive, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setActive(self, _r): ...
    def getStartPlane(self, _ctx: Incomplete | None = ...): ...
    def begin_getStartPlane(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStartPlane(self, _r): ...
    def setStartPlane(self, theStartPlane, _ctx: Incomplete | None = ...): ...
    def begin_setStartPlane(self, theStartPlane, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStartPlane(self, _r): ...
    def getEndPlane(self, _ctx: Incomplete | None = ...): ...
    def begin_getEndPlane(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getEndPlane(self, _r): ...
    def setEndPlane(self, theEndPlane, _ctx: Incomplete | None = ...): ...
    def begin_setEndPlane(self, theEndPlane, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setEndPlane(self, _r): ...
    def getStepping(self, _ctx: Incomplete | None = ...): ...
    def begin_getStepping(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStepping(self, _r): ...
    def setStepping(self, theStepping, _ctx: Incomplete | None = ...): ...
    def begin_setStepping(self, theStepping, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStepping(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ProjectionDefI(ProjectionDef):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        renderingDef: Incomplete
        axis: Incomplete
        type: Incomplete
        active: Incomplete
        startPlane: Incomplete
        endPlane: Incomplete
        stepping: Incomplete
        details: Incomplete
        def __init__(self, _cls, renderingDef, axis, type, active, startPlane, endPlane, stepping, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    RENDERINGDEF: ClassVar[str] = ...
    AXIS: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    ACTIVE: ClassVar[str] = ...
    STARTPLANE: ClassVar[str] = ...
    ENDPLANE: ClassVar[str] = ...
    STEPPING: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadRenderingDef(self): ...
    def getRenderingDef(self, current: Incomplete | None = ...): ...
    def setRenderingDef(self, _renderingDef, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAxis(self): ...
    def getAxis(self, current: Incomplete | None = ...): ...
    def setAxis(self, _axis, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadActive(self): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(self, _active, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStartPlane(self): ...
    def getStartPlane(self, current: Incomplete | None = ...): ...
    def setStartPlane(self, _startPlane, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEndPlane(self): ...
    def getEndPlane(self, current: Incomplete | None = ...): ...
    def setEndPlane(self, _endPlane, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStepping(self): ...
    def getStepping(self, current: Incomplete | None = ...): ...
    def setStepping(self, _stepping, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ProjectionType(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class ProjectionTypePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ProjectionTypeI(ProjectionType):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Pulse(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class PulsePrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PulseI(Pulse):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class QuantumDef(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getCdStart: ClassVar[IcePy.Operation] = ...
    _op_setCdStart: ClassVar[IcePy.Operation] = ...
    _op_getCdEnd: ClassVar[IcePy.Operation] = ...
    _op_setCdEnd: ClassVar[IcePy.Operation] = ...
    _op_getBitResolution: ClassVar[IcePy.Operation] = ...
    _op_setBitResolution: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _cdStart: Incomplete | None = ..., _cdEnd: Incomplete | None = ..., _bitResolution: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getCdStart(self, current: Incomplete | None = ...): ...
    def setCdStart(self, theCdStart, current: Incomplete | None = ...): ...
    def getCdEnd(self, current: Incomplete | None = ...): ...
    def setCdEnd(self, theCdEnd, current: Incomplete | None = ...): ...
    def getBitResolution(self, current: Incomplete | None = ...): ...
    def setBitResolution(self, theBitResolution, current: Incomplete | None = ...): ...

class QuantumDefPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getCdStart(self, _ctx: Incomplete | None = ...): ...
    def begin_getCdStart(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCdStart(self, _r): ...
    def setCdStart(self, theCdStart, _ctx: Incomplete | None = ...): ...
    def begin_setCdStart(self, theCdStart, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCdStart(self, _r): ...
    def getCdEnd(self, _ctx: Incomplete | None = ...): ...
    def begin_getCdEnd(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCdEnd(self, _r): ...
    def setCdEnd(self, theCdEnd, _ctx: Incomplete | None = ...): ...
    def begin_setCdEnd(self, theCdEnd, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCdEnd(self, _r): ...
    def getBitResolution(self, _ctx: Incomplete | None = ...): ...
    def begin_getBitResolution(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getBitResolution(self, _r): ...
    def setBitResolution(self, theBitResolution, _ctx: Incomplete | None = ...): ...
    def begin_setBitResolution(self, theBitResolution, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setBitResolution(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class QuantumDefI(QuantumDef):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        cdStart: Incomplete
        cdEnd: Incomplete
        bitResolution: Incomplete
        details: Incomplete
        def __init__(self, _cls, cdStart, cdEnd, bitResolution, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    CDSTART: ClassVar[str] = ...
    CDEND: ClassVar[str] = ...
    BITRESOLUTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadCdStart(self): ...
    def getCdStart(self, current: Incomplete | None = ...): ...
    def setCdStart(self, _cdStart, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCdEnd(self): ...
    def getCdEnd(self, current: Incomplete | None = ...): ...
    def setCdEnd(self, _cdEnd, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBitResolution(self): ...
    def getBitResolution(self, current: Incomplete | None = ...): ...
    def setBitResolution(self, _bitResolution, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Reagent(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getReagentIdentifier: ClassVar[IcePy.Operation] = ...
    _op_setReagentIdentifier: ClassVar[IcePy.Operation] = ...
    _op_getScreen: ClassVar[IcePy.Operation] = ...
    _op_setScreen: ClassVar[IcePy.Operation] = ...
    _op_unloadWellLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfWellLinks: ClassVar[IcePy.Operation] = ...
    _op_copyWellLinks: ClassVar[IcePy.Operation] = ...
    _op_addWellReagentLink: ClassVar[IcePy.Operation] = ...
    _op_addAllWellReagentLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeWellReagentLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllWellReagentLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearWellLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadWellLinks: ClassVar[IcePy.Operation] = ...
    _op_getWellLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkWell: ClassVar[IcePy.Operation] = ...
    _op_addWellReagentLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findWellReagentLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkWell: ClassVar[IcePy.Operation] = ...
    _op_removeWellReagentLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedWellList: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addReagentAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllReagentAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeReagentAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllReagentAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addReagentAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findReagentAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeReagentAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _name: Incomplete | None = ..., _reagentIdentifier: Incomplete | None = ..., _screen: Incomplete | None = ..., _wellLinksSeq: Incomplete | None = ..., _wellLinksLoaded: bool = ..., _wellLinksCountPerOwner: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getReagentIdentifier(self, current: Incomplete | None = ...): ...
    def setReagentIdentifier(self, theReagentIdentifier, current: Incomplete | None = ...): ...
    def getScreen(self, current: Incomplete | None = ...): ...
    def setScreen(self, theScreen, current: Incomplete | None = ...): ...
    def unloadWellLinks(self, current: Incomplete | None = ...): ...
    def sizeOfWellLinks(self, current: Incomplete | None = ...): ...
    def copyWellLinks(self, current: Incomplete | None = ...): ...
    def addWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellReagentLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellLinks(self, current: Incomplete | None = ...): ...
    def reloadWellLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getWellLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkWell(self, addition, current: Incomplete | None = ...): ...
    def addWellReagentLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findWellReagentLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkWell(self, removal, current: Incomplete | None = ...): ...
    def removeWellReagentLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedWellList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addReagentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllReagentAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeReagentAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllReagentAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addReagentAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findReagentAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeReagentAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class ReagentPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getReagentIdentifier(self, _ctx: Incomplete | None = ...): ...
    def begin_getReagentIdentifier(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getReagentIdentifier(self, _r): ...
    def setReagentIdentifier(self, theReagentIdentifier, _ctx: Incomplete | None = ...): ...
    def begin_setReagentIdentifier(self, theReagentIdentifier, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setReagentIdentifier(self, _r): ...
    def getScreen(self, _ctx: Incomplete | None = ...): ...
    def begin_getScreen(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getScreen(self, _r): ...
    def setScreen(self, theScreen, _ctx: Incomplete | None = ...): ...
    def begin_setScreen(self, theScreen, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setScreen(self, _r): ...
    def unloadWellLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadWellLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadWellLinks(self, _r): ...
    def sizeOfWellLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfWellLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfWellLinks(self, _r): ...
    def copyWellLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyWellLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyWellLinks(self, _r): ...
    def addWellReagentLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addWellReagentLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addWellReagentLink(self, _r): ...
    def addAllWellReagentLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllWellReagentLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllWellReagentLinkSet(self, _r): ...
    def removeWellReagentLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeWellReagentLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeWellReagentLink(self, _r): ...
    def removeAllWellReagentLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllWellReagentLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllWellReagentLinkSet(self, _r): ...
    def clearWellLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearWellLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearWellLinks(self, _r): ...
    def reloadWellLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadWellLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadWellLinks(self, _r): ...
    def getWellLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getWellLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWellLinksCountPerOwner(self, _r): ...
    def linkWell(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkWell(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkWell(self, _r): ...
    def addWellReagentLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addWellReagentLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addWellReagentLinkToBoth(self, _r): ...
    def findWellReagentLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findWellReagentLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findWellReagentLink(self, _r): ...
    def unlinkWell(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkWell(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkWell(self, _r): ...
    def removeWellReagentLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeWellReagentLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeWellReagentLinkFromBoth(self, _r): ...
    def linkedWellList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedWellList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedWellList(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addReagentAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addReagentAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addReagentAnnotationLink(self, _r): ...
    def addAllReagentAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllReagentAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllReagentAnnotationLinkSet(self, _r): ...
    def removeReagentAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeReagentAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeReagentAnnotationLink(self, _r): ...
    def removeAllReagentAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllReagentAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllReagentAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addReagentAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addReagentAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addReagentAnnotationLinkToBoth(self, _r): ...
    def findReagentAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findReagentAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findReagentAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeReagentAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeReagentAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeReagentAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ReagentI(Reagent):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        name: Incomplete
        reagentIdentifier: Incomplete
        screen: Incomplete
        wellLinks: Incomplete
        annotationLinks: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, name, reagentIdentifier, screen, wellLinks, annotationLinks, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    NAME: ClassVar[str] = ...
    REAGENTIDENTIFIER: ClassVar[str] = ...
    SCREEN: ClassVar[str] = ...
    WELLLINKS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadReagentIdentifier(self): ...
    def getReagentIdentifier(self, current: Incomplete | None = ...): ...
    def setReagentIdentifier(self, _reagentIdentifier, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScreen(self): ...
    def getScreen(self, current: Incomplete | None = ...): ...
    def setScreen(self, _screen, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWellLinks(self, current: Incomplete | None = ...): ...
    def isWellLinksLoaded(self): ...
    def sizeOfWellLinks(self, current: Incomplete | None = ...): ...
    def copyWellLinks(self, current: Incomplete | None = ...): ...
    def iterateWellLinks(self): ...
    def addWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def removeAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellLinks(self, current: Incomplete | None = ...): ...
    def reloadWellLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getWellLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkWell(self, addition, current: Incomplete | None = ...): ...
    def addWellReagentLinkToBoth(self, link, bothSides): ...
    def findWellReagentLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkWell(self, removal, current: Incomplete | None = ...): ...
    def removeWellReagentLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedWellList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addReagentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllReagentAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeReagentAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllReagentAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addReagentAnnotationLinkToBoth(self, link, bothSides): ...
    def findReagentAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeReagentAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ReagentAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ReagentAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ReagentAnnotationLinkI(ReagentAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Rectangle(Shape):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getX: ClassVar[IcePy.Operation] = ...
    _op_setX: ClassVar[IcePy.Operation] = ...
    _op_getY: ClassVar[IcePy.Operation] = ...
    _op_setY: ClassVar[IcePy.Operation] = ...
    _op_getWidth: ClassVar[IcePy.Operation] = ...
    _op_setWidth: ClassVar[IcePy.Operation] = ...
    _op_getHeight: ClassVar[IcePy.Operation] = ...
    _op_setHeight: ClassVar[IcePy.Operation] = ...
    _op_getTextValue: ClassVar[IcePy.Operation] = ...
    _op_setTextValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _theZ: Incomplete | None = ..., _theT: Incomplete | None = ..., _theC: Incomplete | None = ..., _roi: Incomplete | None = ..., _locked: Incomplete | None = ..., _transform: Incomplete | None = ..., _fillColor: Incomplete | None = ..., _fillRule: Incomplete | None = ..., _strokeColor: Incomplete | None = ..., _strokeDashArray: Incomplete | None = ..., _strokeWidth: Incomplete | None = ..., _fontFamily: Incomplete | None = ..., _fontSize: Incomplete | None = ..., _fontStyle: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _x: Incomplete | None = ..., _y: Incomplete | None = ..., _width: Incomplete | None = ..., _height: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, theX, current: Incomplete | None = ...): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, theY, current: Incomplete | None = ...): ...
    def getWidth(self, current: Incomplete | None = ...): ...
    def setWidth(self, theWidth, current: Incomplete | None = ...): ...
    def getHeight(self, current: Incomplete | None = ...): ...
    def setHeight(self, theHeight, current: Incomplete | None = ...): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, theTextValue, current: Incomplete | None = ...): ...

class RectanglePrx(ShapePrx):
    def getX(self, _ctx: Incomplete | None = ...): ...
    def begin_getX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getX(self, _r): ...
    def setX(self, theX, _ctx: Incomplete | None = ...): ...
    def begin_setX(self, theX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setX(self, _r): ...
    def getY(self, _ctx: Incomplete | None = ...): ...
    def begin_getY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getY(self, _r): ...
    def setY(self, theY, _ctx: Incomplete | None = ...): ...
    def begin_setY(self, theY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setY(self, _r): ...
    def getWidth(self, _ctx: Incomplete | None = ...): ...
    def begin_getWidth(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWidth(self, _r): ...
    def setWidth(self, theWidth, _ctx: Incomplete | None = ...): ...
    def begin_setWidth(self, theWidth, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWidth(self, _r): ...
    def getHeight(self, _ctx: Incomplete | None = ...): ...
    def begin_getHeight(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getHeight(self, _r): ...
    def setHeight(self, theHeight, _ctx: Incomplete | None = ...): ...
    def begin_setHeight(self, theHeight, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setHeight(self, _r): ...
    def getTextValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTextValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTextValue(self, _r): ...
    def setTextValue(self, theTextValue, _ctx: Incomplete | None = ...): ...
    def begin_setTextValue(self, theTextValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTextValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class RectangleI(Rectangle):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        x: Incomplete
        y: Incomplete
        width: Incomplete
        height: Incomplete
        textValue: Incomplete
        theZ: Incomplete
        theT: Incomplete
        theC: Incomplete
        roi: Incomplete
        locked: Incomplete
        transform: Incomplete
        fillColor: Incomplete
        fillRule: Incomplete
        strokeColor: Incomplete
        strokeDashArray: Incomplete
        strokeWidth: Incomplete
        fontFamily: Incomplete
        fontSize: Incomplete
        fontStyle: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, x, y, width, height, textValue, theZ, theT, theC, roi, locked, transform, fillColor, fillRule, strokeColor, strokeDashArray, strokeWidth, fontFamily, fontSize, fontStyle, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    X: ClassVar[str] = ...
    Y: ClassVar[str] = ...
    WIDTH: ClassVar[str] = ...
    HEIGHT: ClassVar[str] = ...
    TEXTVALUE: ClassVar[str] = ...
    THEZ: ClassVar[str] = ...
    THET: ClassVar[str] = ...
    THEC: ClassVar[str] = ...
    ROI: ClassVar[str] = ...
    LOCKED: ClassVar[str] = ...
    TRANSFORM: ClassVar[str] = ...
    FILLCOLOR: ClassVar[str] = ...
    FILLRULE: ClassVar[str] = ...
    STROKECOLOR: ClassVar[str] = ...
    STROKEDASHARRAY: ClassVar[str] = ...
    STROKEWIDTH: ClassVar[str] = ...
    FONTFAMILY: ClassVar[str] = ...
    FONTSIZE: ClassVar[str] = ...
    FONTSTYLE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadX(self): ...
    def getX(self, current: Incomplete | None = ...): ...
    def setX(self, _x, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadY(self): ...
    def getY(self, current: Incomplete | None = ...): ...
    def setY(self, _y, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWidth(self): ...
    def getWidth(self, current: Incomplete | None = ...): ...
    def setWidth(self, _width, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadHeight(self): ...
    def getHeight(self, current: Incomplete | None = ...): ...
    def setHeight(self, _height, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheZ(self): ...
    def getTheZ(self, current: Incomplete | None = ...): ...
    def setTheZ(self, _theZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheT(self): ...
    def getTheT(self, current: Incomplete | None = ...): ...
    def setTheT(self, _theT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTheC(self): ...
    def getTheC(self, current: Incomplete | None = ...): ...
    def setTheC(self, _theC, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRoi(self): ...
    def getRoi(self, current: Incomplete | None = ...): ...
    def setRoi(self, _roi, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadLocked(self): ...
    def getLocked(self, current: Incomplete | None = ...): ...
    def setLocked(self, _locked, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransform(self): ...
    def getTransform(self, current: Incomplete | None = ...): ...
    def setTransform(self, _transform, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillColor(self): ...
    def getFillColor(self, current: Incomplete | None = ...): ...
    def setFillColor(self, _fillColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFillRule(self): ...
    def getFillRule(self, current: Incomplete | None = ...): ...
    def setFillRule(self, _fillRule, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeColor(self): ...
    def getStrokeColor(self, current: Incomplete | None = ...): ...
    def setStrokeColor(self, _strokeColor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeDashArray(self): ...
    def getStrokeDashArray(self, current: Incomplete | None = ...): ...
    def setStrokeDashArray(self, _strokeDashArray, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStrokeWidth(self): ...
    def getStrokeWidth(self, current: Incomplete | None = ...): ...
    def setStrokeWidth(self, _strokeWidth, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontFamily(self): ...
    def getFontFamily(self, current: Incomplete | None = ...): ...
    def setFontFamily(self, _fontFamily, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontSize(self): ...
    def getFontSize(self, current: Incomplete | None = ...): ...
    def setFontSize(self, _fontSize, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFontStyle(self): ...
    def getFontStyle(self, current: Incomplete | None = ...): ...
    def setFontStyle(self, _fontStyle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addShapeAnnotationLinkToBoth(self, link, bothSides): ...
    def findShapeAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeShapeAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class RenderingDef(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getPixels: ClassVar[IcePy.Operation] = ...
    _op_setPixels: ClassVar[IcePy.Operation] = ...
    _op_getDefaultZ: ClassVar[IcePy.Operation] = ...
    _op_setDefaultZ: ClassVar[IcePy.Operation] = ...
    _op_getDefaultT: ClassVar[IcePy.Operation] = ...
    _op_setDefaultT: ClassVar[IcePy.Operation] = ...
    _op_getModel: ClassVar[IcePy.Operation] = ...
    _op_setModel: ClassVar[IcePy.Operation] = ...
    _op_unloadWaveRendering: ClassVar[IcePy.Operation] = ...
    _op_sizeOfWaveRendering: ClassVar[IcePy.Operation] = ...
    _op_copyWaveRendering: ClassVar[IcePy.Operation] = ...
    _op_addChannelBinding: ClassVar[IcePy.Operation] = ...
    _op_addAllChannelBindingSet: ClassVar[IcePy.Operation] = ...
    _op_removeChannelBinding: ClassVar[IcePy.Operation] = ...
    _op_removeAllChannelBindingSet: ClassVar[IcePy.Operation] = ...
    _op_clearWaveRendering: ClassVar[IcePy.Operation] = ...
    _op_reloadWaveRendering: ClassVar[IcePy.Operation] = ...
    _op_getChannelBinding: ClassVar[IcePy.Operation] = ...
    _op_setChannelBinding: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryChannelBinding: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryChannelBinding: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getCompression: ClassVar[IcePy.Operation] = ...
    _op_setCompression: ClassVar[IcePy.Operation] = ...
    _op_getQuantization: ClassVar[IcePy.Operation] = ...
    _op_setQuantization: ClassVar[IcePy.Operation] = ...
    _op_unloadProjections: ClassVar[IcePy.Operation] = ...
    _op_sizeOfProjections: ClassVar[IcePy.Operation] = ...
    _op_copyProjections: ClassVar[IcePy.Operation] = ...
    _op_addProjectionDef: ClassVar[IcePy.Operation] = ...
    _op_addAllProjectionDefSet: ClassVar[IcePy.Operation] = ...
    _op_removeProjectionDef: ClassVar[IcePy.Operation] = ...
    _op_removeAllProjectionDefSet: ClassVar[IcePy.Operation] = ...
    _op_clearProjections: ClassVar[IcePy.Operation] = ...
    _op_reloadProjections: ClassVar[IcePy.Operation] = ...
    _op_getProjectionDef: ClassVar[IcePy.Operation] = ...
    _op_setProjectionDef: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryProjectionDef: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryProjectionDef: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _pixels: Incomplete | None = ..., _defaultZ: Incomplete | None = ..., _defaultT: Incomplete | None = ..., _model: Incomplete | None = ..., _waveRenderingSeq: Incomplete | None = ..., _waveRenderingLoaded: bool = ..., _name: Incomplete | None = ..., _compression: Incomplete | None = ..., _quantization: Incomplete | None = ..., _projectionsSeq: Incomplete | None = ..., _projectionsLoaded: bool = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, thePixels, current: Incomplete | None = ...): ...
    def getDefaultZ(self, current: Incomplete | None = ...): ...
    def setDefaultZ(self, theDefaultZ, current: Incomplete | None = ...): ...
    def getDefaultT(self, current: Incomplete | None = ...): ...
    def setDefaultT(self, theDefaultT, current: Incomplete | None = ...): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, theModel, current: Incomplete | None = ...): ...
    def unloadWaveRendering(self, current: Incomplete | None = ...): ...
    def sizeOfWaveRendering(self, current: Incomplete | None = ...): ...
    def copyWaveRendering(self, current: Incomplete | None = ...): ...
    def addChannelBinding(self, target, current: Incomplete | None = ...): ...
    def addAllChannelBindingSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannelBinding(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllChannelBindingSet(self, targets, current: Incomplete | None = ...): ...
    def clearWaveRendering(self, current: Incomplete | None = ...): ...
    def reloadWaveRendering(self, toCopy, current: Incomplete | None = ...): ...
    def getChannelBinding(self, index, current: Incomplete | None = ...): ...
    def setChannelBinding(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryChannelBinding(self, current: Incomplete | None = ...): ...
    def setPrimaryChannelBinding(self, theElement, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getCompression(self, current: Incomplete | None = ...): ...
    def setCompression(self, theCompression, current: Incomplete | None = ...): ...
    def getQuantization(self, current: Incomplete | None = ...): ...
    def setQuantization(self, theQuantization, current: Incomplete | None = ...): ...
    def unloadProjections(self, current: Incomplete | None = ...): ...
    def sizeOfProjections(self, current: Incomplete | None = ...): ...
    def copyProjections(self, current: Incomplete | None = ...): ...
    def addProjectionDef(self, target, current: Incomplete | None = ...): ...
    def addAllProjectionDefSet(self, targets, current: Incomplete | None = ...): ...
    def removeProjectionDef(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllProjectionDefSet(self, targets, current: Incomplete | None = ...): ...
    def clearProjections(self, current: Incomplete | None = ...): ...
    def reloadProjections(self, toCopy, current: Incomplete | None = ...): ...
    def getProjectionDef(self, index, current: Incomplete | None = ...): ...
    def setProjectionDef(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryProjectionDef(self, current: Incomplete | None = ...): ...
    def setPrimaryProjectionDef(self, theElement, current: Incomplete | None = ...): ...

class RenderingDefPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getPixels(self, _ctx: Incomplete | None = ...): ...
    def begin_getPixels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPixels(self, _r): ...
    def setPixels(self, thePixels, _ctx: Incomplete | None = ...): ...
    def begin_setPixels(self, thePixels, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPixels(self, _r): ...
    def getDefaultZ(self, _ctx: Incomplete | None = ...): ...
    def begin_getDefaultZ(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDefaultZ(self, _r): ...
    def setDefaultZ(self, theDefaultZ, _ctx: Incomplete | None = ...): ...
    def begin_setDefaultZ(self, theDefaultZ, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDefaultZ(self, _r): ...
    def getDefaultT(self, _ctx: Incomplete | None = ...): ...
    def begin_getDefaultT(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDefaultT(self, _r): ...
    def setDefaultT(self, theDefaultT, _ctx: Incomplete | None = ...): ...
    def begin_setDefaultT(self, theDefaultT, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDefaultT(self, _r): ...
    def getModel(self, _ctx: Incomplete | None = ...): ...
    def begin_getModel(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getModel(self, _r): ...
    def setModel(self, theModel, _ctx: Incomplete | None = ...): ...
    def begin_setModel(self, theModel, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setModel(self, _r): ...
    def unloadWaveRendering(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadWaveRendering(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadWaveRendering(self, _r): ...
    def sizeOfWaveRendering(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfWaveRendering(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfWaveRendering(self, _r): ...
    def copyWaveRendering(self, _ctx: Incomplete | None = ...): ...
    def begin_copyWaveRendering(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyWaveRendering(self, _r): ...
    def addChannelBinding(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addChannelBinding(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addChannelBinding(self, _r): ...
    def addAllChannelBindingSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllChannelBindingSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllChannelBindingSet(self, _r): ...
    def removeChannelBinding(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeChannelBinding(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeChannelBinding(self, _r): ...
    def removeAllChannelBindingSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllChannelBindingSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllChannelBindingSet(self, _r): ...
    def clearWaveRendering(self, _ctx: Incomplete | None = ...): ...
    def begin_clearWaveRendering(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearWaveRendering(self, _r): ...
    def reloadWaveRendering(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadWaveRendering(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadWaveRendering(self, _r): ...
    def getChannelBinding(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getChannelBinding(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChannelBinding(self, _r): ...
    def setChannelBinding(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setChannelBinding(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChannelBinding(self, _r): ...
    def getPrimaryChannelBinding(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryChannelBinding(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryChannelBinding(self, _r): ...
    def setPrimaryChannelBinding(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryChannelBinding(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryChannelBinding(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getCompression(self, _ctx: Incomplete | None = ...): ...
    def begin_getCompression(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCompression(self, _r): ...
    def setCompression(self, theCompression, _ctx: Incomplete | None = ...): ...
    def begin_setCompression(self, theCompression, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCompression(self, _r): ...
    def getQuantization(self, _ctx: Incomplete | None = ...): ...
    def begin_getQuantization(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getQuantization(self, _r): ...
    def setQuantization(self, theQuantization, _ctx: Incomplete | None = ...): ...
    def begin_setQuantization(self, theQuantization, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setQuantization(self, _r): ...
    def unloadProjections(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadProjections(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadProjections(self, _r): ...
    def sizeOfProjections(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfProjections(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfProjections(self, _r): ...
    def copyProjections(self, _ctx: Incomplete | None = ...): ...
    def begin_copyProjections(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyProjections(self, _r): ...
    def addProjectionDef(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addProjectionDef(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addProjectionDef(self, _r): ...
    def addAllProjectionDefSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllProjectionDefSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllProjectionDefSet(self, _r): ...
    def removeProjectionDef(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeProjectionDef(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeProjectionDef(self, _r): ...
    def removeAllProjectionDefSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllProjectionDefSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllProjectionDefSet(self, _r): ...
    def clearProjections(self, _ctx: Incomplete | None = ...): ...
    def begin_clearProjections(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearProjections(self, _r): ...
    def reloadProjections(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadProjections(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadProjections(self, _r): ...
    def getProjectionDef(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getProjectionDef(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getProjectionDef(self, _r): ...
    def setProjectionDef(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setProjectionDef(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setProjectionDef(self, _r): ...
    def getPrimaryProjectionDef(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryProjectionDef(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryProjectionDef(self, _r): ...
    def setPrimaryProjectionDef(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryProjectionDef(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryProjectionDef(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class RenderingDefI(RenderingDef):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        pixels: Incomplete
        defaultZ: Incomplete
        defaultT: Incomplete
        model: Incomplete
        waveRendering: Incomplete
        name: Incomplete
        compression: Incomplete
        quantization: Incomplete
        projections: Incomplete
        details: Incomplete
        def __init__(self, _cls, pixels, defaultZ, defaultT, model, waveRendering, name, compression, quantization, projections, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PIXELS: ClassVar[str] = ...
    DEFAULTZ: ClassVar[str] = ...
    DEFAULTT: ClassVar[str] = ...
    MODEL: ClassVar[str] = ...
    WAVERENDERING: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    COMPRESSION: ClassVar[str] = ...
    QUANTIZATION: ClassVar[str] = ...
    PROJECTIONS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadPixels(self): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, _pixels, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDefaultZ(self): ...
    def getDefaultZ(self, current: Incomplete | None = ...): ...
    def setDefaultZ(self, _defaultZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDefaultT(self): ...
    def getDefaultT(self, current: Incomplete | None = ...): ...
    def setDefaultT(self, _defaultT, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadModel(self): ...
    def getModel(self, current: Incomplete | None = ...): ...
    def setModel(self, _model, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWaveRendering(self, current: Incomplete | None = ...): ...
    def isWaveRenderingLoaded(self): ...
    def sizeOfWaveRendering(self, current: Incomplete | None = ...): ...
    def copyWaveRendering(self, current: Incomplete | None = ...): ...
    def iterateWaveRendering(self): ...
    def addChannelBinding(self, target, current: Incomplete | None = ...): ...
    def addAllChannelBindingSet(self, targets, current: Incomplete | None = ...): ...
    def removeChannelBinding(self, target, current: Incomplete | None = ...): ...
    def removeAllChannelBindingSet(self, targets, current: Incomplete | None = ...): ...
    def clearWaveRendering(self, current: Incomplete | None = ...): ...
    def reloadWaveRendering(self, toCopy, current: Incomplete | None = ...): ...
    def getChannelBinding(self, index, current: Incomplete | None = ...): ...
    def setChannelBinding(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryChannelBinding(self, current: Incomplete | None = ...): ...
    def setPrimaryChannelBinding(self, element, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCompression(self): ...
    def getCompression(self, current: Incomplete | None = ...): ...
    def setCompression(self, _compression, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadQuantization(self): ...
    def getQuantization(self, current: Incomplete | None = ...): ...
    def setQuantization(self, _quantization, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadProjections(self, current: Incomplete | None = ...): ...
    def isProjectionsLoaded(self): ...
    def sizeOfProjections(self, current: Incomplete | None = ...): ...
    def copyProjections(self, current: Incomplete | None = ...): ...
    def iterateProjections(self): ...
    def addProjectionDef(self, target, current: Incomplete | None = ...): ...
    def addAllProjectionDefSet(self, targets, current: Incomplete | None = ...): ...
    def removeProjectionDef(self, target, current: Incomplete | None = ...): ...
    def removeAllProjectionDefSet(self, targets, current: Incomplete | None = ...): ...
    def clearProjections(self, current: Incomplete | None = ...): ...
    def reloadProjections(self, toCopy, current: Incomplete | None = ...): ...
    def getProjectionDef(self, index, current: Incomplete | None = ...): ...
    def setProjectionDef(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryProjectionDef(self, current: Incomplete | None = ...): ...
    def setPrimaryProjectionDef(self, element, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class RenderingModel(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _value: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, theValue, current: Incomplete | None = ...): ...

class RenderingModelPrx(IObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, theValue, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, theValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class RenderingModelI(RenderingModel):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        value: Incomplete
        details: Incomplete
        def __init__(self, _cls, value, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VALUE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def unloadValue(self): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, _value, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ReverseIntensityContext(CodomainMapContext):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getReverse: ClassVar[IcePy.Operation] = ...
    _op_setReverse: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _channelBinding: Incomplete | None = ..., _reverse: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getReverse(self, current: Incomplete | None = ...): ...
    def setReverse(self, theReverse, current: Incomplete | None = ...): ...

class ReverseIntensityContextPrx(CodomainMapContextPrx):
    def getReverse(self, _ctx: Incomplete | None = ...): ...
    def begin_getReverse(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getReverse(self, _r): ...
    def setReverse(self, theReverse, _ctx: Incomplete | None = ...): ...
    def begin_setReverse(self, theReverse, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setReverse(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ReverseIntensityContextI(ReverseIntensityContext):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        reverse: Incomplete
        channelBinding: Incomplete
        details: Incomplete
        def __init__(self, _cls, reverse, channelBinding, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    REVERSE: ClassVar[str] = ...
    CHANNELBINDING: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadReverse(self): ...
    def getReverse(self, current: Incomplete | None = ...): ...
    def setReverse(self, _reverse, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChannelBinding(self): ...
    def getChannelBinding(self, current: Incomplete | None = ...): ...
    def setChannelBinding(self, _channelBinding, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Roi(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_unloadShapes: ClassVar[IcePy.Operation] = ...
    _op_sizeOfShapes: ClassVar[IcePy.Operation] = ...
    _op_copyShapes: ClassVar[IcePy.Operation] = ...
    _op_addShape: ClassVar[IcePy.Operation] = ...
    _op_addAllShapeSet: ClassVar[IcePy.Operation] = ...
    _op_removeShape: ClassVar[IcePy.Operation] = ...
    _op_removeAllShapeSet: ClassVar[IcePy.Operation] = ...
    _op_clearShapes: ClassVar[IcePy.Operation] = ...
    _op_reloadShapes: ClassVar[IcePy.Operation] = ...
    _op_getShape: ClassVar[IcePy.Operation] = ...
    _op_setShape: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryShape: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryShape: ClassVar[IcePy.Operation] = ...
    _op_getImage: ClassVar[IcePy.Operation] = ...
    _op_setImage: ClassVar[IcePy.Operation] = ...
    _op_getSource: ClassVar[IcePy.Operation] = ...
    _op_setSource: ClassVar[IcePy.Operation] = ...
    _op_unloadFolderLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfFolderLinks: ClassVar[IcePy.Operation] = ...
    _op_copyFolderLinks: ClassVar[IcePy.Operation] = ...
    _op_addFolderRoiLink: ClassVar[IcePy.Operation] = ...
    _op_addAllFolderRoiLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeFolderRoiLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllFolderRoiLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearFolderLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadFolderLinks: ClassVar[IcePy.Operation] = ...
    _op_getFolderLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkFolder: ClassVar[IcePy.Operation] = ...
    _op_addFolderRoiLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findFolderRoiLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkFolder: ClassVar[IcePy.Operation] = ...
    _op_removeFolderRoiLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedFolderList: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addRoiAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllRoiAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeRoiAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllRoiAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addRoiAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findRoiAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeRoiAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _name: Incomplete | None = ..., _shapesSeq: Incomplete | None = ..., _shapesLoaded: bool = ..., _image: Incomplete | None = ..., _source: Incomplete | None = ..., _folderLinksSeq: Incomplete | None = ..., _folderLinksLoaded: bool = ..., _folderLinksCountPerOwner: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def unloadShapes(self, current: Incomplete | None = ...): ...
    def sizeOfShapes(self, current: Incomplete | None = ...): ...
    def copyShapes(self, current: Incomplete | None = ...): ...
    def addShape(self, target, current: Incomplete | None = ...): ...
    def addAllShapeSet(self, targets, current: Incomplete | None = ...): ...
    def removeShape(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllShapeSet(self, targets, current: Incomplete | None = ...): ...
    def clearShapes(self, current: Incomplete | None = ...): ...
    def reloadShapes(self, toCopy, current: Incomplete | None = ...): ...
    def getShape(self, index, current: Incomplete | None = ...): ...
    def setShape(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryShape(self, current: Incomplete | None = ...): ...
    def setPrimaryShape(self, theElement, current: Incomplete | None = ...): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(self, theImage, current: Incomplete | None = ...): ...
    def getSource(self, current: Incomplete | None = ...): ...
    def setSource(self, theSource, current: Incomplete | None = ...): ...
    def unloadFolderLinks(self, current: Incomplete | None = ...): ...
    def sizeOfFolderLinks(self, current: Incomplete | None = ...): ...
    def copyFolderLinks(self, current: Incomplete | None = ...): ...
    def addFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderRoiLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearFolderLinks(self, current: Incomplete | None = ...): ...
    def reloadFolderLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFolderLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkFolder(self, addition, current: Incomplete | None = ...): ...
    def addFolderRoiLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findFolderRoiLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkFolder(self, removal, current: Incomplete | None = ...): ...
    def removeFolderRoiLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedFolderList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addRoiAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllRoiAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeRoiAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllRoiAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addRoiAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findRoiAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeRoiAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class RoiPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def unloadShapes(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadShapes(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadShapes(self, _r): ...
    def sizeOfShapes(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfShapes(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfShapes(self, _r): ...
    def copyShapes(self, _ctx: Incomplete | None = ...): ...
    def begin_copyShapes(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyShapes(self, _r): ...
    def addShape(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addShape(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addShape(self, _r): ...
    def addAllShapeSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllShapeSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllShapeSet(self, _r): ...
    def removeShape(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeShape(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeShape(self, _r): ...
    def removeAllShapeSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllShapeSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllShapeSet(self, _r): ...
    def clearShapes(self, _ctx: Incomplete | None = ...): ...
    def begin_clearShapes(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearShapes(self, _r): ...
    def reloadShapes(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadShapes(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadShapes(self, _r): ...
    def getShape(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getShape(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getShape(self, _r): ...
    def setShape(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setShape(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setShape(self, _r): ...
    def getPrimaryShape(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryShape(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryShape(self, _r): ...
    def setPrimaryShape(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryShape(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryShape(self, _r): ...
    def getImage(self, _ctx: Incomplete | None = ...): ...
    def begin_getImage(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getImage(self, _r): ...
    def setImage(self, theImage, _ctx: Incomplete | None = ...): ...
    def begin_setImage(self, theImage, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setImage(self, _r): ...
    def getSource(self, _ctx: Incomplete | None = ...): ...
    def begin_getSource(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSource(self, _r): ...
    def setSource(self, theSource, _ctx: Incomplete | None = ...): ...
    def begin_setSource(self, theSource, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSource(self, _r): ...
    def unloadFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadFolderLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadFolderLinks(self, _r): ...
    def sizeOfFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfFolderLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfFolderLinks(self, _r): ...
    def copyFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyFolderLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyFolderLinks(self, _r): ...
    def addFolderRoiLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addFolderRoiLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFolderRoiLink(self, _r): ...
    def addAllFolderRoiLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllFolderRoiLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllFolderRoiLinkSet(self, _r): ...
    def removeFolderRoiLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeFolderRoiLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFolderRoiLink(self, _r): ...
    def removeAllFolderRoiLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllFolderRoiLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllFolderRoiLinkSet(self, _r): ...
    def clearFolderLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearFolderLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearFolderLinks(self, _r): ...
    def reloadFolderLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadFolderLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadFolderLinks(self, _r): ...
    def getFolderLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getFolderLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getFolderLinksCountPerOwner(self, _r): ...
    def linkFolder(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkFolder(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkFolder(self, _r): ...
    def addFolderRoiLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addFolderRoiLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addFolderRoiLinkToBoth(self, _r): ...
    def findFolderRoiLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findFolderRoiLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findFolderRoiLink(self, _r): ...
    def unlinkFolder(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkFolder(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkFolder(self, _r): ...
    def removeFolderRoiLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeFolderRoiLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeFolderRoiLinkFromBoth(self, _r): ...
    def linkedFolderList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedFolderList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedFolderList(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addRoiAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addRoiAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addRoiAnnotationLink(self, _r): ...
    def addAllRoiAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllRoiAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllRoiAnnotationLinkSet(self, _r): ...
    def removeRoiAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeRoiAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeRoiAnnotationLink(self, _r): ...
    def removeAllRoiAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllRoiAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllRoiAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addRoiAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addRoiAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addRoiAnnotationLinkToBoth(self, _r): ...
    def findRoiAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findRoiAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findRoiAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeRoiAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeRoiAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeRoiAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class RoiI(Roi):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        name: Incomplete
        shapes: Incomplete
        image: Incomplete
        source: Incomplete
        folderLinks: Incomplete
        annotationLinks: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, name, shapes, image, source, folderLinks, annotationLinks, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    NAME: ClassVar[str] = ...
    SHAPES: ClassVar[str] = ...
    IMAGE: ClassVar[str] = ...
    SOURCE: ClassVar[str] = ...
    FOLDERLINKS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadShapes(self, current: Incomplete | None = ...): ...
    def isShapesLoaded(self): ...
    def sizeOfShapes(self, current: Incomplete | None = ...): ...
    def copyShapes(self, current: Incomplete | None = ...): ...
    def iterateShapes(self): ...
    def addShape(self, target, current: Incomplete | None = ...): ...
    def addAllShapeSet(self, targets, current: Incomplete | None = ...): ...
    def removeShape(self, target, current: Incomplete | None = ...): ...
    def removeAllShapeSet(self, targets, current: Incomplete | None = ...): ...
    def clearShapes(self, current: Incomplete | None = ...): ...
    def reloadShapes(self, toCopy, current: Incomplete | None = ...): ...
    def getShape(self, index, current: Incomplete | None = ...): ...
    def setShape(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryShape(self, current: Incomplete | None = ...): ...
    def setPrimaryShape(self, element, current: Incomplete | None = ...): ...
    def unloadImage(self): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(self, _image, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSource(self): ...
    def getSource(self, current: Incomplete | None = ...): ...
    def setSource(self, _source, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFolderLinks(self, current: Incomplete | None = ...): ...
    def isFolderLinksLoaded(self): ...
    def sizeOfFolderLinks(self, current: Incomplete | None = ...): ...
    def copyFolderLinks(self, current: Incomplete | None = ...): ...
    def iterateFolderLinks(self): ...
    def addFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def addAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeFolderRoiLink(self, target, current: Incomplete | None = ...): ...
    def removeAllFolderRoiLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearFolderLinks(self, current: Incomplete | None = ...): ...
    def reloadFolderLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getFolderLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkFolder(self, addition, current: Incomplete | None = ...): ...
    def addFolderRoiLinkToBoth(self, link, bothSides): ...
    def findFolderRoiLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkFolder(self, removal, current: Incomplete | None = ...): ...
    def removeFolderRoiLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedFolderList(self, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addRoiAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllRoiAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeRoiAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllRoiAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addRoiAnnotationLinkToBoth(self, link, bothSides): ...
    def findRoiAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeRoiAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class RoiAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class RoiAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class RoiAnnotationLinkI(RoiAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Screen(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    _op_getProtocolIdentifier: ClassVar[IcePy.Operation] = ...
    _op_setProtocolIdentifier: ClassVar[IcePy.Operation] = ...
    _op_getProtocolDescription: ClassVar[IcePy.Operation] = ...
    _op_setProtocolDescription: ClassVar[IcePy.Operation] = ...
    _op_getReagentSetIdentifier: ClassVar[IcePy.Operation] = ...
    _op_setReagentSetIdentifier: ClassVar[IcePy.Operation] = ...
    _op_getReagentSetDescription: ClassVar[IcePy.Operation] = ...
    _op_setReagentSetDescription: ClassVar[IcePy.Operation] = ...
    _op_unloadPlateLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfPlateLinks: ClassVar[IcePy.Operation] = ...
    _op_copyPlateLinks: ClassVar[IcePy.Operation] = ...
    _op_addScreenPlateLink: ClassVar[IcePy.Operation] = ...
    _op_addAllScreenPlateLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeScreenPlateLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllScreenPlateLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearPlateLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadPlateLinks: ClassVar[IcePy.Operation] = ...
    _op_getPlateLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkPlate: ClassVar[IcePy.Operation] = ...
    _op_addScreenPlateLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findScreenPlateLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkPlate: ClassVar[IcePy.Operation] = ...
    _op_removeScreenPlateLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedPlateList: ClassVar[IcePy.Operation] = ...
    _op_unloadReagents: ClassVar[IcePy.Operation] = ...
    _op_sizeOfReagents: ClassVar[IcePy.Operation] = ...
    _op_copyReagents: ClassVar[IcePy.Operation] = ...
    _op_addReagent: ClassVar[IcePy.Operation] = ...
    _op_addAllReagentSet: ClassVar[IcePy.Operation] = ...
    _op_removeReagent: ClassVar[IcePy.Operation] = ...
    _op_removeAllReagentSet: ClassVar[IcePy.Operation] = ...
    _op_clearReagents: ClassVar[IcePy.Operation] = ...
    _op_reloadReagents: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addScreenAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllScreenAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeScreenAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllScreenAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addScreenAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findScreenAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeScreenAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _type: Incomplete | None = ..., _protocolIdentifier: Incomplete | None = ..., _protocolDescription: Incomplete | None = ..., _reagentSetIdentifier: Incomplete | None = ..., _reagentSetDescription: Incomplete | None = ..., _plateLinksSeq: Incomplete | None = ..., _plateLinksLoaded: bool = ..., _plateLinksCountPerOwner: Incomplete | None = ..., _reagentsSeq: Incomplete | None = ..., _reagentsLoaded: bool = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def getProtocolIdentifier(self, current: Incomplete | None = ...): ...
    def setProtocolIdentifier(self, theProtocolIdentifier, current: Incomplete | None = ...): ...
    def getProtocolDescription(self, current: Incomplete | None = ...): ...
    def setProtocolDescription(self, theProtocolDescription, current: Incomplete | None = ...): ...
    def getReagentSetIdentifier(self, current: Incomplete | None = ...): ...
    def setReagentSetIdentifier(self, theReagentSetIdentifier, current: Incomplete | None = ...): ...
    def getReagentSetDescription(self, current: Incomplete | None = ...): ...
    def setReagentSetDescription(self, theReagentSetDescription, current: Incomplete | None = ...): ...
    def unloadPlateLinks(self, current: Incomplete | None = ...): ...
    def sizeOfPlateLinks(self, current: Incomplete | None = ...): ...
    def copyPlateLinks(self, current: Incomplete | None = ...): ...
    def addScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeScreenPlateLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearPlateLinks(self, current: Incomplete | None = ...): ...
    def reloadPlateLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getPlateLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkPlate(self, addition, current: Incomplete | None = ...): ...
    def addScreenPlateLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findScreenPlateLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkPlate(self, removal, current: Incomplete | None = ...): ...
    def removeScreenPlateLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedPlateList(self, current: Incomplete | None = ...): ...
    def unloadReagents(self, current: Incomplete | None = ...): ...
    def sizeOfReagents(self, current: Incomplete | None = ...): ...
    def copyReagents(self, current: Incomplete | None = ...): ...
    def addReagent(self, target, current: Incomplete | None = ...): ...
    def addAllReagentSet(self, targets, current: Incomplete | None = ...): ...
    def removeReagent(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllReagentSet(self, targets, current: Incomplete | None = ...): ...
    def clearReagents(self, current: Incomplete | None = ...): ...
    def reloadReagents(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addScreenAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeScreenAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllScreenAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addScreenAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findScreenAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeScreenAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class ScreenPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    def getProtocolIdentifier(self, _ctx: Incomplete | None = ...): ...
    def begin_getProtocolIdentifier(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getProtocolIdentifier(self, _r): ...
    def setProtocolIdentifier(self, theProtocolIdentifier, _ctx: Incomplete | None = ...): ...
    def begin_setProtocolIdentifier(self, theProtocolIdentifier, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setProtocolIdentifier(self, _r): ...
    def getProtocolDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getProtocolDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getProtocolDescription(self, _r): ...
    def setProtocolDescription(self, theProtocolDescription, _ctx: Incomplete | None = ...): ...
    def begin_setProtocolDescription(self, theProtocolDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setProtocolDescription(self, _r): ...
    def getReagentSetIdentifier(self, _ctx: Incomplete | None = ...): ...
    def begin_getReagentSetIdentifier(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getReagentSetIdentifier(self, _r): ...
    def setReagentSetIdentifier(self, theReagentSetIdentifier, _ctx: Incomplete | None = ...): ...
    def begin_setReagentSetIdentifier(self, theReagentSetIdentifier, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setReagentSetIdentifier(self, _r): ...
    def getReagentSetDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getReagentSetDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getReagentSetDescription(self, _r): ...
    def setReagentSetDescription(self, theReagentSetDescription, _ctx: Incomplete | None = ...): ...
    def begin_setReagentSetDescription(self, theReagentSetDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setReagentSetDescription(self, _r): ...
    def unloadPlateLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadPlateLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadPlateLinks(self, _r): ...
    def sizeOfPlateLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfPlateLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfPlateLinks(self, _r): ...
    def copyPlateLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyPlateLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyPlateLinks(self, _r): ...
    def addScreenPlateLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addScreenPlateLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addScreenPlateLink(self, _r): ...
    def addAllScreenPlateLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllScreenPlateLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllScreenPlateLinkSet(self, _r): ...
    def removeScreenPlateLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeScreenPlateLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeScreenPlateLink(self, _r): ...
    def removeAllScreenPlateLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllScreenPlateLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllScreenPlateLinkSet(self, _r): ...
    def clearPlateLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearPlateLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearPlateLinks(self, _r): ...
    def reloadPlateLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadPlateLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadPlateLinks(self, _r): ...
    def getPlateLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getPlateLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPlateLinksCountPerOwner(self, _r): ...
    def linkPlate(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkPlate(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkPlate(self, _r): ...
    def addScreenPlateLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addScreenPlateLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addScreenPlateLinkToBoth(self, _r): ...
    def findScreenPlateLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findScreenPlateLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findScreenPlateLink(self, _r): ...
    def unlinkPlate(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkPlate(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkPlate(self, _r): ...
    def removeScreenPlateLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeScreenPlateLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeScreenPlateLinkFromBoth(self, _r): ...
    def linkedPlateList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedPlateList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedPlateList(self, _r): ...
    def unloadReagents(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadReagents(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadReagents(self, _r): ...
    def sizeOfReagents(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfReagents(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfReagents(self, _r): ...
    def copyReagents(self, _ctx: Incomplete | None = ...): ...
    def begin_copyReagents(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyReagents(self, _r): ...
    def addReagent(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addReagent(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addReagent(self, _r): ...
    def addAllReagentSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllReagentSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllReagentSet(self, _r): ...
    def removeReagent(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeReagent(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeReagent(self, _r): ...
    def removeAllReagentSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllReagentSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllReagentSet(self, _r): ...
    def clearReagents(self, _ctx: Incomplete | None = ...): ...
    def begin_clearReagents(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearReagents(self, _r): ...
    def reloadReagents(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadReagents(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadReagents(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addScreenAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addScreenAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addScreenAnnotationLink(self, _r): ...
    def addAllScreenAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllScreenAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllScreenAnnotationLinkSet(self, _r): ...
    def removeScreenAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeScreenAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeScreenAnnotationLink(self, _r): ...
    def removeAllScreenAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllScreenAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllScreenAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addScreenAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addScreenAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addScreenAnnotationLinkToBoth(self, _r): ...
    def findScreenAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findScreenAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findScreenAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeScreenAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeScreenAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeScreenAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ScreenI(Screen):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        type: Incomplete
        protocolIdentifier: Incomplete
        protocolDescription: Incomplete
        reagentSetIdentifier: Incomplete
        reagentSetDescription: Incomplete
        plateLinks: Incomplete
        reagents: Incomplete
        annotationLinks: Incomplete
        name: Incomplete
        description: Incomplete
        details: Incomplete
        def __init__(self, _cls, type, protocolIdentifier, protocolDescription, reagentSetIdentifier, reagentSetDescription, plateLinks, reagents, annotationLinks, name, description, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TYPE: ClassVar[str] = ...
    PROTOCOLIDENTIFIER: ClassVar[str] = ...
    PROTOCOLDESCRIPTION: ClassVar[str] = ...
    REAGENTSETIDENTIFIER: ClassVar[str] = ...
    REAGENTSETDESCRIPTION: ClassVar[str] = ...
    PLATELINKS: ClassVar[str] = ...
    REAGENTS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadProtocolIdentifier(self): ...
    def getProtocolIdentifier(self, current: Incomplete | None = ...): ...
    def setProtocolIdentifier(self, _protocolIdentifier, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadProtocolDescription(self): ...
    def getProtocolDescription(self, current: Incomplete | None = ...): ...
    def setProtocolDescription(self, _protocolDescription, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadReagentSetIdentifier(self): ...
    def getReagentSetIdentifier(self, current: Incomplete | None = ...): ...
    def setReagentSetIdentifier(self, _reagentSetIdentifier, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadReagentSetDescription(self): ...
    def getReagentSetDescription(self, current: Incomplete | None = ...): ...
    def setReagentSetDescription(self, _reagentSetDescription, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPlateLinks(self, current: Incomplete | None = ...): ...
    def isPlateLinksLoaded(self): ...
    def sizeOfPlateLinks(self, current: Incomplete | None = ...): ...
    def copyPlateLinks(self, current: Incomplete | None = ...): ...
    def iteratePlateLinks(self): ...
    def addScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeScreenPlateLink(self, target, current: Incomplete | None = ...): ...
    def removeAllScreenPlateLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearPlateLinks(self, current: Incomplete | None = ...): ...
    def reloadPlateLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getPlateLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkPlate(self, addition, current: Incomplete | None = ...): ...
    def addScreenPlateLinkToBoth(self, link, bothSides): ...
    def findScreenPlateLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkPlate(self, removal, current: Incomplete | None = ...): ...
    def removeScreenPlateLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedPlateList(self, current: Incomplete | None = ...): ...
    def unloadReagents(self, current: Incomplete | None = ...): ...
    def isReagentsLoaded(self): ...
    def sizeOfReagents(self, current: Incomplete | None = ...): ...
    def copyReagents(self, current: Incomplete | None = ...): ...
    def iterateReagents(self): ...
    def addReagent(self, target, current: Incomplete | None = ...): ...
    def addAllReagentSet(self, targets, current: Incomplete | None = ...): ...
    def removeReagent(self, target, current: Incomplete | None = ...): ...
    def removeAllReagentSet(self, targets, current: Incomplete | None = ...): ...
    def clearReagents(self, current: Incomplete | None = ...): ...
    def reloadReagents(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addScreenAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllScreenAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeScreenAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllScreenAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addScreenAnnotationLinkToBoth(self, link, bothSides): ...
    def findScreenAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeScreenAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ScreenAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ScreenAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ScreenAnnotationLinkI(ScreenAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ScreenPlateLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ScreenPlateLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ScreenPlateLinkI(ScreenPlateLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ScriptJob(Job):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getDescription: ClassVar[IcePy.Operation] = ...
    _op_setDescription: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _username: Incomplete | None = ..., _groupname: Incomplete | None = ..., _type: Incomplete | None = ..., _message: Incomplete | None = ..., _status: Incomplete | None = ..., _submitted: Incomplete | None = ..., _scheduledFor: Incomplete | None = ..., _started: Incomplete | None = ..., _finished: Incomplete | None = ..., _originalFileLinksSeq: Incomplete | None = ..., _originalFileLinksLoaded: bool = ..., _originalFileLinksCountPerOwner: Incomplete | None = ..., _description: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, theDescription, current: Incomplete | None = ...): ...

class ScriptJobPrx(JobPrx):
    def getDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDescription(self, _r): ...
    def setDescription(self, theDescription, _ctx: Incomplete | None = ...): ...
    def begin_setDescription(self, theDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDescription(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ScriptJobI(ScriptJob):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        description: Incomplete
        username: Incomplete
        groupname: Incomplete
        type: Incomplete
        message: Incomplete
        status: Incomplete
        submitted: Incomplete
        scheduledFor: Incomplete
        started: Incomplete
        finished: Incomplete
        originalFileLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, description, username, groupname, type, message, status, submitted, scheduledFor, started, finished, originalFileLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    DESCRIPTION: ClassVar[str] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, _username, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, _groupname, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, _submitted, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, _scheduledFor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, _finished, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Session(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getNode: ClassVar[IcePy.Operation] = ...
    _op_setNode: ClassVar[IcePy.Operation] = ...
    _op_getUuid: ClassVar[IcePy.Operation] = ...
    _op_setUuid: ClassVar[IcePy.Operation] = ...
    _op_getOwner: ClassVar[IcePy.Operation] = ...
    _op_setOwner: ClassVar[IcePy.Operation] = ...
    _op_getSudoer: ClassVar[IcePy.Operation] = ...
    _op_setSudoer: ClassVar[IcePy.Operation] = ...
    _op_getTimeToIdle: ClassVar[IcePy.Operation] = ...
    _op_setTimeToIdle: ClassVar[IcePy.Operation] = ...
    _op_getTimeToLive: ClassVar[IcePy.Operation] = ...
    _op_setTimeToLive: ClassVar[IcePy.Operation] = ...
    _op_getStarted: ClassVar[IcePy.Operation] = ...
    _op_setStarted: ClassVar[IcePy.Operation] = ...
    _op_getClosed: ClassVar[IcePy.Operation] = ...
    _op_setClosed: ClassVar[IcePy.Operation] = ...
    _op_getMessage: ClassVar[IcePy.Operation] = ...
    _op_setMessage: ClassVar[IcePy.Operation] = ...
    _op_getDefaultEventType: ClassVar[IcePy.Operation] = ...
    _op_setDefaultEventType: ClassVar[IcePy.Operation] = ...
    _op_getUserAgent: ClassVar[IcePy.Operation] = ...
    _op_setUserAgent: ClassVar[IcePy.Operation] = ...
    _op_getUserIP: ClassVar[IcePy.Operation] = ...
    _op_setUserIP: ClassVar[IcePy.Operation] = ...
    _op_unloadEvents: ClassVar[IcePy.Operation] = ...
    _op_sizeOfEvents: ClassVar[IcePy.Operation] = ...
    _op_copyEvents: ClassVar[IcePy.Operation] = ...
    _op_addEvent: ClassVar[IcePy.Operation] = ...
    _op_addAllEventSet: ClassVar[IcePy.Operation] = ...
    _op_removeEvent: ClassVar[IcePy.Operation] = ...
    _op_removeAllEventSet: ClassVar[IcePy.Operation] = ...
    _op_clearEvents: ClassVar[IcePy.Operation] = ...
    _op_reloadEvents: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addSessionAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllSessionAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeSessionAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllSessionAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addSessionAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findSessionAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeSessionAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _node: Incomplete | None = ..., _uuid: Incomplete | None = ..., _owner: Incomplete | None = ..., _sudoer: Incomplete | None = ..., _timeToIdle: Incomplete | None = ..., _timeToLive: Incomplete | None = ..., _started: Incomplete | None = ..., _closed: Incomplete | None = ..., _message: Incomplete | None = ..., _defaultEventType: Incomplete | None = ..., _userAgent: Incomplete | None = ..., _userIP: Incomplete | None = ..., _eventsSeq: Incomplete | None = ..., _eventsLoaded: bool = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getNode(self, current: Incomplete | None = ...): ...
    def setNode(self, theNode, current: Incomplete | None = ...): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, theUuid, current: Incomplete | None = ...): ...
    def getOwner(self, current: Incomplete | None = ...): ...
    def setOwner(self, theOwner, current: Incomplete | None = ...): ...
    def getSudoer(self, current: Incomplete | None = ...): ...
    def setSudoer(self, theSudoer, current: Incomplete | None = ...): ...
    def getTimeToIdle(self, current: Incomplete | None = ...): ...
    def setTimeToIdle(self, theTimeToIdle, current: Incomplete | None = ...): ...
    def getTimeToLive(self, current: Incomplete | None = ...): ...
    def setTimeToLive(self, theTimeToLive, current: Incomplete | None = ...): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, theStarted, current: Incomplete | None = ...): ...
    def getClosed(self, current: Incomplete | None = ...): ...
    def setClosed(self, theClosed, current: Incomplete | None = ...): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, theMessage, current: Incomplete | None = ...): ...
    def getDefaultEventType(self, current: Incomplete | None = ...): ...
    def setDefaultEventType(self, theDefaultEventType, current: Incomplete | None = ...): ...
    def getUserAgent(self, current: Incomplete | None = ...): ...
    def setUserAgent(self, theUserAgent, current: Incomplete | None = ...): ...
    def getUserIP(self, current: Incomplete | None = ...): ...
    def setUserIP(self, theUserIP, current: Incomplete | None = ...): ...
    def unloadEvents(self, current: Incomplete | None = ...): ...
    def sizeOfEvents(self, current: Incomplete | None = ...): ...
    def copyEvents(self, current: Incomplete | None = ...): ...
    def addEvent(self, target, current: Incomplete | None = ...): ...
    def addAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def removeEvent(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def clearEvents(self, current: Incomplete | None = ...): ...
    def reloadEvents(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addSessionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllSessionAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeSessionAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllSessionAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addSessionAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findSessionAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeSessionAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class SessionPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getNode(self, _ctx: Incomplete | None = ...): ...
    def begin_getNode(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getNode(self, _r): ...
    def setNode(self, theNode, _ctx: Incomplete | None = ...): ...
    def begin_setNode(self, theNode, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setNode(self, _r): ...
    def getUuid(self, _ctx: Incomplete | None = ...): ...
    def begin_getUuid(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUuid(self, _r): ...
    def setUuid(self, theUuid, _ctx: Incomplete | None = ...): ...
    def begin_setUuid(self, theUuid, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUuid(self, _r): ...
    def getOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getOwner(self, _r): ...
    def setOwner(self, theOwner, _ctx: Incomplete | None = ...): ...
    def begin_setOwner(self, theOwner, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setOwner(self, _r): ...
    def getSudoer(self, _ctx: Incomplete | None = ...): ...
    def begin_getSudoer(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSudoer(self, _r): ...
    def setSudoer(self, theSudoer, _ctx: Incomplete | None = ...): ...
    def begin_setSudoer(self, theSudoer, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSudoer(self, _r): ...
    def getTimeToIdle(self, _ctx: Incomplete | None = ...): ...
    def begin_getTimeToIdle(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTimeToIdle(self, _r): ...
    def setTimeToIdle(self, theTimeToIdle, _ctx: Incomplete | None = ...): ...
    def begin_setTimeToIdle(self, theTimeToIdle, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTimeToIdle(self, _r): ...
    def getTimeToLive(self, _ctx: Incomplete | None = ...): ...
    def begin_getTimeToLive(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTimeToLive(self, _r): ...
    def setTimeToLive(self, theTimeToLive, _ctx: Incomplete | None = ...): ...
    def begin_setTimeToLive(self, theTimeToLive, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTimeToLive(self, _r): ...
    def getStarted(self, _ctx: Incomplete | None = ...): ...
    def begin_getStarted(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStarted(self, _r): ...
    def setStarted(self, theStarted, _ctx: Incomplete | None = ...): ...
    def begin_setStarted(self, theStarted, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStarted(self, _r): ...
    def getClosed(self, _ctx: Incomplete | None = ...): ...
    def begin_getClosed(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getClosed(self, _r): ...
    def setClosed(self, theClosed, _ctx: Incomplete | None = ...): ...
    def begin_setClosed(self, theClosed, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setClosed(self, _r): ...
    def getMessage(self, _ctx: Incomplete | None = ...): ...
    def begin_getMessage(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMessage(self, _r): ...
    def setMessage(self, theMessage, _ctx: Incomplete | None = ...): ...
    def begin_setMessage(self, theMessage, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMessage(self, _r): ...
    def getDefaultEventType(self, _ctx: Incomplete | None = ...): ...
    def begin_getDefaultEventType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getDefaultEventType(self, _r): ...
    def setDefaultEventType(self, theDefaultEventType, _ctx: Incomplete | None = ...): ...
    def begin_setDefaultEventType(self, theDefaultEventType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setDefaultEventType(self, _r): ...
    def getUserAgent(self, _ctx: Incomplete | None = ...): ...
    def begin_getUserAgent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUserAgent(self, _r): ...
    def setUserAgent(self, theUserAgent, _ctx: Incomplete | None = ...): ...
    def begin_setUserAgent(self, theUserAgent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUserAgent(self, _r): ...
    def getUserIP(self, _ctx: Incomplete | None = ...): ...
    def begin_getUserIP(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUserIP(self, _r): ...
    def setUserIP(self, theUserIP, _ctx: Incomplete | None = ...): ...
    def begin_setUserIP(self, theUserIP, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUserIP(self, _r): ...
    def unloadEvents(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadEvents(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadEvents(self, _r): ...
    def sizeOfEvents(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfEvents(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfEvents(self, _r): ...
    def copyEvents(self, _ctx: Incomplete | None = ...): ...
    def begin_copyEvents(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyEvents(self, _r): ...
    def addEvent(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addEvent(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addEvent(self, _r): ...
    def addAllEventSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllEventSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllEventSet(self, _r): ...
    def removeEvent(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeEvent(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeEvent(self, _r): ...
    def removeAllEventSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllEventSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllEventSet(self, _r): ...
    def clearEvents(self, _ctx: Incomplete | None = ...): ...
    def begin_clearEvents(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearEvents(self, _r): ...
    def reloadEvents(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadEvents(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadEvents(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addSessionAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addSessionAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addSessionAnnotationLink(self, _r): ...
    def addAllSessionAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllSessionAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllSessionAnnotationLinkSet(self, _r): ...
    def removeSessionAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeSessionAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeSessionAnnotationLink(self, _r): ...
    def removeAllSessionAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllSessionAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllSessionAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addSessionAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addSessionAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addSessionAnnotationLinkToBoth(self, _r): ...
    def findSessionAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findSessionAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findSessionAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeSessionAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeSessionAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeSessionAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class SessionI(Session):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        node: Incomplete
        uuid: Incomplete
        owner: Incomplete
        sudoer: Incomplete
        timeToIdle: Incomplete
        timeToLive: Incomplete
        started: Incomplete
        closed: Incomplete
        message: Incomplete
        defaultEventType: Incomplete
        userAgent: Incomplete
        userIP: Incomplete
        events: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, node, uuid, owner, sudoer, timeToIdle, timeToLive, started, closed, message, defaultEventType, userAgent, userIP, events, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    NODE: ClassVar[str] = ...
    UUID: ClassVar[str] = ...
    OWNER: ClassVar[str] = ...
    SUDOER: ClassVar[str] = ...
    TIMETOIDLE: ClassVar[str] = ...
    TIMETOLIVE: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    CLOSED: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    DEFAULTEVENTTYPE: ClassVar[str] = ...
    USERAGENT: ClassVar[str] = ...
    USERIP: ClassVar[str] = ...
    EVENTS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadNode(self): ...
    def getNode(self, current: Incomplete | None = ...): ...
    def setNode(self, _node, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUuid(self): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, _uuid, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOwner(self): ...
    def getOwner(self, current: Incomplete | None = ...): ...
    def setOwner(self, _owner, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSudoer(self): ...
    def getSudoer(self, current: Incomplete | None = ...): ...
    def setSudoer(self, _sudoer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTimeToIdle(self): ...
    def getTimeToIdle(self, current: Incomplete | None = ...): ...
    def setTimeToIdle(self, _timeToIdle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTimeToLive(self): ...
    def getTimeToLive(self, current: Incomplete | None = ...): ...
    def setTimeToLive(self, _timeToLive, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadClosed(self): ...
    def getClosed(self, current: Incomplete | None = ...): ...
    def setClosed(self, _closed, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDefaultEventType(self): ...
    def getDefaultEventType(self, current: Incomplete | None = ...): ...
    def setDefaultEventType(self, _defaultEventType, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUserAgent(self): ...
    def getUserAgent(self, current: Incomplete | None = ...): ...
    def setUserAgent(self, _userAgent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUserIP(self): ...
    def getUserIP(self, current: Incomplete | None = ...): ...
    def setUserIP(self, _userIP, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEvents(self, current: Incomplete | None = ...): ...
    def isEventsLoaded(self): ...
    def sizeOfEvents(self, current: Incomplete | None = ...): ...
    def copyEvents(self, current: Incomplete | None = ...): ...
    def iterateEvents(self): ...
    def addEvent(self, target, current: Incomplete | None = ...): ...
    def addAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def removeEvent(self, target, current: Incomplete | None = ...): ...
    def removeAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def clearEvents(self, current: Incomplete | None = ...): ...
    def reloadEvents(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addSessionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllSessionAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeSessionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllSessionAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addSessionAnnotationLinkToBoth(self, link, bothSides): ...
    def findSessionAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeSessionAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class SessionAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class SessionAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class SessionAnnotationLinkI(SessionAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ShapeAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ShapeAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ShapeAnnotationLinkI(ShapeAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Share(Session):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getGroup: ClassVar[IcePy.Operation] = ...
    _op_setGroup: ClassVar[IcePy.Operation] = ...
    _op_getItemCount: ClassVar[IcePy.Operation] = ...
    _op_setItemCount: ClassVar[IcePy.Operation] = ...
    _op_getActive: ClassVar[IcePy.Operation] = ...
    _op_setActive: ClassVar[IcePy.Operation] = ...
    _op_getData: ClassVar[IcePy.Operation] = ...
    _op_setData: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _node: Incomplete | None = ..., _uuid: Incomplete | None = ..., _owner: Incomplete | None = ..., _sudoer: Incomplete | None = ..., _timeToIdle: Incomplete | None = ..., _timeToLive: Incomplete | None = ..., _started: Incomplete | None = ..., _closed: Incomplete | None = ..., _message: Incomplete | None = ..., _defaultEventType: Incomplete | None = ..., _userAgent: Incomplete | None = ..., _userIP: Incomplete | None = ..., _eventsSeq: Incomplete | None = ..., _eventsLoaded: bool = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _group: Incomplete | None = ..., _itemCount: Incomplete | None = ..., _active: Incomplete | None = ..., _data: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getGroup(self, current: Incomplete | None = ...): ...
    def setGroup(self, theGroup, current: Incomplete | None = ...): ...
    def getItemCount(self, current: Incomplete | None = ...): ...
    def setItemCount(self, theItemCount, current: Incomplete | None = ...): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(self, theActive, current: Incomplete | None = ...): ...
    def getData(self, current: Incomplete | None = ...): ...
    def setData(self, theData, current: Incomplete | None = ...): ...

class SharePrx(SessionPrx):
    def getGroup(self, _ctx: Incomplete | None = ...): ...
    def begin_getGroup(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGroup(self, _r): ...
    def setGroup(self, theGroup, _ctx: Incomplete | None = ...): ...
    def begin_setGroup(self, theGroup, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGroup(self, _r): ...
    def getItemCount(self, _ctx: Incomplete | None = ...): ...
    def begin_getItemCount(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getItemCount(self, _r): ...
    def setItemCount(self, theItemCount, _ctx: Incomplete | None = ...): ...
    def begin_setItemCount(self, theItemCount, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setItemCount(self, _r): ...
    def getActive(self, _ctx: Incomplete | None = ...): ...
    def begin_getActive(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getActive(self, _r): ...
    def setActive(self, theActive, _ctx: Incomplete | None = ...): ...
    def begin_setActive(self, theActive, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setActive(self, _r): ...
    def getData(self, _ctx: Incomplete | None = ...): ...
    def begin_getData(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getData(self, _r): ...
    def setData(self, theData, _ctx: Incomplete | None = ...): ...
    def begin_setData(self, theData, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setData(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ShareI(Share):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        group: Incomplete
        itemCount: Incomplete
        active: Incomplete
        data: Incomplete
        node: Incomplete
        uuid: Incomplete
        owner: Incomplete
        sudoer: Incomplete
        timeToIdle: Incomplete
        timeToLive: Incomplete
        started: Incomplete
        closed: Incomplete
        message: Incomplete
        defaultEventType: Incomplete
        userAgent: Incomplete
        userIP: Incomplete
        events: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, group, itemCount, active, data, node, uuid, owner, sudoer, timeToIdle, timeToLive, started, closed, message, defaultEventType, userAgent, userIP, events, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    GROUP: ClassVar[str] = ...
    ITEMCOUNT: ClassVar[str] = ...
    ACTIVE: ClassVar[str] = ...
    DATA: ClassVar[str] = ...
    NODE: ClassVar[str] = ...
    UUID: ClassVar[str] = ...
    OWNER: ClassVar[str] = ...
    SUDOER: ClassVar[str] = ...
    TIMETOIDLE: ClassVar[str] = ...
    TIMETOLIVE: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    CLOSED: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    DEFAULTEVENTTYPE: ClassVar[str] = ...
    USERAGENT: ClassVar[str] = ...
    USERIP: ClassVar[str] = ...
    EVENTS: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadGroup(self): ...
    def getGroup(self, current: Incomplete | None = ...): ...
    def setGroup(self, _group, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadItemCount(self): ...
    def getItemCount(self, current: Incomplete | None = ...): ...
    def setItemCount(self, _itemCount, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadActive(self): ...
    def getActive(self, current: Incomplete | None = ...): ...
    def setActive(self, _active, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadData(self): ...
    def getData(self, current: Incomplete | None = ...): ...
    def setData(self, _data, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNode(self): ...
    def getNode(self, current: Incomplete | None = ...): ...
    def setNode(self, _node, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUuid(self): ...
    def getUuid(self, current: Incomplete | None = ...): ...
    def setUuid(self, _uuid, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOwner(self): ...
    def getOwner(self, current: Incomplete | None = ...): ...
    def setOwner(self, _owner, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSudoer(self): ...
    def getSudoer(self, current: Incomplete | None = ...): ...
    def setSudoer(self, _sudoer, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTimeToIdle(self): ...
    def getTimeToIdle(self, current: Incomplete | None = ...): ...
    def setTimeToIdle(self, _timeToIdle, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTimeToLive(self): ...
    def getTimeToLive(self, current: Incomplete | None = ...): ...
    def setTimeToLive(self, _timeToLive, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadClosed(self): ...
    def getClosed(self, current: Incomplete | None = ...): ...
    def setClosed(self, _closed, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDefaultEventType(self): ...
    def getDefaultEventType(self, current: Incomplete | None = ...): ...
    def setDefaultEventType(self, _defaultEventType, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUserAgent(self): ...
    def getUserAgent(self, current: Incomplete | None = ...): ...
    def setUserAgent(self, _userAgent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadUserIP(self): ...
    def getUserIP(self, current: Incomplete | None = ...): ...
    def setUserIP(self, _userIP, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadEvents(self, current: Incomplete | None = ...): ...
    def isEventsLoaded(self): ...
    def sizeOfEvents(self, current: Incomplete | None = ...): ...
    def copyEvents(self, current: Incomplete | None = ...): ...
    def iterateEvents(self): ...
    def addEvent(self, target, current: Incomplete | None = ...): ...
    def addAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def removeEvent(self, target, current: Incomplete | None = ...): ...
    def removeAllEventSet(self, targets, current: Incomplete | None = ...): ...
    def clearEvents(self, current: Incomplete | None = ...): ...
    def reloadEvents(self, toCopy, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addSessionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllSessionAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeSessionAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllSessionAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addSessionAnnotationLinkToBoth(self, link, bothSides): ...
    def findSessionAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeSessionAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ShareMember(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class ShareMemberPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ShareMemberI(ShareMember):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class StageLabel(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getPositionX: ClassVar[IcePy.Operation] = ...
    _op_setPositionX: ClassVar[IcePy.Operation] = ...
    _op_getPositionY: ClassVar[IcePy.Operation] = ...
    _op_setPositionY: ClassVar[IcePy.Operation] = ...
    _op_getPositionZ: ClassVar[IcePy.Operation] = ...
    _op_setPositionZ: ClassVar[IcePy.Operation] = ...
    _op_getName: ClassVar[IcePy.Operation] = ...
    _op_setName: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _positionX: Incomplete | None = ..., _positionY: Incomplete | None = ..., _positionZ: Incomplete | None = ..., _name: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getPositionX(self, current: Incomplete | None = ...): ...
    def setPositionX(self, thePositionX, current: Incomplete | None = ...): ...
    def getPositionY(self, current: Incomplete | None = ...): ...
    def setPositionY(self, thePositionY, current: Incomplete | None = ...): ...
    def getPositionZ(self, current: Incomplete | None = ...): ...
    def setPositionZ(self, thePositionZ, current: Incomplete | None = ...): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, theName, current: Incomplete | None = ...): ...

class StageLabelPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getPositionX(self, _ctx: Incomplete | None = ...): ...
    def begin_getPositionX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPositionX(self, _r): ...
    def setPositionX(self, thePositionX, _ctx: Incomplete | None = ...): ...
    def begin_setPositionX(self, thePositionX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPositionX(self, _r): ...
    def getPositionY(self, _ctx: Incomplete | None = ...): ...
    def begin_getPositionY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPositionY(self, _r): ...
    def setPositionY(self, thePositionY, _ctx: Incomplete | None = ...): ...
    def begin_setPositionY(self, thePositionY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPositionY(self, _r): ...
    def getPositionZ(self, _ctx: Incomplete | None = ...): ...
    def begin_getPositionZ(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPositionZ(self, _r): ...
    def setPositionZ(self, thePositionZ, _ctx: Incomplete | None = ...): ...
    def begin_setPositionZ(self, thePositionZ, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPositionZ(self, _r): ...
    def getName(self, _ctx: Incomplete | None = ...): ...
    def begin_getName(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getName(self, _r): ...
    def setName(self, theName, _ctx: Incomplete | None = ...): ...
    def begin_setName(self, theName, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setName(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class StageLabelI(StageLabel):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        positionX: Incomplete
        positionY: Incomplete
        positionZ: Incomplete
        name: Incomplete
        details: Incomplete
        def __init__(self, _cls, positionX, positionY, positionZ, name, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    POSITIONX: ClassVar[str] = ...
    POSITIONY: ClassVar[str] = ...
    POSITIONZ: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadPositionX(self): ...
    def getPositionX(self, current: Incomplete | None = ...): ...
    def setPositionX(self, _positionX, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPositionY(self): ...
    def getPositionY(self, current: Incomplete | None = ...): ...
    def setPositionY(self, _positionY, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPositionZ(self): ...
    def getPositionZ(self, current: Incomplete | None = ...): ...
    def setPositionZ(self, _positionZ, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class StatsInfo(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getGlobalMin: ClassVar[IcePy.Operation] = ...
    _op_setGlobalMin: ClassVar[IcePy.Operation] = ...
    _op_getGlobalMax: ClassVar[IcePy.Operation] = ...
    _op_setGlobalMax: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _globalMin: Incomplete | None = ..., _globalMax: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getGlobalMin(self, current: Incomplete | None = ...): ...
    def setGlobalMin(self, theGlobalMin, current: Incomplete | None = ...): ...
    def getGlobalMax(self, current: Incomplete | None = ...): ...
    def setGlobalMax(self, theGlobalMax, current: Incomplete | None = ...): ...

class StatsInfoPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getGlobalMin(self, _ctx: Incomplete | None = ...): ...
    def begin_getGlobalMin(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGlobalMin(self, _r): ...
    def setGlobalMin(self, theGlobalMin, _ctx: Incomplete | None = ...): ...
    def begin_setGlobalMin(self, theGlobalMin, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGlobalMin(self, _r): ...
    def getGlobalMax(self, _ctx: Incomplete | None = ...): ...
    def begin_getGlobalMax(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGlobalMax(self, _r): ...
    def setGlobalMax(self, theGlobalMax, _ctx: Incomplete | None = ...): ...
    def begin_setGlobalMax(self, theGlobalMax, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGlobalMax(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class StatsInfoI(StatsInfo):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        globalMin: Incomplete
        globalMax: Incomplete
        details: Incomplete
        def __init__(self, _cls, globalMin, globalMax, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    GLOBALMIN: ClassVar[str] = ...
    GLOBALMAX: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadGlobalMin(self): ...
    def getGlobalMin(self, current: Incomplete | None = ...): ...
    def setGlobalMin(self, _globalMin, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGlobalMax(self): ...
    def getGlobalMax(self, current: Incomplete | None = ...): ...
    def setGlobalMax(self, _globalMax, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class TagAnnotation(TextAnnotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class TagAnnotationPrx(TextAnnotationPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class TagAnnotationI(TagAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        textValue: Incomplete
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, textValue, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TEXTVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class TermAnnotation(BasicAnnotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getTermValue: ClassVar[IcePy.Operation] = ...
    _op_setTermValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _termValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getTermValue(self, current: Incomplete | None = ...): ...
    def setTermValue(self, theTermValue, current: Incomplete | None = ...): ...

class TermAnnotationPrx(BasicAnnotationPrx):
    def getTermValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTermValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTermValue(self, _r): ...
    def setTermValue(self, theTermValue, _ctx: Incomplete | None = ...): ...
    def begin_setTermValue(self, theTermValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTermValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class TermAnnotationI(TermAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        termValue: Incomplete
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, termValue, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TERMVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadTermValue(self): ...
    def getTermValue(self, current: Incomplete | None = ...): ...
    def setTermValue(self, _termValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Thumbnail(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getPixels: ClassVar[IcePy.Operation] = ...
    _op_setPixels: ClassVar[IcePy.Operation] = ...
    _op_getMimeType: ClassVar[IcePy.Operation] = ...
    _op_setMimeType: ClassVar[IcePy.Operation] = ...
    _op_getSizeX: ClassVar[IcePy.Operation] = ...
    _op_setSizeX: ClassVar[IcePy.Operation] = ...
    _op_getSizeY: ClassVar[IcePy.Operation] = ...
    _op_setSizeY: ClassVar[IcePy.Operation] = ...
    _op_getRef: ClassVar[IcePy.Operation] = ...
    _op_setRef: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _pixels: Incomplete | None = ..., _mimeType: Incomplete | None = ..., _sizeX: Incomplete | None = ..., _sizeY: Incomplete | None = ..., _ref: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, thePixels, current: Incomplete | None = ...): ...
    def getMimeType(self, current: Incomplete | None = ...): ...
    def setMimeType(self, theMimeType, current: Incomplete | None = ...): ...
    def getSizeX(self, current: Incomplete | None = ...): ...
    def setSizeX(self, theSizeX, current: Incomplete | None = ...): ...
    def getSizeY(self, current: Incomplete | None = ...): ...
    def setSizeY(self, theSizeY, current: Incomplete | None = ...): ...
    def getRef(self, current: Incomplete | None = ...): ...
    def setRef(self, theRef, current: Incomplete | None = ...): ...

class ThumbnailPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getPixels(self, _ctx: Incomplete | None = ...): ...
    def begin_getPixels(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPixels(self, _r): ...
    def setPixels(self, thePixels, _ctx: Incomplete | None = ...): ...
    def begin_setPixels(self, thePixels, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPixels(self, _r): ...
    def getMimeType(self, _ctx: Incomplete | None = ...): ...
    def begin_getMimeType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getMimeType(self, _r): ...
    def setMimeType(self, theMimeType, _ctx: Incomplete | None = ...): ...
    def begin_setMimeType(self, theMimeType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setMimeType(self, _r): ...
    def getSizeX(self, _ctx: Incomplete | None = ...): ...
    def begin_getSizeX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSizeX(self, _r): ...
    def setSizeX(self, theSizeX, _ctx: Incomplete | None = ...): ...
    def begin_setSizeX(self, theSizeX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSizeX(self, _r): ...
    def getSizeY(self, _ctx: Incomplete | None = ...): ...
    def begin_getSizeY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSizeY(self, _r): ...
    def setSizeY(self, theSizeY, _ctx: Incomplete | None = ...): ...
    def begin_setSizeY(self, theSizeY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setSizeY(self, _r): ...
    def getRef(self, _ctx: Incomplete | None = ...): ...
    def begin_getRef(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRef(self, _r): ...
    def setRef(self, theRef, _ctx: Incomplete | None = ...): ...
    def begin_setRef(self, theRef, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRef(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ThumbnailI(Thumbnail):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        pixels: Incomplete
        mimeType: Incomplete
        sizeX: Incomplete
        sizeY: Incomplete
        ref: Incomplete
        details: Incomplete
        def __init__(self, _cls, pixels, mimeType, sizeX, sizeY, ref, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PIXELS: ClassVar[str] = ...
    MIMETYPE: ClassVar[str] = ...
    SIZEX: ClassVar[str] = ...
    SIZEY: ClassVar[str] = ...
    REF: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadPixels(self): ...
    def getPixels(self, current: Incomplete | None = ...): ...
    def setPixels(self, _pixels, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMimeType(self): ...
    def getMimeType(self, current: Incomplete | None = ...): ...
    def setMimeType(self, _mimeType, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSizeX(self): ...
    def getSizeX(self, current: Incomplete | None = ...): ...
    def setSizeX(self, _sizeX, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSizeY(self): ...
    def getSizeY(self, current: Incomplete | None = ...): ...
    def setSizeY(self, _sizeY, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRef(self): ...
    def getRef(self, current: Incomplete | None = ...): ...
    def setRef(self, _ref, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ThumbnailGenerationJob(Job):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _username: Incomplete | None = ..., _groupname: Incomplete | None = ..., _type: Incomplete | None = ..., _message: Incomplete | None = ..., _status: Incomplete | None = ..., _submitted: Incomplete | None = ..., _scheduledFor: Incomplete | None = ..., _started: Incomplete | None = ..., _finished: Incomplete | None = ..., _originalFileLinksSeq: Incomplete | None = ..., _originalFileLinksLoaded: bool = ..., _originalFileLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ThumbnailGenerationJobPrx(JobPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ThumbnailGenerationJobI(ThumbnailGenerationJob):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        username: Incomplete
        groupname: Incomplete
        type: Incomplete
        message: Incomplete
        status: Incomplete
        submitted: Incomplete
        scheduledFor: Incomplete
        started: Incomplete
        finished: Incomplete
        originalFileLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, username, groupname, type, message, status, submitted, scheduledFor, started, finished, originalFileLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, _username, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, _groupname, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, _submitted, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, _scheduledFor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, _finished, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class TimestampAnnotation(BasicAnnotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getTimeValue: ClassVar[IcePy.Operation] = ...
    _op_setTimeValue: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _timeValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getTimeValue(self, current: Incomplete | None = ...): ...
    def setTimeValue(self, theTimeValue, current: Incomplete | None = ...): ...

class TimestampAnnotationPrx(BasicAnnotationPrx):
    def getTimeValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getTimeValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTimeValue(self, _r): ...
    def setTimeValue(self, theTimeValue, _ctx: Incomplete | None = ...): ...
    def begin_setTimeValue(self, theTimeValue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTimeValue(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class TimestampAnnotationI(TimestampAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        timeValue: Incomplete
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, timeValue, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TIMEVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadTimeValue(self): ...
    def getTimeValue(self, current: Incomplete | None = ...): ...
    def setTimeValue(self, _timeValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class TransmittanceRange(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getCutIn: ClassVar[IcePy.Operation] = ...
    _op_setCutIn: ClassVar[IcePy.Operation] = ...
    _op_getCutOut: ClassVar[IcePy.Operation] = ...
    _op_setCutOut: ClassVar[IcePy.Operation] = ...
    _op_getCutInTolerance: ClassVar[IcePy.Operation] = ...
    _op_setCutInTolerance: ClassVar[IcePy.Operation] = ...
    _op_getCutOutTolerance: ClassVar[IcePy.Operation] = ...
    _op_setCutOutTolerance: ClassVar[IcePy.Operation] = ...
    _op_getTransmittance: ClassVar[IcePy.Operation] = ...
    _op_setTransmittance: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _cutIn: Incomplete | None = ..., _cutOut: Incomplete | None = ..., _cutInTolerance: Incomplete | None = ..., _cutOutTolerance: Incomplete | None = ..., _transmittance: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getCutIn(self, current: Incomplete | None = ...): ...
    def setCutIn(self, theCutIn, current: Incomplete | None = ...): ...
    def getCutOut(self, current: Incomplete | None = ...): ...
    def setCutOut(self, theCutOut, current: Incomplete | None = ...): ...
    def getCutInTolerance(self, current: Incomplete | None = ...): ...
    def setCutInTolerance(self, theCutInTolerance, current: Incomplete | None = ...): ...
    def getCutOutTolerance(self, current: Incomplete | None = ...): ...
    def setCutOutTolerance(self, theCutOutTolerance, current: Incomplete | None = ...): ...
    def getTransmittance(self, current: Incomplete | None = ...): ...
    def setTransmittance(self, theTransmittance, current: Incomplete | None = ...): ...

class TransmittanceRangePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getCutIn(self, _ctx: Incomplete | None = ...): ...
    def begin_getCutIn(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCutIn(self, _r): ...
    def setCutIn(self, theCutIn, _ctx: Incomplete | None = ...): ...
    def begin_setCutIn(self, theCutIn, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCutIn(self, _r): ...
    def getCutOut(self, _ctx: Incomplete | None = ...): ...
    def begin_getCutOut(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCutOut(self, _r): ...
    def setCutOut(self, theCutOut, _ctx: Incomplete | None = ...): ...
    def begin_setCutOut(self, theCutOut, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCutOut(self, _r): ...
    def getCutInTolerance(self, _ctx: Incomplete | None = ...): ...
    def begin_getCutInTolerance(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCutInTolerance(self, _r): ...
    def setCutInTolerance(self, theCutInTolerance, _ctx: Incomplete | None = ...): ...
    def begin_setCutInTolerance(self, theCutInTolerance, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCutInTolerance(self, _r): ...
    def getCutOutTolerance(self, _ctx: Incomplete | None = ...): ...
    def begin_getCutOutTolerance(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getCutOutTolerance(self, _r): ...
    def setCutOutTolerance(self, theCutOutTolerance, _ctx: Incomplete | None = ...): ...
    def begin_setCutOutTolerance(self, theCutOutTolerance, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setCutOutTolerance(self, _r): ...
    def getTransmittance(self, _ctx: Incomplete | None = ...): ...
    def begin_getTransmittance(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTransmittance(self, _r): ...
    def setTransmittance(self, theTransmittance, _ctx: Incomplete | None = ...): ...
    def begin_setTransmittance(self, theTransmittance, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTransmittance(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class TransmittanceRangeI(TransmittanceRange):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        cutIn: Incomplete
        cutOut: Incomplete
        cutInTolerance: Incomplete
        cutOutTolerance: Incomplete
        transmittance: Incomplete
        details: Incomplete
        def __init__(self, _cls, cutIn, cutOut, cutInTolerance, cutOutTolerance, transmittance, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    CUTIN: ClassVar[str] = ...
    CUTOUT: ClassVar[str] = ...
    CUTINTOLERANCE: ClassVar[str] = ...
    CUTOUTTOLERANCE: ClassVar[str] = ...
    TRANSMITTANCE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadCutIn(self): ...
    def getCutIn(self, current: Incomplete | None = ...): ...
    def setCutIn(self, _cutIn, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCutOut(self): ...
    def getCutOut(self, current: Incomplete | None = ...): ...
    def setCutOut(self, _cutOut, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCutInTolerance(self): ...
    def getCutInTolerance(self, current: Incomplete | None = ...): ...
    def setCutInTolerance(self, _cutInTolerance, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadCutOutTolerance(self): ...
    def getCutOutTolerance(self, current: Incomplete | None = ...): ...
    def setCutOutTolerance(self, _cutOutTolerance, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTransmittance(self): ...
    def getTransmittance(self, current: Incomplete | None = ...): ...
    def setTransmittance(self, _transmittance, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class UploadJob(Job):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersionInfoAsMap: ClassVar[IcePy.Operation] = ...
    _op_getVersionInfo: ClassVar[IcePy.Operation] = ...
    _op_setVersionInfo: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _username: Incomplete | None = ..., _groupname: Incomplete | None = ..., _type: Incomplete | None = ..., _message: Incomplete | None = ..., _status: Incomplete | None = ..., _submitted: Incomplete | None = ..., _scheduledFor: Incomplete | None = ..., _started: Incomplete | None = ..., _finished: Incomplete | None = ..., _originalFileLinksSeq: Incomplete | None = ..., _originalFileLinksLoaded: bool = ..., _originalFileLinksCountPerOwner: Incomplete | None = ..., _versionInfo: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersionInfoAsMap(self, current: Incomplete | None = ...): ...
    def getVersionInfo(self, current: Incomplete | None = ...): ...
    def setVersionInfo(self, theVersionInfo, current: Incomplete | None = ...): ...

class UploadJobPrx(JobPrx):
    def getVersionInfoAsMap(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersionInfoAsMap(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersionInfoAsMap(self, _r): ...
    def getVersionInfo(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersionInfo(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersionInfo(self, _r): ...
    def setVersionInfo(self, theVersionInfo, _ctx: Incomplete | None = ...): ...
    def begin_setVersionInfo(self, theVersionInfo, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersionInfo(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class UploadJobI(UploadJob):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        versionInfo: Incomplete
        username: Incomplete
        groupname: Incomplete
        type: Incomplete
        message: Incomplete
        status: Incomplete
        submitted: Incomplete
        scheduledFor: Incomplete
        started: Incomplete
        finished: Incomplete
        originalFileLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, versionInfo, username, groupname, type, message, status, submitted, scheduledFor, started, finished, originalFileLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    VERSIONINFO: ClassVar[str] = ...
    USERNAME: ClassVar[str] = ...
    GROUPNAME: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    MESSAGE: ClassVar[str] = ...
    STATUS: ClassVar[str] = ...
    SUBMITTED: ClassVar[str] = ...
    SCHEDULEDFOR: ClassVar[str] = ...
    STARTED: ClassVar[str] = ...
    FINISHED: ClassVar[str] = ...
    ORIGINALFILELINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadVersionInfo(self): ...
    def getVersionInfo(self, current: Incomplete | None = ...): ...
    def setVersionInfo(self, _versionInfo, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getVersionInfoAsMap(self, current: Incomplete | None = ...): ...
    def unloadUsername(self): ...
    def getUsername(self, current: Incomplete | None = ...): ...
    def setUsername(self, _username, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGroupname(self): ...
    def getGroupname(self, current: Incomplete | None = ...): ...
    def setGroupname(self, _groupname, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadMessage(self): ...
    def getMessage(self, current: Incomplete | None = ...): ...
    def setMessage(self, _message, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadSubmitted(self): ...
    def getSubmitted(self, current: Incomplete | None = ...): ...
    def setSubmitted(self, _submitted, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadScheduledFor(self): ...
    def getScheduledFor(self, current: Incomplete | None = ...): ...
    def setScheduledFor(self, _scheduledFor, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadStarted(self): ...
    def getStarted(self, current: Incomplete | None = ...): ...
    def setStarted(self, _started, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadFinished(self): ...
    def getFinished(self, current: Incomplete | None = ...): ...
    def setFinished(self, _finished, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def isOriginalFileLinksLoaded(self): ...
    def sizeOfOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def copyOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def iterateOriginalFileLinks(self): ...
    def addJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def addAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLink(self, target, current: Incomplete | None = ...): ...
    def removeAllJobOriginalFileLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearOriginalFileLinks(self, current: Incomplete | None = ...): ...
    def reloadOriginalFileLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getOriginalFileLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkOriginalFile(self, addition, current: Incomplete | None = ...): ...
    def addJobOriginalFileLinkToBoth(self, link, bothSides): ...
    def findJobOriginalFileLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkOriginalFile(self, removal, current: Incomplete | None = ...): ...
    def removeJobOriginalFileLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedOriginalFileList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Well(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getStatus: ClassVar[IcePy.Operation] = ...
    _op_setStatus: ClassVar[IcePy.Operation] = ...
    _op_getColumn: ClassVar[IcePy.Operation] = ...
    _op_setColumn: ClassVar[IcePy.Operation] = ...
    _op_getRow: ClassVar[IcePy.Operation] = ...
    _op_setRow: ClassVar[IcePy.Operation] = ...
    _op_getRed: ClassVar[IcePy.Operation] = ...
    _op_setRed: ClassVar[IcePy.Operation] = ...
    _op_getGreen: ClassVar[IcePy.Operation] = ...
    _op_setGreen: ClassVar[IcePy.Operation] = ...
    _op_getBlue: ClassVar[IcePy.Operation] = ...
    _op_setBlue: ClassVar[IcePy.Operation] = ...
    _op_getAlpha: ClassVar[IcePy.Operation] = ...
    _op_setAlpha: ClassVar[IcePy.Operation] = ...
    _op_unloadReagentLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfReagentLinks: ClassVar[IcePy.Operation] = ...
    _op_copyReagentLinks: ClassVar[IcePy.Operation] = ...
    _op_addWellReagentLink: ClassVar[IcePy.Operation] = ...
    _op_addAllWellReagentLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeWellReagentLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllWellReagentLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearReagentLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadReagentLinks: ClassVar[IcePy.Operation] = ...
    _op_getReagentLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkReagent: ClassVar[IcePy.Operation] = ...
    _op_addWellReagentLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findWellReagentLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkReagent: ClassVar[IcePy.Operation] = ...
    _op_removeWellReagentLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedReagentList: ClassVar[IcePy.Operation] = ...
    _op_getExternalDescription: ClassVar[IcePy.Operation] = ...
    _op_setExternalDescription: ClassVar[IcePy.Operation] = ...
    _op_getExternalIdentifier: ClassVar[IcePy.Operation] = ...
    _op_setExternalIdentifier: ClassVar[IcePy.Operation] = ...
    _op_getType: ClassVar[IcePy.Operation] = ...
    _op_setType: ClassVar[IcePy.Operation] = ...
    _op_unloadWellSamples: ClassVar[IcePy.Operation] = ...
    _op_sizeOfWellSamples: ClassVar[IcePy.Operation] = ...
    _op_copyWellSamples: ClassVar[IcePy.Operation] = ...
    _op_addWellSample: ClassVar[IcePy.Operation] = ...
    _op_addAllWellSampleSet: ClassVar[IcePy.Operation] = ...
    _op_removeWellSample: ClassVar[IcePy.Operation] = ...
    _op_removeAllWellSampleSet: ClassVar[IcePy.Operation] = ...
    _op_clearWellSamples: ClassVar[IcePy.Operation] = ...
    _op_reloadWellSamples: ClassVar[IcePy.Operation] = ...
    _op_getWellSample: ClassVar[IcePy.Operation] = ...
    _op_setWellSample: ClassVar[IcePy.Operation] = ...
    _op_getPrimaryWellSample: ClassVar[IcePy.Operation] = ...
    _op_setPrimaryWellSample: ClassVar[IcePy.Operation] = ...
    _op_getPlate: ClassVar[IcePy.Operation] = ...
    _op_setPlate: ClassVar[IcePy.Operation] = ...
    _op_unloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_sizeOfAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_copyAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_addWellAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_addAllWellAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_removeWellAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_removeAllWellAnnotationLinkSet: ClassVar[IcePy.Operation] = ...
    _op_clearAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_reloadAnnotationLinks: ClassVar[IcePy.Operation] = ...
    _op_getAnnotationLinksCountPerOwner: ClassVar[IcePy.Operation] = ...
    _op_linkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_addWellAnnotationLinkToBoth: ClassVar[IcePy.Operation] = ...
    _op_findWellAnnotationLink: ClassVar[IcePy.Operation] = ...
    _op_unlinkAnnotation: ClassVar[IcePy.Operation] = ...
    _op_removeWellAnnotationLinkFromBoth: ClassVar[IcePy.Operation] = ...
    _op_linkedAnnotationList: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _status: Incomplete | None = ..., _column: Incomplete | None = ..., _row: Incomplete | None = ..., _red: Incomplete | None = ..., _green: Incomplete | None = ..., _blue: Incomplete | None = ..., _alpha: Incomplete | None = ..., _reagentLinksSeq: Incomplete | None = ..., _reagentLinksLoaded: bool = ..., _reagentLinksCountPerOwner: Incomplete | None = ..., _externalDescription: Incomplete | None = ..., _externalIdentifier: Incomplete | None = ..., _type: Incomplete | None = ..., _wellSamplesSeq: Incomplete | None = ..., _wellSamplesLoaded: bool = ..., _plate: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, theStatus, current: Incomplete | None = ...): ...
    def getColumn(self, current: Incomplete | None = ...): ...
    def setColumn(self, theColumn, current: Incomplete | None = ...): ...
    def getRow(self, current: Incomplete | None = ...): ...
    def setRow(self, theRow, current: Incomplete | None = ...): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, theRed, current: Incomplete | None = ...): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, theGreen, current: Incomplete | None = ...): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, theBlue, current: Incomplete | None = ...): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, theAlpha, current: Incomplete | None = ...): ...
    def unloadReagentLinks(self, current: Incomplete | None = ...): ...
    def sizeOfReagentLinks(self, current: Incomplete | None = ...): ...
    def copyReagentLinks(self, current: Incomplete | None = ...): ...
    def addWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellReagentLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearReagentLinks(self, current: Incomplete | None = ...): ...
    def reloadReagentLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getReagentLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkReagent(self, addition, current: Incomplete | None = ...): ...
    def addWellReagentLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findWellReagentLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkReagent(self, removal, current: Incomplete | None = ...): ...
    def removeWellReagentLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedReagentList(self, current: Incomplete | None = ...): ...
    def getExternalDescription(self, current: Incomplete | None = ...): ...
    def setExternalDescription(self, theExternalDescription, current: Incomplete | None = ...): ...
    def getExternalIdentifier(self, current: Incomplete | None = ...): ...
    def setExternalIdentifier(self, theExternalIdentifier, current: Incomplete | None = ...): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, theType, current: Incomplete | None = ...): ...
    def unloadWellSamples(self, current: Incomplete | None = ...): ...
    def sizeOfWellSamples(self, current: Incomplete | None = ...): ...
    def copyWellSamples(self, current: Incomplete | None = ...): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSamples(self, current: Incomplete | None = ...): ...
    def reloadWellSamples(self, toCopy, current: Incomplete | None = ...): ...
    def getWellSample(self, index, current: Incomplete | None = ...): ...
    def setWellSample(self, index, theElement, current: Incomplete | None = ...): ...
    def getPrimaryWellSample(self, current: Incomplete | None = ...): ...
    def setPrimaryWellSample(self, theElement, current: Incomplete | None = ...): ...
    def getPlate(self, current: Incomplete | None = ...): ...
    def setPlate(self, thePlate, current: Incomplete | None = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def addWellAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellAnnotationLink(self, theTarget, current: Incomplete | None = ...): ...
    def removeAllWellAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addWellAnnotationLinkToBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def findWellAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeWellAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...

class WellPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getStatus(self, _ctx: Incomplete | None = ...): ...
    def begin_getStatus(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getStatus(self, _r): ...
    def setStatus(self, theStatus, _ctx: Incomplete | None = ...): ...
    def begin_setStatus(self, theStatus, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setStatus(self, _r): ...
    def getColumn(self, _ctx: Incomplete | None = ...): ...
    def begin_getColumn(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getColumn(self, _r): ...
    def setColumn(self, theColumn, _ctx: Incomplete | None = ...): ...
    def begin_setColumn(self, theColumn, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setColumn(self, _r): ...
    def getRow(self, _ctx: Incomplete | None = ...): ...
    def begin_getRow(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRow(self, _r): ...
    def setRow(self, theRow, _ctx: Incomplete | None = ...): ...
    def begin_setRow(self, theRow, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRow(self, _r): ...
    def getRed(self, _ctx: Incomplete | None = ...): ...
    def begin_getRed(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getRed(self, _r): ...
    def setRed(self, theRed, _ctx: Incomplete | None = ...): ...
    def begin_setRed(self, theRed, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setRed(self, _r): ...
    def getGreen(self, _ctx: Incomplete | None = ...): ...
    def begin_getGreen(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getGreen(self, _r): ...
    def setGreen(self, theGreen, _ctx: Incomplete | None = ...): ...
    def begin_setGreen(self, theGreen, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGreen(self, _r): ...
    def getBlue(self, _ctx: Incomplete | None = ...): ...
    def begin_getBlue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getBlue(self, _r): ...
    def setBlue(self, theBlue, _ctx: Incomplete | None = ...): ...
    def begin_setBlue(self, theBlue, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setBlue(self, _r): ...
    def getAlpha(self, _ctx: Incomplete | None = ...): ...
    def begin_getAlpha(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAlpha(self, _r): ...
    def setAlpha(self, theAlpha, _ctx: Incomplete | None = ...): ...
    def begin_setAlpha(self, theAlpha, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setAlpha(self, _r): ...
    def unloadReagentLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadReagentLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadReagentLinks(self, _r): ...
    def sizeOfReagentLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfReagentLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfReagentLinks(self, _r): ...
    def copyReagentLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyReagentLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyReagentLinks(self, _r): ...
    def addWellReagentLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addWellReagentLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addWellReagentLink(self, _r): ...
    def addAllWellReagentLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllWellReagentLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllWellReagentLinkSet(self, _r): ...
    def removeWellReagentLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeWellReagentLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeWellReagentLink(self, _r): ...
    def removeAllWellReagentLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllWellReagentLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllWellReagentLinkSet(self, _r): ...
    def clearReagentLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearReagentLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearReagentLinks(self, _r): ...
    def reloadReagentLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadReagentLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadReagentLinks(self, _r): ...
    def getReagentLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getReagentLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getReagentLinksCountPerOwner(self, _r): ...
    def linkReagent(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkReagent(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkReagent(self, _r): ...
    def addWellReagentLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addWellReagentLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addWellReagentLinkToBoth(self, _r): ...
    def findWellReagentLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findWellReagentLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findWellReagentLink(self, _r): ...
    def unlinkReagent(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkReagent(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkReagent(self, _r): ...
    def removeWellReagentLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeWellReagentLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeWellReagentLinkFromBoth(self, _r): ...
    def linkedReagentList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedReagentList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedReagentList(self, _r): ...
    def getExternalDescription(self, _ctx: Incomplete | None = ...): ...
    def begin_getExternalDescription(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExternalDescription(self, _r): ...
    def setExternalDescription(self, theExternalDescription, _ctx: Incomplete | None = ...): ...
    def begin_setExternalDescription(self, theExternalDescription, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setExternalDescription(self, _r): ...
    def getExternalIdentifier(self, _ctx: Incomplete | None = ...): ...
    def begin_getExternalIdentifier(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getExternalIdentifier(self, _r): ...
    def setExternalIdentifier(self, theExternalIdentifier, _ctx: Incomplete | None = ...): ...
    def begin_setExternalIdentifier(self, theExternalIdentifier, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setExternalIdentifier(self, _r): ...
    def getType(self, _ctx: Incomplete | None = ...): ...
    def begin_getType(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getType(self, _r): ...
    def setType(self, theType, _ctx: Incomplete | None = ...): ...
    def begin_setType(self, theType, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setType(self, _r): ...
    def unloadWellSamples(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadWellSamples(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadWellSamples(self, _r): ...
    def sizeOfWellSamples(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfWellSamples(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfWellSamples(self, _r): ...
    def copyWellSamples(self, _ctx: Incomplete | None = ...): ...
    def begin_copyWellSamples(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyWellSamples(self, _r): ...
    def addWellSample(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addWellSample(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addWellSample(self, _r): ...
    def addAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllWellSampleSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllWellSampleSet(self, _r): ...
    def removeWellSample(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeWellSample(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeWellSample(self, _r): ...
    def removeAllWellSampleSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllWellSampleSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllWellSampleSet(self, _r): ...
    def clearWellSamples(self, _ctx: Incomplete | None = ...): ...
    def begin_clearWellSamples(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearWellSamples(self, _r): ...
    def reloadWellSamples(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadWellSamples(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadWellSamples(self, _r): ...
    def getWellSample(self, index, _ctx: Incomplete | None = ...): ...
    def begin_getWellSample(self, index, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWellSample(self, _r): ...
    def setWellSample(self, index, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setWellSample(self, index, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWellSample(self, _r): ...
    def getPrimaryWellSample(self, _ctx: Incomplete | None = ...): ...
    def begin_getPrimaryWellSample(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPrimaryWellSample(self, _r): ...
    def setPrimaryWellSample(self, theElement, _ctx: Incomplete | None = ...): ...
    def begin_setPrimaryWellSample(self, theElement, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPrimaryWellSample(self, _r): ...
    def getPlate(self, _ctx: Incomplete | None = ...): ...
    def begin_getPlate(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPlate(self, _r): ...
    def setPlate(self, thePlate, _ctx: Incomplete | None = ...): ...
    def begin_setPlate(self, thePlate, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPlate(self, _r): ...
    def unloadAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_unloadAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unloadAnnotationLinks(self, _r): ...
    def sizeOfAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_sizeOfAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_sizeOfAnnotationLinks(self, _r): ...
    def copyAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_copyAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copyAnnotationLinks(self, _r): ...
    def addWellAnnotationLink(self, target, _ctx: Incomplete | None = ...): ...
    def begin_addWellAnnotationLink(self, target, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addWellAnnotationLink(self, _r): ...
    def addAllWellAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_addAllWellAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addAllWellAnnotationLinkSet(self, _r): ...
    def removeWellAnnotationLink(self, theTarget, _ctx: Incomplete | None = ...): ...
    def begin_removeWellAnnotationLink(self, theTarget, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeWellAnnotationLink(self, _r): ...
    def removeAllWellAnnotationLinkSet(self, targets, _ctx: Incomplete | None = ...): ...
    def begin_removeAllWellAnnotationLinkSet(self, targets, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeAllWellAnnotationLinkSet(self, _r): ...
    def clearAnnotationLinks(self, _ctx: Incomplete | None = ...): ...
    def begin_clearAnnotationLinks(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_clearAnnotationLinks(self, _r): ...
    def reloadAnnotationLinks(self, toCopy, _ctx: Incomplete | None = ...): ...
    def begin_reloadAnnotationLinks(self, toCopy, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_reloadAnnotationLinks(self, _r): ...
    def getAnnotationLinksCountPerOwner(self, _ctx: Incomplete | None = ...): ...
    def begin_getAnnotationLinksCountPerOwner(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getAnnotationLinksCountPerOwner(self, _r): ...
    def linkAnnotation(self, addition, _ctx: Incomplete | None = ...): ...
    def begin_linkAnnotation(self, addition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkAnnotation(self, _r): ...
    def addWellAnnotationLinkToBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_addWellAnnotationLinkToBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_addWellAnnotationLinkToBoth(self, _r): ...
    def findWellAnnotationLink(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_findWellAnnotationLink(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_findWellAnnotationLink(self, _r): ...
    def unlinkAnnotation(self, removal, _ctx: Incomplete | None = ...): ...
    def begin_unlinkAnnotation(self, removal, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_unlinkAnnotation(self, _r): ...
    def removeWellAnnotationLinkFromBoth(self, link, bothSides, _ctx: Incomplete | None = ...): ...
    def begin_removeWellAnnotationLinkFromBoth(self, link, bothSides, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_removeWellAnnotationLinkFromBoth(self, _r): ...
    def linkedAnnotationList(self, _ctx: Incomplete | None = ...): ...
    def begin_linkedAnnotationList(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_linkedAnnotationList(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class WellI(Well):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        status: Incomplete
        column: Incomplete
        row: Incomplete
        red: Incomplete
        green: Incomplete
        blue: Incomplete
        alpha: Incomplete
        reagentLinks: Incomplete
        externalDescription: Incomplete
        externalIdentifier: Incomplete
        type: Incomplete
        wellSamples: Incomplete
        plate: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, status, column, row, red, green, blue, alpha, reagentLinks, externalDescription, externalIdentifier, type, wellSamples, plate, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    STATUS: ClassVar[str] = ...
    COLUMN: ClassVar[str] = ...
    ROW: ClassVar[str] = ...
    RED: ClassVar[str] = ...
    GREEN: ClassVar[str] = ...
    BLUE: ClassVar[str] = ...
    ALPHA: ClassVar[str] = ...
    REAGENTLINKS: ClassVar[str] = ...
    EXTERNALDESCRIPTION: ClassVar[str] = ...
    EXTERNALIDENTIFIER: ClassVar[str] = ...
    TYPE: ClassVar[str] = ...
    WELLSAMPLES: ClassVar[str] = ...
    PLATE: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadStatus(self): ...
    def getStatus(self, current: Incomplete | None = ...): ...
    def setStatus(self, _status, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadColumn(self): ...
    def getColumn(self, current: Incomplete | None = ...): ...
    def setColumn(self, _column, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRow(self): ...
    def getRow(self, current: Incomplete | None = ...): ...
    def setRow(self, _row, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadRed(self): ...
    def getRed(self, current: Incomplete | None = ...): ...
    def setRed(self, _red, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadGreen(self): ...
    def getGreen(self, current: Incomplete | None = ...): ...
    def setGreen(self, _green, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadBlue(self): ...
    def getBlue(self, current: Incomplete | None = ...): ...
    def setBlue(self, _blue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAlpha(self): ...
    def getAlpha(self, current: Incomplete | None = ...): ...
    def setAlpha(self, _alpha, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadReagentLinks(self, current: Incomplete | None = ...): ...
    def isReagentLinksLoaded(self): ...
    def sizeOfReagentLinks(self, current: Incomplete | None = ...): ...
    def copyReagentLinks(self, current: Incomplete | None = ...): ...
    def iterateReagentLinks(self): ...
    def addWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellReagentLink(self, target, current: Incomplete | None = ...): ...
    def removeAllWellReagentLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearReagentLinks(self, current: Incomplete | None = ...): ...
    def reloadReagentLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getReagentLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkReagent(self, addition, current: Incomplete | None = ...): ...
    def addWellReagentLinkToBoth(self, link, bothSides): ...
    def findWellReagentLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkReagent(self, removal, current: Incomplete | None = ...): ...
    def removeWellReagentLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedReagentList(self, current: Incomplete | None = ...): ...
    def unloadExternalDescription(self): ...
    def getExternalDescription(self, current: Incomplete | None = ...): ...
    def setExternalDescription(self, _externalDescription, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadExternalIdentifier(self): ...
    def getExternalIdentifier(self, current: Incomplete | None = ...): ...
    def setExternalIdentifier(self, _externalIdentifier, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadType(self): ...
    def getType(self, current: Incomplete | None = ...): ...
    def setType(self, _type, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWellSamples(self, current: Incomplete | None = ...): ...
    def isWellSamplesLoaded(self): ...
    def sizeOfWellSamples(self, current: Incomplete | None = ...): ...
    def copyWellSamples(self, current: Incomplete | None = ...): ...
    def iterateWellSamples(self): ...
    def addWellSample(self, target, current: Incomplete | None = ...): ...
    def addAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellSample(self, target, current: Incomplete | None = ...): ...
    def removeAllWellSampleSet(self, targets, current: Incomplete | None = ...): ...
    def clearWellSamples(self, current: Incomplete | None = ...): ...
    def reloadWellSamples(self, toCopy, current: Incomplete | None = ...): ...
    def getWellSample(self, index, current: Incomplete | None = ...): ...
    def setWellSample(self, index, element, current: Incomplete | None = ..., wrap: bool = ...): ...
    def getPrimaryWellSample(self, current: Incomplete | None = ...): ...
    def setPrimaryWellSample(self, element, current: Incomplete | None = ...): ...
    def unloadPlate(self): ...
    def getPlate(self, current: Incomplete | None = ...): ...
    def setPlate(self, _plate, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addWellAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllWellAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeWellAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllWellAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addWellAnnotationLinkToBoth(self, link, bothSides): ...
    def findWellAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeWellAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class WellAnnotationLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class WellAnnotationLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class WellAnnotationLinkI(WellAnnotationLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class WellReagentLink(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getParent: ClassVar[IcePy.Operation] = ...
    _op_setParent: ClassVar[IcePy.Operation] = ...
    _op_getChild: ClassVar[IcePy.Operation] = ...
    _op_setChild: ClassVar[IcePy.Operation] = ...
    _op_link: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _parent: Incomplete | None = ..., _child: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, theParent, current: Incomplete | None = ...): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, theChild, current: Incomplete | None = ...): ...
    def link(self, theParent, theChild, current: Incomplete | None = ...): ...

class WellReagentLinkPrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getParent(self, _ctx: Incomplete | None = ...): ...
    def begin_getParent(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getParent(self, _r): ...
    def setParent(self, theParent, _ctx: Incomplete | None = ...): ...
    def begin_setParent(self, theParent, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setParent(self, _r): ...
    def getChild(self, _ctx: Incomplete | None = ...): ...
    def begin_getChild(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getChild(self, _r): ...
    def setChild(self, theChild, _ctx: Incomplete | None = ...): ...
    def begin_setChild(self, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setChild(self, _r): ...
    def link(self, theParent, theChild, _ctx: Incomplete | None = ...): ...
    def begin_link(self, theParent, theChild, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_link(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class WellReagentLinkI(WellReagentLink):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        parent: Incomplete
        child: Incomplete
        details: Incomplete
        def __init__(self, _cls, parent, child, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    PARENT: ClassVar[str] = ...
    CHILD: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadParent(self): ...
    def getParent(self, current: Incomplete | None = ...): ...
    def setParent(self, _parent, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadChild(self): ...
    def getChild(self, current: Incomplete | None = ...): ...
    def setChild(self, _child, current: Incomplete | None = ..., wrap: bool = ...): ...
    def link(self, _parent, _child, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class WellSample(IObject):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getVersion: ClassVar[IcePy.Operation] = ...
    _op_setVersion: ClassVar[IcePy.Operation] = ...
    _op_getPosX: ClassVar[IcePy.Operation] = ...
    _op_setPosX: ClassVar[IcePy.Operation] = ...
    _op_getPosY: ClassVar[IcePy.Operation] = ...
    _op_setPosY: ClassVar[IcePy.Operation] = ...
    _op_getTimepoint: ClassVar[IcePy.Operation] = ...
    _op_setTimepoint: ClassVar[IcePy.Operation] = ...
    _op_getPlateAcquisition: ClassVar[IcePy.Operation] = ...
    _op_setPlateAcquisition: ClassVar[IcePy.Operation] = ...
    _op_getWell: ClassVar[IcePy.Operation] = ...
    _op_setWell: ClassVar[IcePy.Operation] = ...
    _op_getImage: ClassVar[IcePy.Operation] = ...
    _op_setImage: ClassVar[IcePy.Operation] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _posX: Incomplete | None = ..., _posY: Incomplete | None = ..., _timepoint: Incomplete | None = ..., _plateAcquisition: Incomplete | None = ..., _well: Incomplete | None = ..., _image: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, theVersion, current: Incomplete | None = ...): ...
    def getPosX(self, current: Incomplete | None = ...): ...
    def setPosX(self, thePosX, current: Incomplete | None = ...): ...
    def getPosY(self, current: Incomplete | None = ...): ...
    def setPosY(self, thePosY, current: Incomplete | None = ...): ...
    def getTimepoint(self, current: Incomplete | None = ...): ...
    def setTimepoint(self, theTimepoint, current: Incomplete | None = ...): ...
    def getPlateAcquisition(self, current: Incomplete | None = ...): ...
    def setPlateAcquisition(self, thePlateAcquisition, current: Incomplete | None = ...): ...
    def getWell(self, current: Incomplete | None = ...): ...
    def setWell(self, theWell, current: Incomplete | None = ...): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(self, theImage, current: Incomplete | None = ...): ...

class WellSamplePrx(IObjectPrx):
    def getVersion(self, _ctx: Incomplete | None = ...): ...
    def begin_getVersion(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getVersion(self, _r): ...
    def setVersion(self, theVersion, _ctx: Incomplete | None = ...): ...
    def begin_setVersion(self, theVersion, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setVersion(self, _r): ...
    def getPosX(self, _ctx: Incomplete | None = ...): ...
    def begin_getPosX(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPosX(self, _r): ...
    def setPosX(self, thePosX, _ctx: Incomplete | None = ...): ...
    def begin_setPosX(self, thePosX, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPosX(self, _r): ...
    def getPosY(self, _ctx: Incomplete | None = ...): ...
    def begin_getPosY(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPosY(self, _r): ...
    def setPosY(self, thePosY, _ctx: Incomplete | None = ...): ...
    def begin_setPosY(self, thePosY, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPosY(self, _r): ...
    def getTimepoint(self, _ctx: Incomplete | None = ...): ...
    def begin_getTimepoint(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getTimepoint(self, _r): ...
    def setTimepoint(self, theTimepoint, _ctx: Incomplete | None = ...): ...
    def begin_setTimepoint(self, theTimepoint, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setTimepoint(self, _r): ...
    def getPlateAcquisition(self, _ctx: Incomplete | None = ...): ...
    def begin_getPlateAcquisition(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPlateAcquisition(self, _r): ...
    def setPlateAcquisition(self, thePlateAcquisition, _ctx: Incomplete | None = ...): ...
    def begin_setPlateAcquisition(self, thePlateAcquisition, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPlateAcquisition(self, _r): ...
    def getWell(self, _ctx: Incomplete | None = ...): ...
    def begin_getWell(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getWell(self, _r): ...
    def setWell(self, theWell, _ctx: Incomplete | None = ...): ...
    def begin_setWell(self, theWell, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWell(self, _r): ...
    def getImage(self, _ctx: Incomplete | None = ...): ...
    def begin_getImage(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getImage(self, _r): ...
    def setImage(self, theImage, _ctx: Incomplete | None = ...): ...
    def begin_setImage(self, theImage, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setImage(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class WellSampleI(WellSample):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        posX: Incomplete
        posY: Incomplete
        timepoint: Incomplete
        plateAcquisition: Incomplete
        well: Incomplete
        image: Incomplete
        details: Incomplete
        def __init__(self, _cls, posX, posY, timepoint, plateAcquisition, well, image, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    POSX: ClassVar[str] = ...
    POSY: ClassVar[str] = ...
    TIMEPOINT: ClassVar[str] = ...
    PLATEACQUISITION: ClassVar[str] = ...
    WELL: ClassVar[str] = ...
    IMAGE: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadPosX(self): ...
    def getPosX(self, current: Incomplete | None = ...): ...
    def setPosX(self, _posX, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPosY(self): ...
    def getPosY(self, current: Incomplete | None = ...): ...
    def setPosY(self, _posY, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadTimepoint(self): ...
    def getTimepoint(self, current: Incomplete | None = ...): ...
    def setTimepoint(self, _timepoint, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadPlateAcquisition(self): ...
    def getPlateAcquisition(self, current: Incomplete | None = ...): ...
    def setPlateAcquisition(self, _plateAcquisition, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadWell(self): ...
    def getWell(self, current: Incomplete | None = ...): ...
    def setWell(self, _well, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadImage(self): ...
    def getImage(self, current: Incomplete | None = ...): ...
    def setImage(self, _image, current: Incomplete | None = ..., wrap: bool = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class XmlAnnotation(TextAnnotation):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, _id: Incomplete | None = ..., _details: Incomplete | None = ..., _loaded: bool = ..., _version: Incomplete | None = ..., _ns: Incomplete | None = ..., _name: Incomplete | None = ..., _description: Incomplete | None = ..., _annotationLinksSeq: Incomplete | None = ..., _annotationLinksLoaded: bool = ..., _annotationLinksCountPerOwner: Incomplete | None = ..., _textValue: Incomplete | None = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class XmlAnnotationPrx(TextAnnotationPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class XmlAnnotationI(XmlAnnotation):
    class _field_info_data(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        wrapper: Incomplete
        nullable: Incomplete
        def __init__(self, _cls, wrapper, nullable) -> None: ...
        def __getnewargs__(self): ...

    class _field_info_type(tuple):
        _fields: ClassVar[tuple] = ...
        _field_defaults: ClassVar[dict] = ...
        textValue: Incomplete
        ns: Incomplete
        name: Incomplete
        description: Incomplete
        annotationLinks: Incomplete
        details: Incomplete
        def __init__(self, _cls, textValue, ns, name, description, annotationLinks, details) -> None: ...
        def __getnewargs__(self): ...
    _field_info: ClassVar[FieldInfo] = ...
    TEXTVALUE: ClassVar[str] = ...
    NS: ClassVar[str] = ...
    NAME: ClassVar[str] = ...
    DESCRIPTION: ClassVar[str] = ...
    ANNOTATIONLINKS: ClassVar[str] = ...
    DETAILS: ClassVar[str] = ...
    def errorIfUnloaded(self): ...
    def throwNullCollectionException(self, propertyName): ...
    def __init__(self, id: Incomplete | None = ..., loaded: Incomplete | None = ...) -> None: ...
    def unload(self, current: Incomplete | None = ...): ...
    def isLoaded(self, current: Incomplete | None = ...): ...
    def unloadCollections(self, current: Incomplete | None = ...): ...
    def isGlobal(self, current: Incomplete | None = ...): ...
    def isMutable(self, current: Incomplete | None = ...): ...
    def isAnnotated(self, current: Incomplete | None = ...): ...
    def isLink(self, current: Incomplete | None = ...): ...
    def shallowCopy(self, current: Incomplete | None = ...): ...
    def proxy(self, current: Incomplete | None = ...): ...
    def getDetails(self, current: Incomplete | None = ...): ...
    def unloadDetails(self, current: Incomplete | None = ...): ...
    def getId(self, current: Incomplete | None = ...): ...
    def setId(self, _id, current: Incomplete | None = ...): ...
    def checkUnloadedProperty(self, value, loadedField): ...
    def getVersion(self, current: Incomplete | None = ...): ...
    def setVersion(self, version, current: Incomplete | None = ...): ...
    def unloadTextValue(self): ...
    def getTextValue(self, current: Incomplete | None = ...): ...
    def setTextValue(self, _textValue, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadNs(self): ...
    def getNs(self, current: Incomplete | None = ...): ...
    def setNs(self, _ns, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadName(self): ...
    def getName(self, current: Incomplete | None = ...): ...
    def setName(self, _name, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadDescription(self): ...
    def getDescription(self, current: Incomplete | None = ...): ...
    def setDescription(self, _description, current: Incomplete | None = ..., wrap: bool = ...): ...
    def unloadAnnotationLinks(self, current: Incomplete | None = ...): ...
    def isAnnotationLinksLoaded(self): ...
    def sizeOfAnnotationLinks(self, current: Incomplete | None = ...): ...
    def copyAnnotationLinks(self, current: Incomplete | None = ...): ...
    def iterateAnnotationLinks(self): ...
    def addAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def addAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLink(self, target, current: Incomplete | None = ...): ...
    def removeAllAnnotationAnnotationLinkSet(self, targets, current: Incomplete | None = ...): ...
    def clearAnnotationLinks(self, current: Incomplete | None = ...): ...
    def reloadAnnotationLinks(self, toCopy, current: Incomplete | None = ...): ...
    def getAnnotationLinksCountPerOwner(self, current: Incomplete | None = ...): ...
    def linkAnnotation(self, addition, current: Incomplete | None = ...): ...
    def addAnnotationAnnotationLinkToBoth(self, link, bothSides): ...
    def findAnnotationAnnotationLink(self, removal, current: Incomplete | None = ...): ...
    def unlinkAnnotation(self, removal, current: Incomplete | None = ...): ...
    def removeAnnotationAnnotationLinkFromBoth(self, link, bothSides, current: Incomplete | None = ...): ...
    def linkedAnnotationList(self, current: Incomplete | None = ...): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Permissions(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getPerm1: ClassVar[IcePy.Operation] = ...
    _op_setPerm1: ClassVar[IcePy.Operation] = ...
    _op_isDisallow: ClassVar[IcePy.Operation] = ...
    _op_isRestricted: ClassVar[IcePy.Operation] = ...
    _op_canAnnotate: ClassVar[IcePy.Operation] = ...
    _op_canEdit: ClassVar[IcePy.Operation] = ...
    _op_canLink: ClassVar[IcePy.Operation] = ...
    _op_canDelete: ClassVar[IcePy.Operation] = ...
    _op_canChgrp: ClassVar[IcePy.Operation] = ...
    _op_canChown: ClassVar[IcePy.Operation] = ...
    _op_isUserRead: ClassVar[IcePy.Operation] = ...
    _op_isUserAnnotate: ClassVar[IcePy.Operation] = ...
    _op_isUserWrite: ClassVar[IcePy.Operation] = ...
    _op_isGroupRead: ClassVar[IcePy.Operation] = ...
    _op_isGroupAnnotate: ClassVar[IcePy.Operation] = ...
    _op_isGroupWrite: ClassVar[IcePy.Operation] = ...
    _op_isWorldRead: ClassVar[IcePy.Operation] = ...
    _op_isWorldAnnotate: ClassVar[IcePy.Operation] = ...
    _op_isWorldWrite: ClassVar[IcePy.Operation] = ...
    _op_setUserRead: ClassVar[IcePy.Operation] = ...
    _op_setUserAnnotate: ClassVar[IcePy.Operation] = ...
    _op_setUserWrite: ClassVar[IcePy.Operation] = ...
    _op_setGroupRead: ClassVar[IcePy.Operation] = ...
    _op_setGroupAnnotate: ClassVar[IcePy.Operation] = ...
    _op_setGroupWrite: ClassVar[IcePy.Operation] = ...
    _op_setWorldRead: ClassVar[IcePy.Operation] = ...
    _op_setWorldAnnotate: ClassVar[IcePy.Operation] = ...
    _op_setWorldWrite: ClassVar[IcePy.Operation] = ...
    def __init__(self, _restrictions: Incomplete | None = ..., _extendedRestrictions: Incomplete | None = ..., _perm1: int = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getPerm1(self, current: Incomplete | None = ...): ...
    def setPerm1(self, value, current: Incomplete | None = ...): ...
    def isDisallow(self, restriction, current: Incomplete | None = ...): ...
    def isRestricted(self, restriction, current: Incomplete | None = ...): ...
    def canAnnotate(self, current: Incomplete | None = ...): ...
    def canEdit(self, current: Incomplete | None = ...): ...
    def canLink(self, current: Incomplete | None = ...): ...
    def canDelete(self, current: Incomplete | None = ...): ...
    def canChgrp(self, current: Incomplete | None = ...): ...
    def canChown(self, current: Incomplete | None = ...): ...
    def isUserRead(self, current: Incomplete | None = ...): ...
    def isUserAnnotate(self, current: Incomplete | None = ...): ...
    def isUserWrite(self, current: Incomplete | None = ...): ...
    def isGroupRead(self, current: Incomplete | None = ...): ...
    def isGroupAnnotate(self, current: Incomplete | None = ...): ...
    def isGroupWrite(self, current: Incomplete | None = ...): ...
    def isWorldRead(self, current: Incomplete | None = ...): ...
    def isWorldAnnotate(self, current: Incomplete | None = ...): ...
    def isWorldWrite(self, current: Incomplete | None = ...): ...
    def setUserRead(self, value, current: Incomplete | None = ...): ...
    def setUserAnnotate(self, value, current: Incomplete | None = ...): ...
    def setUserWrite(self, value, current: Incomplete | None = ...): ...
    def setGroupRead(self, value, current: Incomplete | None = ...): ...
    def setGroupAnnotate(self, value, current: Incomplete | None = ...): ...
    def setGroupWrite(self, value, current: Incomplete | None = ...): ...
    def setWorldRead(self, value, current: Incomplete | None = ...): ...
    def setWorldAnnotate(self, value, current: Incomplete | None = ...): ...
    def setWorldWrite(self, value, current: Incomplete | None = ...): ...

class PermissionsPrx(IcePy.ObjectPrx):
    def getPerm1(self, _ctx: Incomplete | None = ...): ...
    def begin_getPerm1(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getPerm1(self, _r): ...
    def setPerm1(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setPerm1(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setPerm1(self, _r): ...
    def isDisallow(self, restriction, _ctx: Incomplete | None = ...): ...
    def begin_isDisallow(self, restriction, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isDisallow(self, _r): ...
    def isRestricted(self, restriction, _ctx: Incomplete | None = ...): ...
    def begin_isRestricted(self, restriction, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isRestricted(self, _r): ...
    def canAnnotate(self, _ctx: Incomplete | None = ...): ...
    def begin_canAnnotate(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_canAnnotate(self, _r): ...
    def canEdit(self, _ctx: Incomplete | None = ...): ...
    def begin_canEdit(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_canEdit(self, _r): ...
    def canLink(self, _ctx: Incomplete | None = ...): ...
    def begin_canLink(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_canLink(self, _r): ...
    def canDelete(self, _ctx: Incomplete | None = ...): ...
    def begin_canDelete(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_canDelete(self, _r): ...
    def canChgrp(self, _ctx: Incomplete | None = ...): ...
    def begin_canChgrp(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_canChgrp(self, _r): ...
    def canChown(self, _ctx: Incomplete | None = ...): ...
    def begin_canChown(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_canChown(self, _r): ...
    def isUserRead(self, _ctx: Incomplete | None = ...): ...
    def begin_isUserRead(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isUserRead(self, _r): ...
    def isUserAnnotate(self, _ctx: Incomplete | None = ...): ...
    def begin_isUserAnnotate(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isUserAnnotate(self, _r): ...
    def isUserWrite(self, _ctx: Incomplete | None = ...): ...
    def begin_isUserWrite(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isUserWrite(self, _r): ...
    def isGroupRead(self, _ctx: Incomplete | None = ...): ...
    def begin_isGroupRead(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isGroupRead(self, _r): ...
    def isGroupAnnotate(self, _ctx: Incomplete | None = ...): ...
    def begin_isGroupAnnotate(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isGroupAnnotate(self, _r): ...
    def isGroupWrite(self, _ctx: Incomplete | None = ...): ...
    def begin_isGroupWrite(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isGroupWrite(self, _r): ...
    def isWorldRead(self, _ctx: Incomplete | None = ...): ...
    def begin_isWorldRead(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isWorldRead(self, _r): ...
    def isWorldAnnotate(self, _ctx: Incomplete | None = ...): ...
    def begin_isWorldAnnotate(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isWorldAnnotate(self, _r): ...
    def isWorldWrite(self, _ctx: Incomplete | None = ...): ...
    def begin_isWorldWrite(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_isWorldWrite(self, _r): ...
    def setUserRead(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setUserRead(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUserRead(self, _r): ...
    def setUserAnnotate(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setUserAnnotate(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUserAnnotate(self, _r): ...
    def setUserWrite(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setUserWrite(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUserWrite(self, _r): ...
    def setGroupRead(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setGroupRead(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGroupRead(self, _r): ...
    def setGroupAnnotate(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setGroupAnnotate(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGroupAnnotate(self, _r): ...
    def setGroupWrite(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setGroupWrite(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setGroupWrite(self, _r): ...
    def setWorldRead(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setWorldRead(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWorldRead(self, _r): ...
    def setWorldAnnotate(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setWorldAnnotate(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWorldAnnotate(self, _r): ...
    def setWorldWrite(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setWorldWrite(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setWorldWrite(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PermissionsI(Permissions):
    def __init__(self, l: Incomplete | None = ...) -> None: ...
    def granted(self, mask, shift): ...
    def set(self, mask, shift, on): ...
    def isUserRead(self): ...
    def setUserRead(self, value): ...
    def isUserWrite(self): ...
    def setUserWrite(self, value): ...
    def isUserAnnotate(self): ...
    def setUserAnnotate(self, value): ...
    def isGroupRead(self): ...
    def setGroupRead(self, value): ...
    def isGroupWrite(self): ...
    def setGroupWrite(self, value): ...
    def isGroupAnnotate(self): ...
    def setGroupAnnotate(self, value): ...
    def isWorldRead(self): ...
    def setWorldRead(self, value): ...
    def isWorldWrite(self): ...
    def setWorldWrite(self, value): ...
    def isWorldAnnotate(self): ...
    def setWorldAnnotate(self, value): ...
    def isRestricted(self, restriction, current: Incomplete | None = ...): ...
    def isDisallow(self, restriction, current: Incomplete | None = ...): ...
    def canAnnotate(self, current: Incomplete | None = ...): ...
    def canDelete(self, current: Incomplete | None = ...): ...
    def canEdit(self, current: Incomplete | None = ...): ...
    def canLink(self, current: Incomplete | None = ...): ...
    def canChgrp(self, current: Incomplete | None = ...): ...
    def canChown(self, current: Incomplete | None = ...): ...
    def getPerm1(self): ...
    def setPerm1(self, _perm1): ...
    def from_string(self, perms): ...
    def throwIfImmutable(self): ...
    def ice_postUnmarshal(self): ...
    def ice_preMarshal(self): ...
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, value): ...

class ElectricPotential(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    _op_getUnit: ClassVar[IcePy.Operation] = ...
    _op_setUnit: ClassVar[IcePy.Operation] = ...
    _op_getSymbol: ClassVar[IcePy.Operation] = ...
    _op_copy: ClassVar[IcePy.Operation] = ...
    def __init__(self, _value: float = ..., _unit: enums.UnitsElectricPotential = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    def copy(self, current: Incomplete | None = ...): ...

class ElectricPotentialPrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    def getUnit(self, _ctx: Incomplete | None = ...): ...
    def begin_getUnit(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUnit(self, _r): ...
    def setUnit(self, unit, _ctx: Incomplete | None = ...): ...
    def begin_setUnit(self, unit, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUnit(self, _r): ...
    def getSymbol(self, _ctx: Incomplete | None = ...): ...
    def begin_getSymbol(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSymbol(self, _r): ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    def begin_copy(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copy(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class ElectricPotentialI(ElectricPotential, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...
    def __init__(self, value: Incomplete | None = ..., unit: Incomplete | None = ...) -> None: ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    @staticmethod
    def lookupSymbol(unit): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...

class Frequency(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    _op_getUnit: ClassVar[IcePy.Operation] = ...
    _op_setUnit: ClassVar[IcePy.Operation] = ...
    _op_getSymbol: ClassVar[IcePy.Operation] = ...
    _op_copy: ClassVar[IcePy.Operation] = ...
    def __init__(self, _value: float = ..., _unit: enums.UnitsFrequency = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    def copy(self, current: Incomplete | None = ...): ...

class FrequencyPrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    def getUnit(self, _ctx: Incomplete | None = ...): ...
    def begin_getUnit(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUnit(self, _r): ...
    def setUnit(self, unit, _ctx: Incomplete | None = ...): ...
    def begin_setUnit(self, unit, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUnit(self, _r): ...
    def getSymbol(self, _ctx: Incomplete | None = ...): ...
    def begin_getSymbol(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSymbol(self, _r): ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    def begin_copy(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copy(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class FrequencyI(Frequency, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...
    def __init__(self, value: Incomplete | None = ..., unit: Incomplete | None = ...) -> None: ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    @staticmethod
    def lookupSymbol(unit): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...

class Length(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    _op_getUnit: ClassVar[IcePy.Operation] = ...
    _op_setUnit: ClassVar[IcePy.Operation] = ...
    _op_getSymbol: ClassVar[IcePy.Operation] = ...
    _op_copy: ClassVar[IcePy.Operation] = ...
    def __init__(self, _value: float = ..., _unit: enums.UnitsLength = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    def copy(self, current: Incomplete | None = ...): ...

class LengthPrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    def getUnit(self, _ctx: Incomplete | None = ...): ...
    def begin_getUnit(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUnit(self, _r): ...
    def setUnit(self, unit, _ctx: Incomplete | None = ...): ...
    def begin_setUnit(self, unit, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUnit(self, _r): ...
    def getSymbol(self, _ctx: Incomplete | None = ...): ...
    def begin_getSymbol(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSymbol(self, _r): ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    def begin_copy(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copy(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class LengthI(Length, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...
    def __init__(self, value: Incomplete | None = ..., unit: Incomplete | None = ...) -> None: ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    @staticmethod
    def lookupSymbol(unit): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...

class Power(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    _op_getUnit: ClassVar[IcePy.Operation] = ...
    _op_setUnit: ClassVar[IcePy.Operation] = ...
    _op_getSymbol: ClassVar[IcePy.Operation] = ...
    _op_copy: ClassVar[IcePy.Operation] = ...
    def __init__(self, _value: float = ..., _unit: enums.UnitsPower = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    def copy(self, current: Incomplete | None = ...): ...

class PowerPrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    def getUnit(self, _ctx: Incomplete | None = ...): ...
    def begin_getUnit(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUnit(self, _r): ...
    def setUnit(self, unit, _ctx: Incomplete | None = ...): ...
    def begin_setUnit(self, unit, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUnit(self, _r): ...
    def getSymbol(self, _ctx: Incomplete | None = ...): ...
    def begin_getSymbol(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSymbol(self, _r): ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    def begin_copy(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copy(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PowerI(Power, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...
    def __init__(self, value: Incomplete | None = ..., unit: Incomplete | None = ...) -> None: ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    @staticmethod
    def lookupSymbol(unit): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...

class Pressure(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    _op_getUnit: ClassVar[IcePy.Operation] = ...
    _op_setUnit: ClassVar[IcePy.Operation] = ...
    _op_getSymbol: ClassVar[IcePy.Operation] = ...
    _op_copy: ClassVar[IcePy.Operation] = ...
    def __init__(self, _value: float = ..., _unit: enums.UnitsPressure = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    def copy(self, current: Incomplete | None = ...): ...

class PressurePrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    def getUnit(self, _ctx: Incomplete | None = ...): ...
    def begin_getUnit(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUnit(self, _r): ...
    def setUnit(self, unit, _ctx: Incomplete | None = ...): ...
    def begin_setUnit(self, unit, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUnit(self, _r): ...
    def getSymbol(self, _ctx: Incomplete | None = ...): ...
    def begin_getSymbol(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSymbol(self, _r): ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    def begin_copy(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copy(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class PressureI(Pressure, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...
    def __init__(self, value: Incomplete | None = ..., unit: Incomplete | None = ...) -> None: ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    @staticmethod
    def lookupSymbol(unit): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...

class Temperature(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    _op_getUnit: ClassVar[IcePy.Operation] = ...
    _op_setUnit: ClassVar[IcePy.Operation] = ...
    _op_getSymbol: ClassVar[IcePy.Operation] = ...
    _op_copy: ClassVar[IcePy.Operation] = ...
    def __init__(self, _value: float = ..., _unit: enums.UnitsTemperature = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    def copy(self, current: Incomplete | None = ...): ...

class TemperaturePrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    def getUnit(self, _ctx: Incomplete | None = ...): ...
    def begin_getUnit(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUnit(self, _r): ...
    def setUnit(self, unit, _ctx: Incomplete | None = ...): ...
    def begin_setUnit(self, unit, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUnit(self, _r): ...
    def getSymbol(self, _ctx: Incomplete | None = ...): ...
    def begin_getSymbol(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSymbol(self, _r): ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    def begin_copy(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copy(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class TemperatureI(Temperature, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...
    def __init__(self, value: Incomplete | None = ..., unit: Incomplete | None = ...) -> None: ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    @staticmethod
    def lookupSymbol(unit): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...

class Time(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    _op_getValue: ClassVar[IcePy.Operation] = ...
    _op_setValue: ClassVar[IcePy.Operation] = ...
    _op_getUnit: ClassVar[IcePy.Operation] = ...
    _op_setUnit: ClassVar[IcePy.Operation] = ...
    _op_getSymbol: ClassVar[IcePy.Operation] = ...
    _op_copy: ClassVar[IcePy.Operation] = ...
    def __init__(self, _value: float = ..., _unit: enums.UnitsTime = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    def copy(self, current: Incomplete | None = ...): ...

class TimePrx(IcePy.ObjectPrx):
    def getValue(self, _ctx: Incomplete | None = ...): ...
    def begin_getValue(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getValue(self, _r): ...
    def setValue(self, value, _ctx: Incomplete | None = ...): ...
    def begin_setValue(self, value, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setValue(self, _r): ...
    def getUnit(self, _ctx: Incomplete | None = ...): ...
    def begin_getUnit(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getUnit(self, _r): ...
    def setUnit(self, unit, _ctx: Incomplete | None = ...): ...
    def begin_setUnit(self, unit, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_setUnit(self, _r): ...
    def getSymbol(self, _ctx: Incomplete | None = ...): ...
    def begin_getSymbol(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_getSymbol(self, _r): ...
    def copy(self, _ctx: Incomplete | None = ...): ...
    def begin_copy(self, _response: Incomplete | None = ..., _ex: Incomplete | None = ..., _sent: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    def end_copy(self, _r): ...
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class TimeI(Time, omero_model_UnitBase.UnitBase):
    UNIT_VALUES: ClassVar[list] = ...
    CONVERSIONS: ClassVar[dict] = ...
    SYMBOLS: ClassVar[dict] = ...
    def __init__(self, value: Incomplete | None = ..., unit: Incomplete | None = ...) -> None: ...
    def getUnit(self, current: Incomplete | None = ...): ...
    def getValue(self, current: Incomplete | None = ...): ...
    def getSymbol(self, current: Incomplete | None = ...): ...
    @staticmethod
    def lookupSymbol(unit): ...
    def setUnit(self, unit, current: Incomplete | None = ...): ...
    def setValue(self, value, current: Incomplete | None = ...): ...

class NamedValue(Ice.Object):
    _ice_type: ClassVar[IcePy.TypeInfo] = ...
    def __init__(self, name: str = ..., value: str = ...) -> None: ...
    def ice_ids(self, current: Incomplete | None = ...): ...
    def ice_id(self, current: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...

class NamedValuePrx(IcePy.ObjectPrx):
    @staticmethod
    def checkedCast(proxy, facetOrCtx: Incomplete | None = ..., _ctx: Incomplete | None = ...): ...
    @staticmethod
    def uncheckedCast(proxy, facet: Incomplete | None = ...): ...
    @staticmethod
    def ice_staticId(): ...
